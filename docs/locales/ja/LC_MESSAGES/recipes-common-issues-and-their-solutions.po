# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2023, Artifex
# This file is distributed under the same license as the PyMuPDF package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMuPDF 1.23.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-16 14:20+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../recipes-common-issues-and-their-solutions.rst:7
#: fa2f57e0b01e4bd2bd610b36b0d51451
msgid "Common Issues and their Solutions"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:10
#: ec61ccdb6e7f47beaaa2004b4030b24b
msgid "How To Dynamically Clean Up Corrupt :title:`PDFs`"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:12
#: 8d83786622004100aa23691ec76b2cd9
msgid ""
"This shows a potential use of :title:`PyMuPDF` with another Python PDF "
"library (the excellent pure Python package `pdfrw "
"<https://pypi.python.org/pypi/pdfrw>`_ is used here as an example)."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:14
#: 24a4958fb00d450182436bdc4995b2d9
msgid ""
"If a clean, non-corrupt / decompressed PDF is needed, one could "
"dynamically invoke PyMuPDF to recover from many problems like so::"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:50
#: c4226346c1e742aaa8538ad7268ade47
msgid ""
"With the command line utility *pdftk* (`available "
"<https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/>`_ for Windows "
"only, but reported to also run under `Wine <https://www.winehq.org/>`_) a"
" similar result can be achieved, see `here "
"<http://www.overthere.co.uk/2013/07/22/improving-pypdf2-with-pdftk/>`_. "
"However, you must invoke it as a separate process via *subprocess.Popen*,"
" using stdin and stdout as communication vehicles."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:55
#: 5675d1d6a81348fc81536da9c24584d9
msgid "How to Convert Any Document to :title:`PDF`"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:57
#: 0399986aaae4409e839b8ec74f9b2fc5
msgid ""
"Here is a script that converts any :title:`PyMuPDF` :ref:`supported "
"document<Supported_File_Types>` to a :title:`PDF`. These include XPS, "
"EPUB, FB2, CBZ and image formats, including multi-page TIFF images."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:59
#: b1c2e0f757a44b4dbd7b8654e63c1c6b
msgid ""
"It features maintaining any metadata, table of contents and links "
"contained in the source document::"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:131
#: 77608936a65c467dbe14e13c7deea8b0
msgid "How to Deal with Messages Issued by :title:`MuPDF`"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:133
#: a4d2cbb5656a48aa89ea973a7177925f
msgid ""
"Since :title:`PyMuPDF` v1.16.0, **error messages** issued by the "
"underlying :title:`MuPDF` library are being redirected to the Python "
"standard device *sys.stderr*. So you can handle them like any other "
"output going to this devices."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:135
#: 69525f9f9beb4c1d9b93567d2f9092f7
msgid ""
"In addition, these messages go to the internal buffer together with any "
":title:`MuPDF` warnings -- see below."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:137
#: d54b35c038b94c09868ac9212f889da7
msgid ""
"We always prefix these messages with an identifying string *\"mupdf:\"*. "
"If you prefer to not see recoverable MuPDF errors at all, issue the "
"command `fitz.TOOLS.mupdf_display_errors(False)`."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:140
#: 09c057f557724c7290f5c2d912a9d475
msgid ""
"MuPDF warnings continue to be stored in an internal buffer and can be "
"viewed using :meth:`Tools.mupdf_warnings`."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:142
#: 2e59d0ec4544438dbd9dcdeae85410c2
msgid ""
"Please note that MuPDF errors may or may not lead to Python exceptions. "
"In other words, you may see error messages from which MuPDF can recover "
"and continue processing."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:144
#: ae2cc84b5f874158a39c9cd0d86ed926
msgid ""
"Example output for a **recoverable error**. We are opening a damaged PDF,"
" but MuPDF is able to repair it and gives us a little information on what"
" happened. Then we illustrate how to find out whether the document can "
"later be saved incrementally. Checking the :attr:`Document.is_dirty` "
"attribute at this point also indicates that during `fitz.open` the "
"document had to be repaired:"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:165
#: 2ee25728a8b2458f8376a3eff068b6c9
msgid "Example output for an **unrecoverable error**:"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:181
#: 80f2fbfa5d7a49e5a40e57abcc3727ee
msgid "Changing Annotations: Unexpected Behaviour"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:184
#: ../../recipes-common-issues-and-their-solutions.rst:226
#: 515f3096a12b4b78a641512e8f7d471b b725441fb61943a1aed6647defa00a68
msgid "Problem"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:185
#: c4f7241bade6442e9fe03cd89070126b
msgid "There are two scenarios:"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:187
#: cfdd21913fb74c0586ee2ffbf0b8ff2e
msgid ""
"**Updating** an annotation with PyMuPDF which was created by some other "
"software."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:188
#: a407f9a3a1114dfe89db8ac329504ec8
msgid ""
"**Creating** an annotation with PyMuPDF and later changing it with some "
"other software."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:190
#: 1747eccafc174b6ead2f6d485c245257
msgid ""
"In both cases you may experience unintended changes, like a different "
"annotation icon or text font, the fill color or line dashing have "
"disappeared, line end symbols have changed their size or even have "
"disappeared too, etc."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:193
#: ../../recipes-common-issues-and-their-solutions.rst:231
#: ../../recipes-common-issues-and-their-solutions.rst:301
#: ../../recipes-common-issues-and-their-solutions.rst:314
#: 08c416188d1b4b91b73cde0ef6accde1 66771ce99d9b400c8051457950d641e6
#: a144736dab7b4fdcb2d59370f4790a23 a1a027bb5cf848219170299541afb0cc
msgid "Cause"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:194
#: 11e4d8b1d16c4de89e393a67f1621845
msgid ""
"Annotation maintenance is handled differently by each PDF maintenance "
"application. Some annotation types may not be supported, or not be "
"supported fully or some details may be handled in a different way than in"
" another application. **There is no standard.**"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:196
#: c58452e6b0e94e9883f4daf7ee440817
msgid ""
"Almost always a PDF application also comes with its own icons (file "
"attachments, sticky notes and stamps) and its own set of supported text "
"fonts. For example:"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:198
#: 66c8e970f38d40b8b3843ef6e0cad890
msgid ""
"(Py-) MuPDF only supports these 5 basic fonts for 'FreeText' annotations:"
" Helvetica, Times-Roman, Courier, ZapfDingbats and Symbol -- no italics /"
" no bold variations. When changing a 'FreeText' annotation created by "
"some other app, its font will probably not be recognized nor accepted and"
" be replaced by Helvetica."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:200
#: 52bb936a5e274dcba3f3d28f8ae3e76a
msgid ""
"PyMuPDF supports all PDF text markers (highlight, underline, strikeout, "
"squiggly), but these types cannot be updated with Adobe Acrobat Reader."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:202
#: 005d3593fa2045e8a0c4aa5539be5148
msgid ""
"In most cases there also exists limited support for line dashing which "
"causes existing dashes to be replaced by straight lines. For example:"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:204
#: 06521f085471483ca6b68632f830e513
msgid ""
"PyMuPDF fully supports all line dashing forms, while other viewers only "
"accept a limited subset."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:208
#: ../../recipes-common-issues-and-their-solutions.rst:267
#: 5f20baadc2e84e518d57ef73c015d785 a1fd829f9d184c36acf3ff227a8a33a0
msgid "Solutions"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:209
#: 8115559b363f43cb8007689ede1a5c9d
msgid "Unfortunately there is not much you can do in most of these cases."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:211
#: 4398a3b74cb54c93aa92e7b886b2f91c
msgid "Stay with the same software for **creating and changing** an annotation."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:212
#: cbf85698214b4043bca7b5fcce2345bf
msgid ""
"When using PyMuPDF to change an \"alien\" annotation, try to **avoid** "
":meth:`Annot.update`. The following methods **can be used without it,** "
"so that the original appearance should be maintained:"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:214
#: 06df75d0a4d44e61883293f84788da21
msgid ":meth:`Annot.set_rect` (location changes)"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:215
#: 76064550befd48d3b5396fd63806747c
msgid ":meth:`Annot.set_flags` (annotation behaviour)"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:216
#: f4223abd7dbb4bb1898cdf66ed49b53f
msgid ":meth:`Annot.set_info` (meta information, except changes to *content*)"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:217
#: d2517fe8342d4955a077ec828f55c003
msgid ":meth:`Annot.set_popup` (create popup or change its rect)"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:218
#: 968a51602c3c4987ad5b4466d419ebce
msgid ""
":meth:`Annot.set_optional_content` (add / remove reference to optional "
"content information)"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:219
#: f173494b91df42f392a48b9543553809
msgid ":meth:`Annot.set_open`"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:220
#: f8d9a1af44e14abb93bfd993d0a159df
msgid ":meth:`Annot.update_file` (file attachment changes)"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:223
#: 7a98e28b5179491595e547f1c97e7710
msgid "Misplaced Item Insertions on PDF Pages"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:228
#: 5e47ddbf5c1c4ed28e1cb97bb2b7915e
msgid ""
"You inserted an item (like an image, an annotation or some text) on an "
"existing PDF page, but later you find it being placed at a different "
"location than intended. For example an image should be inserted at the "
"top, but it unexpectedly appears near the bottom of the page."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:233
#: 15530cb28def4c2f943f7e6fe5557b32
msgid ""
"The creator of the PDF has established a non-standard page geometry "
"without keeping it \"local\" (as they should!). Most commonly, the PDF "
"standard point (0,0) at *bottom-left* has been changed to the *top-left* "
"point. So top and bottom are reversed -- causing your insertion to be "
"misplaced."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:235
#: f99d9be8fb484cf0a92461986d1094d8
msgid ""
"The visible image of a PDF page is controlled by commands coded in a "
"special mini-language. For an overview of this language consult "
"\"Operator Summary\" on pp. 643 of the :ref:`AdobeManual`. These commands"
" are stored in :data:`contents` objects as strings (*bytes* in PyMuPDF)."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:237
#: 34ec54790d334564b5cbe68c8a94fd47
msgid ""
"There are commands in that language, which change the coordinate system "
"of the page for all the following commands. In order to limit the scope "
"of such commands to \"local\", they must be wrapped by the command pair "
"*q* (\"save graphics state\", or \"stack\") and *Q* (\"restore graphics "
"state\", or \"unstack\")."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:241
#: 08e57cbd2265452d85ee7fa875e35932
msgid "So the PDF creator did this::"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:249
#: cb2f8721c8c64ee6bb95271353b44c0f
msgid "where they should have done this::"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:260
#: 7c49613e6c4c4448bf97bf2b874557b1
msgid ""
"In the mini-language's syntax, spaces and line breaks are equally "
"accepted token delimiters."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:261
#: 5d38d66927e444c08022b6549b1df157
msgid "Multiple consecutive delimiters are treated as one."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:262
#: 9e3101a477bc4b14bc5c7a03e9aebedf
msgid ""
"Keywords \"stream\" and \"endstream\" are inserted automatically -- not "
"by the programmer."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:269
#: 5762387a2295416bb2076303149b60c3
msgid ""
"Since v1.16.0, there is the property :attr:`Page.is_wrapped`, which lets "
"you check whether a page's contents are wrapped in that string pair."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:271
#: ff556712b3b340688943465c16ee859f
msgid ""
"If it is *False* or if you want to be on the safe side, pick one of the "
"following:"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:273
#: ef5fa95c952141c8b772b2f4ff87abb5
msgid ""
"The easiest way: in your script, do a :meth:`Page.clean_contents` before "
"you do your first item insertion."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:274
#: d3970df080c241c88a07650020bedd87
msgid ""
"Pre-process your PDF with the MuPDF command line utility *mutool clean -c"
" ...* and work with its output file instead."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:275
#: 4a3857e5939847c98355c84888136735
msgid ""
"Directly wrap the page's :data:`contents` with the stacking commands "
"before you do your first item insertion."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:277
#: 5e1455b47ecc4e20ab033d003caa9a31
msgid ""
"**Solutions 1. and 2.** use the same technical basis and **do a lot "
"more** than what is required in this context: they also clean up other "
"inconsistencies or redundancies that may exist, multiple */Contents* "
"objects will be concatenated into one, and much more."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:279
#: 8cb5922772e74867bc4bb0922b2d60af
msgid ""
"For **incremental saves,** solution 1. has an unpleasant implication: it "
"will bloat the update delta, because it changes so many things and, in "
"addition, stores the **cleaned contents uncompressed**. So, if you use "
":meth:`Page.clean_contents` you should consider **saving to a new file** "
"with (at least) *garbage=3* and *deflate=True*."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:281
#: b7478c7cd10548599181db60ff509ed2
msgid ""
"**Solution 3.** is completely under your control and only does the "
"minimum corrective action. There is a handy utility method "
":meth:`Page.wrap_contents` which -- as twe name suggests -- **wraps** the"
" page's :data:`contents` object(s) by the PDF commands `q` and `Q`."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:283
#: 7f832720e4c54e3b979afa37f6dcb90f
msgid ""
"This solution is extremely fast and the changes to the PDF are minimal. "
"This is useful in situations where incrementally saving the file is "
"desirable -- or even a must when the PDF has been digitally signed and "
"you cannot change this status."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:285
#: 2c040a0cf1804b6982ebd5f88b476db9
msgid "We recommend the following snippet to get the situation under control:"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:293
#: 9c659a84ac5c426b8f0a1f6bd64b90e4
msgid "Missing or Unreadable Extracted Text"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:294
#: 349031568f244add9b1ee51222247acf
msgid ""
"Fairly often, text extraction does not work text as you would expect: "
"text may be missing, or may not appear in the reading sequence visible on"
" your screen, or contain garbled characters (like a ? or a \"TOFU\" "
"symbol), etc. This can be caused by a number of different problems."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:297
#: 2773e5d298e04e91871caae3718732ed
msgid "Problem: no text is extracted"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:298
#: db5eea7716d94201a8cc74d0cc90eba3
msgid ""
"Your PDF viewer does display text, but you cannot select it with your "
"cursor, and text extraction delivers nothing."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:302
#: 6701a64fb6b3427b994b3eb9785ab23b
msgid ""
"You may be looking at an image embedded in the PDF page (e.g. a scanned "
"PDF)."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:303
#: 211a0de02fdf4701a7ad88d00869ab8c
msgid ""
"The PDF creator used no font, but **simulated** text by painting it, "
"using little lines and curves. E.g. a capital \"D\" could be painted by a"
" line \"|\" and a left-open semi-circle, an \"o\" by an ellipse, and so "
"on."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:306
#: ../../recipes-common-issues-and-their-solutions.rst:319
#: 8595726e84a04e6c97bba8ab071ae4aa 996ccfa52b5d4ffdb932aab19594a763
msgid "Solution"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:307
#: bfa52f92098642f59706455d42974d55
msgid ""
"Use an OCR software like `OCRmyPDF <https://pypi.org/project/ocrmypdf/>`_"
" to insert a hidden text layer underneath the visible page. The resulting"
" PDF should behave as expected."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:310
#: 84ac082b61f54a6682189954d5bbc601
msgid "Problem: unreadable text"
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:311
#: 99ce0e2b97274fa48c1a28e132ea5655
msgid ""
"Text extraction does not deliver the text in readable order, duplicates "
"some text, or is otherwise garbled."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:315
#: 9734341f85d545b8ba8e9e84e770858a
msgid ""
"The single characters are readable as such (no \"<?>\" symbols), but the "
"sequence in which the text is **coded in the file** deviates from the "
"reading order. The motivation behind may be technical or protection of "
"data against unwanted copies."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:316
#: 1eef3f19b55041aeb68b6952ec16430c
msgid ""
"Many \"<?>\" symbols occur, indicating MuPDF could not interpret these "
"characters. The font may indeed be unsupported by MuPDF, or the PDF "
"creator may haved used a font that displays readable text, but on purpose"
" obfuscates the originating corresponding unicode character."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:320
#: cd8ebe20912d4683a30d482eed357d14
msgid "Use layout preserving text extraction: `python -m fitz gettext file.pdf`."
msgstr ""

#: ../../recipes-common-issues-and-their-solutions.rst:321
#: 30b9c0641ff3480db4535887483556bf
msgid ""
"If other text extraction tools also don't work, then the only solution "
"again is OCRing the page."
msgstr ""

#: ../../footer.rst:-1 8bd2aa51e72a469797c95d3e65e4b8da
msgid "Discord logo"
msgstr ""

