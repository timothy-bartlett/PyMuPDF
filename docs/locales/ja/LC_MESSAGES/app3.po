# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2023, Artifex
# This file is distributed under the same license as the PyMuPDF package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMuPDF 1.23.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-16 14:20+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../app3.rst:7 33ca195713624e268960b866532abe1b
msgid "Appendix 3: Assorted Technical Information"
msgstr ""

#: ../../app3.rst:8 5d7604936669477a8543dc05f394f711
msgid ""
"This section deals with various technical topics, that are not "
"necessarily related to each other."
msgstr ""

#: ../../app3.rst:15 698afd719d9248b68cc78d0c514331a3
msgid "Image Transformation Matrix"
msgstr ""

#: ../../app3.rst:16 8f461cbb3aee4833a1c77838562def55
msgid ""
"Starting with version 1.18.11, the image transformation matrix is "
"returned by some methods for text and image extraction: "
":meth:`Page.get_text` and :meth:`Page.get_image_bbox`."
msgstr ""

#: ../../app3.rst:18 4656e953d5f9422bae9cb2df769dad1c
msgid ""
"The transformation matrix contains information about how an image was "
"transformed to fit into the rectangle (its \"boundary box\" = \"bbox\") "
"on some document page. By inspecting the image's bbox on the page and "
"this matrix, one can determine for example, whether and how the image is "
"displayed scaled or rotated on a page."
msgstr ""

#: ../../app3.rst:20 aa05b1468af44158ad2cac26b679a64b
msgid ""
"The relationship between image dimension and its bbox on a page is the "
"following:"
msgstr ""

#: ../../app3.rst:24 505829211c4241ed8436e7702ecb4e35
msgid "Using the original image's width and height,"
msgstr ""

#: ../../app3.rst:23 afc6aa25316a4306beacbffe6a3a3b08
msgid "define the image rectangle `imgrect = fitz.Rect(0, 0, width, height)`"
msgstr ""

#: ../../app3.rst:24 fe58a6e0cbec47918714a20520c60e34
msgid ""
"define the \"shrink matrix\" `shrink = fitz.Matrix(1/width, 0, 0, "
"1/height, 0, 0)`."
msgstr ""

#: ../../app3.rst:26 70023984ad2c492ab9233234842f8a72
msgid ""
"Transforming the image rectangle with its shrink matrix, will result in "
"the unit rectangle: `imgrect * shrink = fitz.Rect(0, 0, 1, 1)`."
msgstr ""

#: ../../app3.rst:28 fec6c51054574cf8940a81ebe75a306e
msgid ""
"Using the image **transformation matrix** \"transform\", the following "
"steps will compute the bbox::"
msgstr ""

#: ../../app3.rst:34 3c5328ada81748fa84ad503f7204eef5
msgid ""
"Inspecting the matrix product `shrink * transform` will reveal all "
"information about what happened to the image rectangle to make it fit "
"into the bbox on the page: rotation, scaling of its sides and translation"
" of its origin. Let us look at an example:"
msgstr ""

#: ../../app3.rst:71 93862911aecc440b8d4589ed6e08db50
msgid "PDF Base 14 Fonts"
msgstr ""

#: ../../app3.rst:72 5744a4d4df564eec89a75c6014847444
msgid ""
"The following 14 builtin font names **must be supported by every PDF "
"viewer** application. They are available as a dictionary, which maps "
"their full names amd their abbreviations in lower case to the full font "
"basename. Wherever a **fontname** must be provided in PyMuPDF, any **key "
"or value** from the dictionary may be used::"
msgstr ""

#: ../../app3.rst:105 db63a3bf8973449aacedd81967a27fb4
msgid ""
"In contrast to their obligation, not all PDF viewers support these fonts "
"correctly and completely -- this is especially true for Symbol and "
"ZapfDingbats. Also, the glyph (visual) images will be specific to every "
"reader."
msgstr ""

#: ../../app3.rst:107 40ff17b9c8784851aa9555bb17cd018f
msgid ""
"To see how these fonts can be used -- including the **CJK built-in** "
"fonts -- look at the table in :meth:`Page.insert_font`."
msgstr ""

#: ../../app3.rst:114 96a83114ee56481ca444d925db24309b
msgid "Adobe PDF References"
msgstr ""

#: ../../app3.rst:116 c5fb37f607b2467ca7af74b66883ab82
msgid ""
"This PDF Reference manual published by Adobe is frequently quoted "
"throughout this documentation. It can be viewed and downloaded from `here"
" <https://opensource.adobe.com/dc-acrobat-sdk-"
"docs/standards/pdfstandards/pdf/PDF32000_2008.pdf>`_."
msgstr ""

#: ../../app3.rst:118 794622b3f36a4feca4fb8df3a088759a
msgid ""
"For a long time, an older version was also available under `this "
"<http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf>`_"
" link. It seems to be taken off of the web site in October 2021. Earlier "
"(pre 1.19.*) versions of the PyMuPDF documentation used to refer to this "
"document. We have undertaken an effort to replace referrals to the "
"current specification above."
msgstr ""

#: ../../app3.rst:125 055579409da441d49688fb684c94a9df
msgid "Using Python Sequences as Arguments in PyMuPDF"
msgstr ""

#: ../../app3.rst:126 33a686f0660f4a9d938fcdb81b0c2a12
msgid ""
"When PyMuPDF objects and methods require a Python **list** of numerical "
"values, other Python **sequence types** are also allowed. Python classes "
"are said to implement the **sequence protocol**, if they have a "
"`__getitem__()` method."
msgstr ""

#: ../../app3.rst:128 cc28166fe51e43bd8dd4862353d2409d
msgid ""
"This basically means, you can interchangeably use Python *list* or "
"*tuple* or even *array.array*, *numpy.array* and *bytearray* types in "
"these cases."
msgstr ""

#: ../../app3.rst:130 16c32014c0364f25806837e9a7887b29
msgid "For example, specifying a sequence `\"s\"` in any of the following ways"
msgstr ""

#: ../../app3.rst:132 92e35b08c8354a8589255be2c0632791
msgid "`s = [1, 2]` -- a list"
msgstr ""

#: ../../app3.rst:133 fa714ca3b8a047d8b54ec3e9c30585be
msgid "`s = (1, 2)` -- a tuple"
msgstr ""

#: ../../app3.rst:134 3edaef312ee94cb6a28fdc690faccd6c
msgid "`s = array.array(\"i\", (1, 2))` -- an array.array"
msgstr ""

#: ../../app3.rst:135 0f216dc877794ec7ac6d87f489165244
msgid "`s = numpy.array((1, 2))` -- a numpy array"
msgstr ""

#: ../../app3.rst:136 217c10fe429b4a0db7aab1a6774bbfff
msgid "`s = bytearray((1, 2))` -- a bytearray"
msgstr ""

#: ../../app3.rst:138 0d35c5cad9a2496eb038df24e4f4dca2
msgid "will make it usable in the following example expressions:"
msgstr ""

#: ../../app3.rst:140 8940895f973043ffbfb11116e4849eb8
msgid "`fitz.Point(s)`"
msgstr ""

#: ../../app3.rst:141 5dfbd6c603374af386af13cbb05831d9
msgid "`fitz.Point(x, y) + s`"
msgstr ""

#: ../../app3.rst:142 248d1d9d4a8e491e8724e8952814d071
msgid "`doc.select(s)`"
msgstr ""

#: ../../app3.rst:144 08f875a418104cf8b5b443831a79374c
msgid ""
"Similarly with all geometry objects :ref:`Rect`, :ref:`IRect`, "
":ref:`Matrix` and :ref:`Point`."
msgstr ""

#: ../../app3.rst:146 a7c65d60549f4a1c984f58c3a42fb2b7
msgid ""
"Because all PyMuPDF geometry classes themselves are special cases of "
"sequences, they (with the exception of :ref:`Quad` -- see below) can be "
"freely used where numerical sequences can be used, e.g. as arguments for "
"functions like *list()*, *tuple()*, *array.array()* or *numpy.array()*. "
"Look at the following snippet to see this work."
msgstr ""

#: ../../app3.rst:163 23165210c6244741a9ce6332eda74d2a
msgid ""
":ref:`Quad` is a Python sequence object as well and has a length of 4. "
"Its items however are :data:`point_like` -- not numbers. Therefore, the "
"above remarks do not apply."
msgstr ""

#: ../../app3.rst:170 78acd4d431e341dd962f028050b264e5
msgid "Ensuring Consistency of Important Objects in PyMuPDF"
msgstr ""

#: ../../app3.rst:171 9ec97038963641cf9c77ce883b4b7e17
msgid ""
"PyMuPDF is a Python binding for the C library MuPDF. While a lot of "
"effort has been invested by MuPDF's creators to approximate some sort of "
"an object-oriented behavior, they certainly could not overcome basic "
"shortcomings of the C language in that respect."
msgstr ""

#: ../../app3.rst:173 358e188cabb04de490fe4f7f3f120c57
msgid ""
"Python on the other hand implements the OO-model in a very clean way. The"
" interface code between PyMuPDF and MuPDF consists of two basic files: "
"*fitz.py* and *fitz_wrap.c*. They are created by the excellent SWIG tool "
"for each new version."
msgstr ""

#: ../../app3.rst:175 1d4bde5f5e414fa4b2aaca07bec71664
msgid ""
"When you use one of PyMuPDF's objects or methods, this will result in "
"execution of some code in *fitz.py*, which in turn will call some C code "
"compiled with *fitz_wrap.c*."
msgstr ""

#: ../../app3.rst:177 61133a4a341240ecbccbcaf3feae8dde
msgid ""
"Because SWIG goes a long way to keep the Python and the C level in sync, "
"everything works fine, if a certain set of rules is being strictly "
"followed. For example: **never access** a :ref:`Page` object, after you "
"have closed (or deleted or set to *None*) the owning :ref:`Document`. Or,"
" less obvious: **never access** a page or any of its children (links or "
"annotations) after you have executed one of the document methods "
"*select()*, *delete_page()*, *insert_page()* ... and more."
msgstr ""

#: ../../app3.rst:179 84bfc9102b9f40f89c037cfb5d6cf601
msgid ""
"But just no longer accessing invalidated objects is actually not enough: "
"They should rather be actively deleted entirely, to also free C-level "
"resources (meaning allocated memory)."
msgstr ""

#: ../../app3.rst:181 270d6505474a4f9eb836eebf6ab9a782
msgid ""
"The reason for these rules lies in the fact that there is a hierarchical "
"2-level one-to-many relationship between a document and its pages and "
"also between a page and its links / annotations. To maintain a consistent"
" situation, any of the above actions must lead to a complete reset -- in "
"**Python and, synchronously, in C**."
msgstr ""

#: ../../app3.rst:183 b1acb6e58964468ead03014ea3dfb41c
msgid "SWIG cannot know about this and consequently does not do it."
msgstr ""

#: ../../app3.rst:185 bb5d3b7fbef54e4fab7af5ea0db556b9
msgid ""
"The required logic has therefore been built into PyMuPDF itself in the "
"following way."
msgstr ""

#: ../../app3.rst:187 7003814b9cb14bdf9aba5b6239e784fb
msgid ""
"If a page \"loses\" its owning document or is being deleted itself, all "
"of its currently existing annotations and links will be made unusable in "
"Python, and their C-level counterparts will be deleted and deallocated."
msgstr ""

#: ../../app3.rst:189 096d5ae7233e4b3c919c467bf675491a
msgid ""
"If a document is closed (or deleted or set to *None*) or if its structure"
" has changed, then similarly all currently existing pages and their "
"children will be made unusable, and corresponding C-level deletions will "
"take place. \"Structure changes\" include methods like *select()*, "
"*delePage()*, *insert_page()*, *insert_pdf()* and so on: all of these "
"will result in a cascade of object deletions."
msgstr ""

#: ../../app3.rst:191 7b5d97b44da5443f9612ec0a963c4c46
msgid ""
"The programmer will normally not realize any of this. If he, however, "
"tries to access invalidated objects, exceptions will be raised."
msgstr ""

#: ../../app3.rst:193 dc0506dd89d64f98a17c93c9aa9d2c95
msgid ""
"Invalidated objects cannot be directly deleted as with Python statements "
"like *del page* or *page = None*, etc. Instead, their *__del__* method "
"must be invoked."
msgstr ""

#: ../../app3.rst:195 6620fbbe21184d1a8506a7e52d58bdf2
msgid ""
"All pages, links and annotations have the property *parent*, which points"
" to the owning object. This is the property that can be checked on the "
"application level: if *obj.parent == None* then the object's parent is "
"gone, and any reference to its properties or methods will raise an "
"exception informing about this \"orphaned\" state."
msgstr ""

#: ../../app3.rst:197 e8df4fb66951412b937d7a63e0657541
msgid "A sample session:"
msgstr ""

#: ../../app3.rst:214 bea8af4d86c84f7096e87b9f4872b0a5
msgid "This shows the cascading effect:"
msgstr ""

#: ../../app3.rst:231 87b5d6c22a184db0907f64f3b23243b5
msgid ""
"Objects outside the above relationship are not included in this "
"mechanism. If you e.g. created a table of contents by *toc = "
"doc.get_toc()*, and later close or change the document, then this cannot "
"and does not change variable *toc* in any way. It is your responsibility "
"to refresh such variables as required."
msgstr ""

#: ../../app3.rst:238 28be6e4896304aeaaf367d408afb2454
msgid "Design of Method :meth:`Page.show_pdf_page`"
msgstr ""

#: ../../app3.rst:241 0573c0f0ce5742bb90a5075d494d5738
msgid "Purpose and Capabilities"
msgstr ""

#: ../../app3.rst:243 97f7c9654077441c9b96c107f87c7786
msgid ""
"The method displays an image of a (\"source\") page of another PDF "
"document within a specified rectangle of the current (\"containing\", "
"\"target\") page."
msgstr ""

#: ../../app3.rst:245 fa832dda8bca412e8d4884ab5c36c9ec
msgid ""
"**In contrast** to :meth:`Page.insert_image`, this display is vector-"
"based and hence remains accurate across zooming levels."
msgstr ""

#: ../../app3.rst:246 1c5113ba7b334b39aacdf3c71c365c11
msgid ""
"**Just like** :meth:`Page.insert_image`, the size of the display is "
"adjusted to the given rectangle."
msgstr ""

#: ../../app3.rst:248 2794d785ea6f4754964fb7421a0af2c4
msgid "The following variations of the display are currently supported:"
msgstr ""

#: ../../app3.rst:250 6c6b636b457448ac915d21288df7638f
msgid ""
"Bool parameter `\"keep_proportion\"` controls whether to maintain the "
"aspect ratio (default) or not."
msgstr ""

#: ../../app3.rst:251 ad729b1cf23f45f78ce599a7b0f5b505
msgid ""
"Rectangle parameter `\"clip\"` restricts the visible part of the source "
"page rectangle. Default is the full page."
msgstr ""

#: ../../app3.rst:252 bbe21508f39a4c8e9c47c8d42e06c788
msgid ""
"float `\"rotation\"` rotates the display by an arbitrary angle (degrees)."
" If the angle is not an integer multiple of 90, only 2 of the 4 corners "
"may be positioned on the target border if also `\"keep_proportion\"` is "
"true."
msgstr ""

#: ../../app3.rst:253 103b7790b22f43079d26ecaf727fc3a3
msgid ""
"Bool parameter `\"overlay\"` controls whether to put the image on top "
"(foreground, default) of current page content or not (background)."
msgstr ""

#: ../../app3.rst:255 cda7dd8ce6ad41cda2ec56124d76adeb
msgid "Use cases include (but are not limited to) the following:"
msgstr ""

#: ../../app3.rst:257 b8ce554fb75a445fb6e9c017a18a973a
msgid ""
"\"Stamp\" a series of pages of the current document with the same image, "
"like a company logo or a watermark."
msgstr ""

#: ../../app3.rst:258 3c982e832912448ea84c5b93508b3638
msgid ""
"Combine arbitrary input pages into one output page to support “booklet” "
"or double-sided printing (known as \"4-up\", \"n-up\")."
msgstr ""

#: ../../app3.rst:259 830b590a3c8e416d8d132f87020c90de
msgid ""
"Split up (large) input pages into several arbitrary pieces. This is also "
"called “posterization”, because you e.g. can split an A4 page "
"horizontally and vertically, print the 4 pieces enlarged to separate A4 "
"pages, and end up with an A2 version of your original page."
msgstr ""

#: ../../app3.rst:262 52a42578555a48ca8c94301e6a6cd7e0
msgid "Technical Implementation"
msgstr ""

#: ../../app3.rst:264 09e5f5e308a84f9d8511818b5ffcdc82
msgid ""
"This is done using PDF **\"Form XObjects\"**, see section 8.10 on page "
"217 of :ref:`AdobeManual`. On execution of a :meth:`Page.show_pdf_page`, "
"the following things happen:"
msgstr ""

#: ../../app3.rst:266 ce15260df9ed49d09a7e6e8b53d22f72
msgid ""
"The :data:`resources` and :data:`contents` objects of source page in "
"source document are copied over to the target document, jointly creating "
"a new **Form XObject** with the following properties. The PDF "
":data:`xref` number of this object is returned by the method."
msgstr ""

#: ../../app3.rst:268 fed99b8ac0dc45bcb28939d98f8ff226
msgid "`/BBox` equals `/Mediabox` of the source page"
msgstr ""

#: ../../app3.rst:269 f7b845677736445f97969f076e069052
msgid "`/Matrix` equals the identity matrix."
msgstr ""

#: ../../app3.rst:270 b6f825c436d34fbeb2bdc7630df6e278
msgid ""
"`/Resources` equals that of the source page. This involves a “deep-copy” "
"of hierarchically nested other objects (including fonts, images, etc.). "
"The complexity involved here is covered by MuPDF's grafting [#f1]_ "
"technique functions."
msgstr ""

#: ../../app3.rst:271 93c85d00c89541699d33481f09cd3a0b
msgid ""
"This is a stream object type, and its stream is an exact copy of the "
"combined data of the source page's :data:`contents` objects."
msgstr ""

#: ../../app3.rst:273 2834a7f762254412b36f8d0e45f2ddce
msgid ""
"This Form XObject is only executed once per shown source page. Subsequent"
" displays of the same source page will skip this step and only create "
"\"pointer\" Form XObjects (done in next step) to this object."
msgstr ""

#: ../../app3.rst:275 ae970441657e4bcaacab19e58abc5b7d
msgid ""
"A second **Form XObject** is then created which the target page uses to "
"invoke the display. This object has the following properties:"
msgstr ""

#: ../../app3.rst:277 c95fad4b7da44ac0b44534432a399324
msgid "`/BBox` equals the `/CropBox` of the source page (or `\"clip\"`)."
msgstr ""

#: ../../app3.rst:278 709e8a03ef0648b9b0237f2d13e7aaf3
msgid "`/Matrix` represents the mapping of `/BBox` to the target rectangle."
msgstr ""

#: ../../app3.rst:279 e5aad1bf1c4841fb9ec83b65e0195dbb
msgid ""
"`/XObject` references the previous Form XObject via the fixed name "
"`fullpage`."
msgstr ""

#: ../../app3.rst:280 13c9ef1d1f864eaaa19a2a16492c9a4c
msgid ""
"The stream of this object contains exactly one fixed statement: "
"`/fullpage Do`."
msgstr ""

#: ../../app3.rst:281 15adfedf89e24757a94421572bc07587
msgid ""
"If the method's `\"oc\"` argument is given, its value is assigned to this"
" Form XObject as `/OC`."
msgstr ""

#: ../../app3.rst:283 ca4a3b3bdf6f41cf9f689efcee4224cc
msgid ""
"The :data:`resources` and :data:`contents` objects of the target page are"
" now modified as follows."
msgstr ""

#: ../../app3.rst:285 efca8addf2f442a999367bdc630b53ac
msgid ""
"Add an entry to the `/XObject` dictionary of `/Resources` with the name "
"`fzFrm<n>` (with n chosen such that this entry is unique on the page)."
msgstr ""

#: ../../app3.rst:286 7274a922d234436aa772aba08cd1cba9
msgid ""
"Depending on `\"overlay\"`, prepend or append a new object to the page's "
"`/Contents` array, containing the statement `q /fzFrm<n> Do Q`."
msgstr ""

#: ../../app3.rst:288 2fab5f6088074d2b9dd280aa6b267583
msgid "This design approach ensures that:"
msgstr ""

#: ../../app3.rst:290 353b1a2ba15949959a9e2da016c2ac06
msgid ""
"The (potentially large) source page is only copied once to the target "
"PDF. Only small \"pointer\" Form XObjects objects are created per each "
"target page to show the source page."
msgstr ""

#: ../../app3.rst:291 aa91782567f245af894a3573cb420677
msgid ""
"Each referring target page can have its own `\"oc\"` parameter to control"
" the source page's visibility individually."
msgstr ""

#: ../../app3.rst:298 b91e7321758546f1bf2be546e74d0721
msgid "Redirecting Error and Warning Messages"
msgstr ""

#: ../../app3.rst:299 ea9068813d034a9894e5bdfa987726d2
msgid ""
"Since MuPDF version 1.16 error and warning messages can be redirected via"
" an official plugin."
msgstr ""

#: ../../app3.rst:301 b494f2abdcfc4bffb97f4483b8d07755
msgid ""
"PyMuPDF will put error messages to `sys.stderr` prefixed with the string "
"\"mupdf:\". Warnings are internally stored and can be accessed via "
"*fitz.TOOLS.mupdf_warnings()*. There also is a function to empty this "
"store."
msgstr ""

#: ../../app3.rst:305 99b427f7ce9e4e528d930311d02cde0a
msgid "Footnotes"
msgstr ""

#: ../../app3.rst:306 49ef9c0a37e24a3685cd3b28faff61ed
msgid ""
"MuPDF supports \"deep-copying\" objects between PDF documents. To avoid "
"duplicate data in the target, it uses so-called \"graftmaps\", like a "
"form of scratchpad: for each object to be copied, its :data:`xref` number"
" is looked up in the graftmap. If found, copying is skipped. Otherwise, "
"the new :data:`xref` is recorded and the copy takes place. PyMuPDF makes "
"use of this technique in two places so far: :meth:`Document.insert_pdf` "
"and :meth:`Page.show_pdf_page`. This process is fast and very efficient, "
"because it prevents multiple copies of typically large and frequently "
"referenced data, like images and fonts. However, you may still want to "
"consider using garbage collection (option 4) in any of the following "
"cases:"
msgstr ""

#: ../../app3.rst:308 ae7161e9a4034459ad51b582d278f1e8
msgid ""
"The target PDF is not new / empty: grafting does not check for resources "
"that already existed (e.g. images, fonts) in the target document before "
"opening it."
msgstr ""

#: ../../app3.rst:309 42ac12d3ea0f4596b88ce4a2e737ad19
msgid ""
"Using :meth:`Page.show_pdf_page` for more than one source document: each "
"grafting occurs **within one source** PDF only, not across multiple. So "
"if e.g. the same image exists in pages from different source PDFs, then "
"this will not be detected until garbage collection."
msgstr ""

#: ../../footer.rst:-1 9ff4531737dd4caababe488f5de96325
msgid "Discord logo"
msgstr ""

