# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2023, Artifex
# This file is distributed under the same license as the PyMuPDF package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMuPDF 1.23.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-16 14:20+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../recipes-journalling.rst:7 162f8e5be02b435996e936e75d7414f0
msgid "Journalling"
msgstr ""

#: ../../recipes-journalling.rst:10 1eee3705bd8d462eb4173af15799a264
msgid ""
"Starting with version 1.19.0, journalling is possible when updating PDF "
"documents."
msgstr ""

#: ../../recipes-journalling.rst:12 01d8c23d1a6b4fee91ace3858617141e
msgid ""
"Journalling is a logging mechanism which permits either **reverting** or "
"**re-applying** changes to a PDF. Similar to LUWs \"Logical Units of "
"Work\" in modern database systems, one can group a set of updates into an"
" \"operation\". In MuPDF journalling, an operation plays the role of a "
"LUW."
msgstr ""

#: ../../recipes-journalling.rst:14 2828c556ba9b4cc18c6e08404a25e1b3
msgid ""
"In contrast to LUW implementations found in database systems, MuPDF "
"journalling happens on a **per document level**. There is no support for "
"simultaneous updates across multiple PDFs: one would have to establish "
"one's own logic here."
msgstr ""

#: ../../recipes-journalling.rst:16 6c7f8177f0e2439486758abb62c8fdaa
msgid ""
"Journalling must be *enabled* via a document method. Journalling is "
"possible for existing or new documents. Journalling **can be disabled "
"only** by closing the file."
msgstr ""

#: ../../recipes-journalling.rst:17 d108fce39ad54c9fb5a35926e9555a53
msgid ""
"Once enabled, every change must happen inside an *operation* -- otherwise"
" an exception is raised. An operation is started and stopped via document"
" methods. Updates happening between these two calls form an LUW and can "
"thus collectively be rolled back or re-applied, or, in MuPDF terminology "
"\"undone\" resp. \"redone\"."
msgstr ""

#: ../../recipes-journalling.rst:18 731b0b3054ab40ee81ec87f68680131b
msgid ""
"At any point, the journalling status can be queried: whether journalling "
"is active, how many operations have been recorded, whether \"undo\" or "
"\"redo\" is possible, the current position inside the journal, etc."
msgstr ""

#: ../../recipes-journalling.rst:19 51c4983ea7bc43f58992c0bae8d5cef7
msgid ""
"The journal can be **saved to** or **loaded from** a file. These are "
"document methods."
msgstr ""

#: ../../recipes-journalling.rst:20 833e4734322d40c4a9635a58649d8ae5
msgid ""
"When loading a journal file, compatibility with the document is checked "
"and journalling is automatically enabled upon success."
msgstr ""

#: ../../recipes-journalling.rst:21 89257becd39e46e7b05a0f70ff3a6064
msgid ""
"For an **existing** PDF being journalled, a special new save method is "
"available: :meth:`Document.save_snapshot`. This performs a special "
"incremental save that includes all journalled updates so far. If its "
"journal is saved at the same time (immediately after the document "
"snapshot), then document and journal are in sync and can later on be used"
" together to undo or redo operations or to continue journalled updates --"
" just as if there had been no interruption."
msgstr ""

#: ../../recipes-journalling.rst:22 2088a85a131f43da971a72360ceeb170
msgid ""
"The snapshot PDF is a valid PDF in every aspect and fully usable. If the "
"document is however changed in any way without using its journal file, "
"then a desynchronization will take place and the journal is rendered "
"unusable."
msgstr ""

#: ../../recipes-journalling.rst:23 f7f79e84914f4335a7d655d4d9ec4c7e
msgid ""
"Snapshot files are structured like incremental updates. Nevertheless, the"
" internal journalling logic requires, that saving **must happen to a new "
"file**. So the user should develop a file naming convention to support "
"recognizable relationships between an original PDF, like `original.pdf` "
"and its snapshot sets, like `original-snap1.pdf` / `original-snap1.log`, "
"`original-snap2.pdf` / `original-snap2.log`, etc."
msgstr ""

#: ../../recipes-journalling.rst:26 d2cb3c5e9b8a4f78b23dc94a089fa6b2
msgid "Example Session 1"
msgstr ""

#: ../../recipes-journalling.rst:27 ../../recipes-journalling.rst:98
#: 51bd7b4b589b463da58a23ada5e17624 56e11e17d2a849a2b774c93e4cebca91
msgid "Description:"
msgstr ""

#: ../../recipes-journalling.rst:29 1b605ba20b944709bbb793fb850e1a0c
msgid ""
"Make a new PDF and enable journalling. Then add a page and some text "
"lines -- each as a separate operation."
msgstr ""

#: ../../recipes-journalling.rst:30 bde7498b67ac4f4aa3e84b091d6eb461
msgid ""
"Navigate within the journal, undoing and redoing these updates and "
"displaying status and file results::"
msgstr ""

#: ../../recipes-journalling.rst:97 8b40e80c5f0d4027b8aaf4ba8e4285e3
msgid "Example Session 2"
msgstr ""

#: ../../recipes-journalling.rst:100 43ff667b4170420aaacce401a500d0d3
msgid ""
"Similar to previous, but after undoing some operations, we now add a "
"different update. This will cause:"
msgstr ""

#: ../../recipes-journalling.rst:102 2c6008fe73da4e918fcf48f47c04f253
msgid "permanent removal of the undone journal entries"
msgstr ""

#: ../../recipes-journalling.rst:103 942072c04f294bf49dd11bb76b282a2c
msgid "the new update operation will become the new last entry."
msgstr ""

#: ../../footer.rst:-1 f6d68aef909b42f597860e55087ba121
msgid "Discord logo"
msgstr ""

