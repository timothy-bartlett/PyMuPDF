# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2023, Artifex
# This file is distributed under the same license as the PyMuPDF package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMuPDF 1.23.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-16 14:20+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../algebra.rst:6 813ba009ec774833bbcd496340eda09b
msgid "Operator Algebra for Geometry Objects"
msgstr ""

#: ../../algebra.rst:10 0d2af547035941d8853df5738249e928
msgid ""
"Instances of classes :ref:`Point`, :ref:`IRect`, :ref:`Rect`, :ref:`Quad`"
" and :ref:`Matrix` are collectively also called \"geometry\" objects."
msgstr ""

#: ../../algebra.rst:12 39906200c9684896adf7213485a13e02
msgid ""
"They all are special cases of Python sequences, see :ref:`SequenceTypes` "
"for more background."
msgstr ""

#: ../../algebra.rst:14 9b9740cb8b8f49188bdb74a669d32575
msgid ""
"We have defined operators for these classes that allow dealing with them "
"(almost) like ordinary numbers in terms of addition, subtraction, "
"multiplication, division, and some others."
msgstr ""

#: ../../algebra.rst:16 ba82659191d14ec48fba8014a0fa2e29
msgid "This chapter is a synopsis of what is possible."
msgstr ""

#: ../../algebra.rst:19 62f3145601b541b984b384091a6ba5b2
msgid "General Remarks"
msgstr ""

#: ../../algebra.rst:20 c566c8f6fe0c462aaab3ee536eba9e83
msgid ""
"Operators can be either **binary** (i.e. involving two objects) or "
"**unary**."
msgstr ""

#: ../../algebra.rst:22 3e82a4487c63474a91f4b42106cbfb31
msgid ""
"The resulting type of **binary** operations is either a **new object of "
"the left operand's class** or a bool."
msgstr ""

#: ../../algebra.rst:24 69f0f86c148241f5a4168f42234e032d
msgid ""
"The result of **unary** operations is either a **new object** of the same"
" class, a bool or a float."
msgstr ""

#: ../../algebra.rst:26 f961d84c146f40f588ec3d543489ec61
msgid ""
"The binary operators *+, -, *, /* are defined for all classes. They "
"*roughly* do what you would expect -- **except, that the second operand "
"...**"
msgstr ""

#: ../../algebra.rst:28 821873dd1c924adcbea7641b0cc34487
msgid ""
"may always be a number which then performs the operation on every "
"component of the first one,"
msgstr ""

#: ../../algebra.rst:29 372851491015464eab536977f0dc0f4e
msgid ""
"may always be a numeric sequence of the same length (2, 4 or 6) -- we "
"call such sequences :data:`point_like`, :data:`rect_like`, "
":data:`quad_like` or :data:`matrix_like`, respectively."
msgstr ""

#: ../../algebra.rst:31 9e4f0de5a2d54c2eaf1607c8de696d2a
msgid ""
"Rectangles support additional binary operations: **intersection** "
"(operator *\"&\"*), **union** (operator *\"|\"*) and **containment** "
"checking."
msgstr ""

#: ../../algebra.rst:33 8768d96321144c42932ebe70ea897367
msgid ""
"Binary operators fully support in-place operations, so expressions like "
"`a /= b` are valid if b is numeric or \"a_like\"."
msgstr ""

#: ../../algebra.rst:37 bb3416126e3d4e64aa063dd75ac8bbb5
msgid "Unary Operations"
msgstr ""

#: ../../algebra.rst:40 ../../algebra.rst:56 3fddc081d23642a89962017517d471c5
#: f03cb99c327c4b4e90df5f100cde8236
msgid "Oper."
msgstr ""

#: ../../algebra.rst:40 ../../algebra.rst:56 1cd6dbc24bee4292af783f00b10193f8
#: 67b2c86ac824433a8a4f67606f5d1d3a
msgid "Result"
msgstr ""

#: ../../algebra.rst:42 d7ecc6c8753e478aaeb18e9d80d9f124
msgid "bool(OBJ)"
msgstr ""

#: ../../algebra.rst:42 82ed95910dae4ab2880a31277670d201
msgid "is false exactly if all components of OBJ are zero"
msgstr ""

#: ../../algebra.rst:43 5d04d3f792a541258921c969e4fd4013
msgid "abs(OBJ)"
msgstr ""

#: ../../algebra.rst:43 be27190f35bd43ac9953266759678142
msgid "the rectangle area -- equal to norm(OBJ) for the other types"
msgstr ""

#: ../../algebra.rst:44 79a7403d69504c62a9d2fe563ab0d3b5
msgid "norm(OBJ)"
msgstr ""

#: ../../algebra.rst:44 b5ec5a9e82b34ed2a234969e12b1c3ec
msgid "square root of the component squares (Euclidean norm)"
msgstr ""

#: ../../algebra.rst:45 68fe924f3e6a4129b4e876ab688a87b1
msgid "+OBJ"
msgstr ""

#: ../../algebra.rst:45 1cbbf43935cd4406bf5969060d147a74
msgid "new copy of OBJ"
msgstr ""

#: ../../algebra.rst:46 5eee675e01914d72b3a8aae745147df9
msgid "-OBJ"
msgstr ""

#: ../../algebra.rst:46 534d7082639e4877b47e4292b350ef4c
msgid "new copy of OBJ with negated components"
msgstr ""

#: ../../algebra.rst:47 bd2693aa6aa84f5c834bdcea7776366a
msgid "~m"
msgstr ""

#: ../../algebra.rst:47 ba7102093c0b47cdab7c219996e314bc
msgid "inverse of matrix \"m\", or the null matrix if not invertible"
msgstr ""

#: ../../algebra.rst:52 ccdc8e3d558144c2b9f54fb7b33debc5
msgid "Binary Operations"
msgstr ""

#: ../../algebra.rst:53 385c2d08bdf14335ae2a50528cf29f8d
msgid ""
"For every geometry object \"a\" and every number \"b\", the operations "
"\"a ° b\" and \"a °= b\" are always defined for the operators *+, -, *, "
"/*. The respective operation is simply executed for each component of "
"\"a\". If the **second operand is not a number**, then the following is "
"defined:"
msgstr ""

#: ../../algebra.rst:58 fc7ab3b4445b44f2a24094468b75f591
msgid "a+b, a-b"
msgstr ""

#: ../../algebra.rst:58 1dfd49bc780d4b05b1fd934bc35c52d1
msgid "component-wise execution, \"b\" must be \"a-like\"."
msgstr ""

#: ../../algebra.rst:59 20bf755d8f7a4a52b4e963e3723d629b
msgid "a*m, a/m"
msgstr ""

#: ../../algebra.rst:59 874894abe1404d07bef2a934733f59e0
msgid ""
"\"a\" can be a point, rectangle or matrix, but \"m\" must be "
":data:`matrix_like`. *\"a/m\"* is treated as *\"a*~m\"* (see note below "
"for non-invertible matrices). If \"a\" is a **point** or a **rectangle**,"
" then *\"a.transform(m)\"* is executed. If \"a\" is a matrix, then matrix"
" concatenation takes place."
msgstr ""

#: ../../algebra.rst:64 d4655a899c0242859c8156400cca311f
msgid "a&b"
msgstr ""

#: ../../algebra.rst:64 de275cd2e53a4ed1955340ef4c5fd538
msgid ""
"**intersection rectangle:** \"a\" must be a rectangle and \"b\" "
":data:`rect_like`. Delivers the **largest rectangle** contained in both "
"operands."
msgstr ""

#: ../../algebra.rst:67 49ad439978e7430f9ee87346e8f2b690
msgid "a|b"
msgstr ""

#: ../../algebra.rst:67 96c91fe2ea9741f4a3160762032fa53a
msgid ""
"**union rectangle:** \"a\" must be a rectangle, and \"b\" may be "
":data:`point_like` or :data:`rect_like`. Delivers the **smallest "
"rectangle** containing both operands."
msgstr ""

#: ../../algebra.rst:70 3a45cae998a14a458026775418b6d400
msgid "b in a"
msgstr ""

#: ../../algebra.rst:70 61b17d468f9b41ab90bd551e59e1f5cb
msgid ""
"if \"b\" is a number, then `b in tuple(a)` is returned. If \"b\" is "
":data:`point_like`, :data:`rect_like` or :data:`quad_like`, then \"a\" "
"must be a rectangle, and `a.contains(b)` is returned."
msgstr ""

#: ../../algebra.rst:73 b82a4b8b83f047ce998f43f5d1e4340a
msgid "a == b"
msgstr ""

#: ../../algebra.rst:73 be5f151fd91b4cd28dc1f9b9d9ab1752
msgid "*True* if *bool(a-b)* is *False* (\"b\" may be \"a-like\")."
msgstr ""

#: ../../algebra.rst:77 b6fc6540669146ed97ed098e5bb15b80
msgid "Please note an important difference to usual arithmetic:"
msgstr ""

#: ../../algebra.rst:79 41f57bc8d08c4ec390c19dcd19704b1c
msgid ""
"Matrix multiplication is **not commutative**, i.e. in general we have "
"`m*n != n*m` for two matrices. Also, there are non-zero matrices which "
"have no inverse, for example `m = Matrix(1, 0, 1, 0, 1, 0)`. If you try "
"to divide by any of these, you will receive a `ZeroDivisionError` "
"exception using operator *\"/\"*, e.g. for the expression `fitz.Identity "
"/ m`. But if you formulate `fitz.Identity * ~m`, the result will be "
"`fitz.Matrix()` (the null matrix)."
msgstr ""

#: ../../algebra.rst:81 ea4197f624cd47238dd31180607bc2f5
msgid ""
"Admittedly, this represents an inconsistency, and we are considering to "
"remove it. For the time being, you can choose to avoid an exception and "
"check whether ~m is the null matrix, or accept a potential "
"*ZeroDivisionError* by using `fitz.Identity / m`."
msgstr ""

#: ../../algebra.rst:85 c88496037d3a40d6a79ea60482edbb24
msgid ""
"With these conventions, all the usual algebra rules apply. For example, "
"arbitrarily using brackets **(among objects of the same class!)** is "
"possible: if r1, r2 are rectangles and m1, m2 are matrices, you can do "
"this `(r1 + r2) * m1 * m2`."
msgstr ""

#: ../../algebra.rst:86 ce43454509e2470189a1952ff6200561
msgid ""
"For all objects of the same class, `a + b + c == (a + b) + c == a + (b + "
"c)` is true."
msgstr ""

#: ../../algebra.rst:87 d6b539bd50e54b6ab1b4e5728ca9a095
msgid ""
"For matrices in addition the following is true: `(m1 + m2) * m3 == m1 * "
"m3 + m2 * m3` (distributivity property)."
msgstr ""

#: ../../algebra.rst:88 d08fc8a61bec442bafcbb7494c5cdfda
msgid ""
"**But the sequence of applying matrices is important:** If r is a "
"rectangle and m1, m2 are matrices, then -- **caution!:**"
msgstr ""

#: ../../algebra.rst:89 81239c6054704fecaa4465d63bcb887a
msgid "`r * m1 * m2 == (r * m1) * m2 != r * (m1 * m2)`"
msgstr ""

#: ../../algebra.rst:92 42c22a869f504aa3b7fb942af819765e
msgid "Some Examples"
msgstr ""

#: ../../algebra.rst:95 f48155d1acc74b988ab9ebbe51bb9851
msgid "Manipulation with numbers"
msgstr ""

#: ../../algebra.rst:96 2b21b674b941431485d39fbfc14deb0e
msgid ""
"For the usual arithmetic operations, numbers are always allowed as second"
" operand. In addition, you can formulate `\"x in OBJ\"`, where x is a "
"number. It is implemented as `\"x in tuple(OBJ)\"`::"
msgstr ""

#: ../../algebra.rst:104 1608ca09d98a487588bceef5cf093b4a
msgid ""
"The following will create the upper left quarter of a document page "
"rectangle::"
msgstr ""

#: ../../algebra.rst:112 82cb73867831475a87df289bcc6ee0fe
msgid ""
"The following will deliver the **middle point of a line** that connects "
"two points **p1** and **p2**::"
msgstr ""

#: ../../algebra.rst:122 877be437fc494609a539d6d5d2a17dc6
msgid "Manipulation with \"like\" Objects"
msgstr ""

#: ../../algebra.rst:124 5ceaf82fce7844cf8536efb47544998f
msgid ""
"The second operand of a binary operation can always be \"like\" the left "
"operand. \"Like\" in this context means \"a sequence of numbers of the "
"same length\". With the above examples::"
msgstr ""

#: ../../algebra.rst:135 53459cb98aca452e89039358d19c28fd
msgid "To shift a rectangle for 5 pixels to the right, do this::"
msgstr ""

#: ../../algebra.rst:141 b3bfe998139b49b8a484310679ca7c74
msgid ""
"Points, rectangles and matrices can be *transformed* with matrices. In "
"PyMuPDF, we treat this like a **\"multiplication\"** (or resp. "
"**\"division\"**), where the second operand may be \"like\" a matrix. "
"Division in this context means \"multiplication with the inverted "
"matrix\"::"
msgstr ""

#: ../../algebra.rst:181 a273f40f058d44a0a2f6401d9afa64f5
msgid "As a specialty, rectangles support additional binary operations:"
msgstr ""

#: ../../algebra.rst:183 ae804030722e4ec7974304bc85ac2947
msgid "**intersection** -- the common area of rectangle-likes, operator *\"&\"*"
msgstr ""

#: ../../algebra.rst:184 3391d52a100140259a984fa3683fecb0
msgid ""
"**inclusion** -- enlarge to include a point-like or rect-like, operator "
"*\"|\"*"
msgstr ""

#: ../../algebra.rst:185 455ab97641f54c089ef32ef57d12ebbd
msgid "**containment** check -- whether a point-like or rect-like is inside"
msgstr ""

#: ../../algebra.rst:187 06c181c1fc0848aeb8c4ad5a38900596
msgid ""
"Here is an example for creating the smallest rectangle enclosing given "
"points::"
msgstr ""

#: ../../footer.rst:-1 9ee55d59589e4caf9cf2c1a9039b8467
msgid "Discord logo"
msgstr ""

