# PyMuPDF Japanese documentation
# Copyright (C) 2015-2023, Artifex
# This file is distributed under the same license as the PyMuPDF package.
# Jamie Lemon <jamie.lemon@artifex.com>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyMuPDF 1.23.0rc1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-09-28 14:54+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Suzan Sanver <suzan.sanver@dijipiji.com>\n"
"Language: ja\n"
"Language-Team: ja <suzan.sanver@dijipiji.com>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../header.rst:-1
msgid "Artifex"
msgstr ""

#: ../../header.rst:-1
msgid "PyMuPDF is a high-performance Python library for data extraction, analysis, conversion & manipulation of PDF (and other) documents."
msgstr "PyMuPDF は、PDF （およびその他の）ドキュメントのデータ抽出、分析、変換、操作のための高性能な Python ライブラリです。"

#: ../../header.rst:-1
msgid "PDF Text Extraction, PDF Image Extraction, PDF Conversion, PDF Tables, PDF Splitting, PDF Creation, Pyodide, PyScript"
msgstr "PDFテキスト抽出、PDFイメージ抽出、PDF変換、PDFテーブル、PDF分割、PDF作成, Pyodide, PyScript"

#: ../../recipes-images.rst:7 d680d186e1fb49419c3b02d80f0c9050
msgid "Images"
msgstr "画像"

#: ../../recipes-images.rst:14 cd8d2986e0464a359b149533113f73bc
msgid "How to Make Images from Document Pages"
msgstr "ドキュメントページから画像を作成する方法"

#: ../../recipes-images.rst:16 d7278f0c6d684e5e9bc268c79b05a7f2
msgid ""
"This little script will take a document filename and generate a PNG file "
"from each of its pages."
msgstr "この小さなスクリプトは、文書のファイル名を取得し、各ページからPNGファイルを生成します。"

#: ../../recipes-images.rst:18 d03e038602f642d2b76efae5b393b3d2
msgid "The document can be any :ref:`supported type<Supported_File_Types>`."
msgstr "文書の種類は、:ref:`サポートされている <Supported_File_Types>` どんな形式でも構いません。"

#: ../../recipes-images.rst:20 6691d13f6ef2413bbec3790f5eafc953
msgid ""
"The script works as a command line tool which expects the filename being "
"supplied as a parameter. The generated image files (1 per page) are "
"stored in the directory of the script::"
msgstr "このスクリプトはコマンドラインツールとして動作し、ファイル名をパラメータとして指定することを期待しています。生成された画像ファイル（1ページごとに1つ）は、スクリプトが格納されているディレクトリに保存されます。::"

#: ../../recipes-images.rst:29 163ac269ddcc4a5a9829c1a8a799cacf
msgid ""
"The script directory will now contain PNG image files named *page-0.png*,"
" *page-1.png*, etc. Pictures have the dimension of their pages with width"
" and height rounded to integers, e.g. 595 x 842 pixels for an A4 portrait"
" sized page. They will have a resolution of 96 dpi in x and y dimension "
"and have no transparency. You can change all that -- for how to do this, "
"read the next sections."
msgstr ""
"スクリプトのディレクトリには、これから *page-0.png* 、 *page-1.png* "
"などという名前のPNG画像ファイルが含まれるようになります。画像は各ページの寸法に合わせて整数に丸められた幅と高さを持ちます。例えば、A4縦向きのページであれば595"
" x 842ピクセルとなります。これらの画像は水平方向と垂直方向の解像度が96 "
"dpiで、透明度はありません。これらの設定を変更することもできます。詳細については、次のセクションをお読みください。"

#: ../../recipes-images.rst:37 07cee6ab0aed49f1be77fe039bb382d3
msgid "How to Increase :index:`Image Resolution <pair: image; resolution>`"
msgstr "画像の解像度を上げる方法"

#: ../../recipes-images.rst:39 ef291a0536404704a0288314d4d417f1
msgid ""
"The image of a document page is represented by a :ref:`Pixmap`, and the "
"simplest way to create a pixmap is via method :meth:`Page.get_pixmap`."
msgstr ""
"文書ページの画像はPixmapによって表されます。 :ref:`Pixmap` を作成するもっとも簡単な方法は、メソッド "
":meth:`Page.get_pixmap` を使うことです。"

#: ../../recipes-images.rst:41 c8a0c80b7acf44c39cf9329dade3a91d
msgid ""
"This method has many options to influence the result. The most important "
"among them is the :ref:`Matrix`, which lets you :index:`zoom`, rotate, "
"distort or mirror the outcome."
msgstr "このメソッドには結果に影響を与える多くのオプションがあります。その中でも最も重要なのは行列（Matrix）であり、これによって結果を拡大、回転、歪ませる、または反転することができます。"

#: ../../recipes-images.rst:43 2e764eb04c254de6ba2dd4b0902eef6b
msgid ""
":meth:`Page.get_pixmap` by default will use the :ref:`Identity` matrix, "
"which does nothing."
msgstr ":meth:`Page.get_pixmap` はデフォルトで :ref:`Identity` 行列を使用しますが、これは何も行いません。"

#: ../../recipes-images.rst:45 83c6537beb1c4fe5bd26a32cde381944
msgid ""
"In the following, we apply a :index:`zoom factor <pair: resolution;zoom>`"
" of 2 to each dimension, which will generate an image with a four times "
"better resolution for us (and also about 4 times the size)::"
msgstr "以下では、各次元に2倍のズームを適用し、結果として解像度が4倍向上した画像を生成します（そしてサイズも約4倍になります）。::"

#: ../../recipes-images.rst:53 6287029baa33458a8cfd00d886aa0a24
msgid ""
"Since version 1.19.2 there is a more direct way to set the resolution: "
"Parameter `\"dpi\"` (dots per inch) can be used in place of `\"matrix\"`."
" To create a 300 dpi image of a page specify `pix = "
"page.get_pixmap(dpi=300)`. Apart from notation brevity, this approach has"
" the additional advantage that the **dpi value is saved with the image** "
"file -- which does not happen automatically when using the Matrix "
"notation."
msgstr ""
"バージョン1.19.2以降では、解像度を設定するより直接的な方法があります。 `\"dpi\"` （インチあたりのドット数）というパラメータを "
"`\"matrix\"` の代わりに使用することができます。ページの300 dpiの画像を作成するには、 `pix = "
"page.get_pixmap(dpi=300)` "
"と指定します。略記法の利便性に加えて、この方法の追加の利点は、dpiの値が画像ファイルとともに保存されることです。これはMatrixの記法を使用する場合に自動的に行われることはありません。"

#: ../../recipes-images.rst:61 c138259599d2454a9e7c0c28050411e7
msgid "How to Create :index:`Partial Pixmaps` (Clips)"
msgstr "部分的なPixmap（クリップ）の作成方法"

#: ../../recipes-images.rst:62 da4066486da647aa81dec345c114a660
msgid ""
"You do not always need or want the full image of a page. This is the case"
" e.g. when you display the image in a GUI and would like to fill the "
"respective window with a zoomed part of the page."
msgstr "常にページの完全な画像が必要なわけではありませんし、必要ともしない場合があります。例えば、GUIで画像を表示し、ページのズームされた部分でウィンドウを埋めたい場合などが該当します。"

#: ../../recipes-images.rst:64 1444abbe773c479c892fd298e5330f1a
msgid ""
"Let's assume your GUI window has room to display a full document page, "
"but you now want to fill this room with the bottom right quarter of your "
"page, thus using a four times better resolution."
msgstr "GUIウィンドウにフルの文書ページを表示するスペースがあると仮定しましょうが、現在はページの右下の四分の一でこのスペースを埋めたいとします。これにより、解像度が4倍向上します。"

#: ../../recipes-images.rst:66 d1486ed453f9412b8d294fafc528957b
msgid ""
"To achieve this, define a rectangle equal to the area you want to appear "
"in the GUI and call it \"clip\". One way of constructing rectangles in "
"PyMuPDF is by providing two diagonally opposite corners, which is what we"
" are doing here."
msgstr "これを実現するために、GUIに表示したい領域に等しい矩形を定義し、「クリップ」と呼びます。PyMuPDFでは、矩形を構築する方法の1つは、対角線上にある2つの角を指定することです。これがここで行っていることです。"

#: ../../recipes-images.rst:79 ed8ce4065c43403b9b20a4e7a4f3687a
msgid ""
"In the above we construct *clip* by specifying two diagonally opposite "
"points: the middle point *mp* of the page rectangle, and its bottom "
"right, *rect.br*."
msgstr ""
"上記では、 `clip` を構築するために、2つの対角線上の点を指定しています：ページ矩形の中心点である `mp` と、その右下の点である "
"`rect.br` です。"

#: ../../recipes-images.rst:87 fed3d70d372b4a23a030acc293daec6a
msgid "How to Zoom a Clip to a GUI Window"
msgstr "GUIウィンドウにクリップをズームする方法"

#: ../../recipes-images.rst:88 936514c927894e8592dec3565f838844
msgid ""
"Please also read the previous section. This time we want to **compute the"
" zoom factor** for a clip, such that its image best fits a given GUI "
"window. This means, that the image's width or height (or both) will equal"
" the window dimension. For the following code snippet you need to provide"
" the WIDTH and HEIGHT of your GUI's window that should receive the page's"
" clip rectangle."
msgstr "前のセクションもお読みください。今回は、クリップのズームファクターを計算して、その画像が指定されたGUIウィンドウに最適にフィットするようにします。つまり、画像の幅または高さ（または両方）がウィンドウの寸法と等しくなります。次のコードスニペットでは、GUIウィンドウのWIDTHとHEIGHTを提供する必要があります。それらはページのクリップ矩形を受け取る必要があります。"

#: ../../recipes-images.rst:105 9862699ee9c741f0a73f7d6c704d418e
msgid ""
"For the other way round, now assume you **have** the zoom factor and need"
" to **compute the fitting clip**."
msgstr "逆の場合は、ズームファクターがあると仮定し、フィッティングクリップを計算する必要があります。"

#: ../../recipes-images.rst:107 bf39b6ecad64453ab8dce5407df15cee
msgid ""
"In this case we have `zoom = HEIGHT/clip.height = WIDTH/clip.width`, so "
"we must set `clip.height = HEIGHT/zoom` and, `clip.width = WIDTH/zoom`. "
"Choose the top-left point `tl` of the clip on the page to compute the "
"right pixmap::"
msgstr ""
"この場合、 `zoom = HEIGHT/clip.height = WIDTH/clip.width`  となるので、 `clip.height"
" = HEIGHT/zoom`  および  `clip.width = WIDTH/zoom`  "
"と設定する必要があります。クリップ内のページ上の左上の点 tl を選択して、適切なピクマップを計算します。"

#: ../../recipes-images.rst:124 a86bee99ebee4234b9aa099683d111b6
msgid "How to Create or Suppress Annotation Images"
msgstr "注釈画像の作成または抑制方法"

#: ../../recipes-images.rst:125 4b02e04e22df406681c3ecb13edf484d
msgid ""
"Normally, the pixmap of a page also shows the page's annotations. "
"Occasionally, this may not be desirable."
msgstr "通常、ページのピクマップにはページの注釈も表示されます。しかし、時にはこれが望ましくない場合があります。"

#: ../../recipes-images.rst:127 372ec888a18048eca1473ff01092324e
msgid ""
"To suppress the annotation images on a rendered page, just specify "
"`annots=False` in :meth:`Page.get_pixmap`."
msgstr "描画されたページから注釈画像を抑制するには、 :meth:`Page.get_pixmap` で  `annots=False` を指定します。"

#: ../../recipes-images.rst:129 1fb5f9e70d254979867c857e3f5ef25b
msgid ""
"You can also render annotations separately: they have their own "
":meth:`Annot.get_pixmap` method. The resulting pixmap has the same "
"dimensions as the annotation rectangle."
msgstr ""
"注釈を個別にレンダリングすることもできます。注釈には独自の :meth:`Annot.get_pixmap` "
"メソッドがあります。結果のピクマップは注釈の矩形と同じ寸法です。"

#: ../../recipes-images.rst:141 a3726a20542041c1aa053941cc2374f3
msgid "How to Extract Images: Non-PDF Documents"
msgstr "画像の抽出方法：非PDFドキュメント"

#: ../../recipes-images.rst:143 8f36f5ab8b0f476091c6a88652eec66c
msgid ""
"In contrast to the previous sections, this section deals with "
"**extracting** images **contained** in documents, so they can be "
"displayed as part of one or more pages."
msgstr "前のセクションとは対照的に、このセクションではドキュメントに含まれる画像の抽出に取り組みます。これにより、これらの画像を1つ以上のページの一部として表示することができます。"

#: ../../recipes-images.rst:145 0a04779e13f84501b88d6d1dde3ee3f5
msgid ""
"If you want to recreate the original image in file form or as a memory "
"area, you have basically two options:"
msgstr "元の画像をファイル形式またはメモリ領域として再作成したい場合、基本的に2つのオプションがあります："

#: ../../recipes-images.rst:147 dc12358e80884436928ac95b3908a476
msgid ""
"Convert your document to a PDF, and then use one of the PDF-only "
"extraction methods. This snippet will convert a document to PDF::"
msgstr "ドキュメントをPDFに変換し、その後PDF専用の抽出方法のいずれかを使用します。以下のスニペットはドキュメントをPDFに変換します::"

#: ../../recipes-images.rst:153 88d9ebd296a04153b05fb6977d5a29e9
msgid ""
"Use :meth:`Page.get_text` with the \"dict\" parameter. This works for all"
" document types. It will extract all text and images shown on the page, "
"formatted as a Python dictionary. Every image will occur in an image "
"block, containing meta information and **the binary image data**. For "
"details of the dictionary's structure, see :ref:`TextPage`. The method "
"works equally well for PDF files. This creates a list of all images shown"
" on a page::"
msgstr ""
"「dict」パラメータを使って :meth:`Page.get_text` "
"を使用します。これはすべてのドキュメントタイプに対して機能します。これにより、ページに表示されているすべてのテキストと画像がPythonの辞書としてフォーマットされて抽出されます。各画像は、メタ情報とバイナリ画像データを含む画像ブロックに含まれます。辞書の構造の詳細については、"
" :ref:`TextPage` "
"を参照してください。この方法はPDFファイルにも同じくうまく機能します。これにより、ページに表示されているすべての画像のリストが作成されます::"

#: ../../recipes-images.rst:182 84b4377ce8b84c9eb01c6b4f689a0a6d
msgid "How to Extract Images: PDF Documents"
msgstr "画像の抽出方法：PDFドキュメント"

#: ../../recipes-images.rst:184 bbdc36823bb441dfbd0c28fe3192c761
msgid ""
"Like any other \"object\" in a PDF, images are identified by a cross "
"reference number (:data:`xref`, an integer). If you know this number, you"
" have two ways to access the image's data:"
msgstr ""
"PDF内の他のオブジェクトと同様に、画像は交差参照番号（ :data:`xref` "
"、整数）によって識別されます。この番号を知っていれば、画像のデータにアクセスする方法が2つあります："

#: ../../recipes-images.rst:186 165e362759f74d8f97874fefe5dbc115
msgid ""
"**Create** a :ref:`Pixmap` of the image with instruction *pix = "
"fitz.Pixmap(doc, xref)*. This method is **very** fast (single digit "
"micro-seconds). The pixmap's properties (width, height, ...) will reflect"
" the ones of the image. In this case there is no way to tell which image "
"format the embedded original has."
msgstr ""
"**画像の** :ref:`Pixmap` を作成します。指示： `pix = fitz.Pixmap(doc, xref)` "
"。この方法は非常に高速です（単桁のマイクロ秒）。 :ref:`Pixmap` "
"のプロパティ（幅、高さなど）は、画像のものと同じになります。この場合、埋め込まれたオリジナルの画像形式を判別する方法はありません。"

#: ../../recipes-images.rst:188 bd4733596ee84c72a0ab21363d4e2e03
msgid ""
"**Extract** the image with *img = doc.extract_image(xref)*. This is a "
"dictionary containing the binary image data as *img[\"image\"]*. A number"
" of meta data are also provided -- mostly the same as you would find in "
"the pixmap of the image. The major difference is string *img[\"ext\"]*, "
"which specifies the image format: apart from \"png\", strings like "
"\"jpeg\", \"bmp\", \"tiff\", etc. can also occur. Use this string as the "
"file extension if you want to store to disk. The execution speed of this "
"method should be compared to the combined speed of the statements *pix = "
"fitz.Pixmap(doc, xref);pix.tobytes()*. If the embedded image is in PNG "
"format, the speed of :meth:`Document.extract_image` is about the same "
"(and the binary image data are identical). Otherwise, this method is "
"**thousands of times faster**, and the **image data is much smaller**."
msgstr ""
"**画像を抽出します。指示**： `img = doc.extract_image(xref)` "
"。これはバイナリ画像データを含む辞書です。多くのメタデータも提供されますが、主に画像の :ref:`Pixmap` "
"で見つけることができるものとほぼ同じです。主な違いは、文字列 img[\"ext\"] であり、画像形式を指定します。\"png\" 以外にも "
"\"jpeg\" 、 \"bmp\"、 \"tiff\" "
"などの文字列が出現することがあります。ディスクに保存する場合は、この文字列をファイル拡張子として使用します。このメソッドの実行速度は、以下のステートメントの組み合わせ速度"
" `pix = fitz.Pixmap(doc, xref);pix.tobytes()` "
"と比較する必要があります。埋め込まれた画像がPNG形式の場合、 :meth:`Document.extract_image` "
"の速度はほぼ同じで（バイナリ画像データも同じです）、それ以外の場合は、このメソッドは数千倍高速であり、画像データも小さくなります"

#: ../../recipes-images.rst:190 fe4223246a4746608c92017e8356153c
msgid ""
"The question remains: **\"How do I know those 'xref' numbers of "
"images?\"**. There are two answers to this:"
msgstr "**「どのようにして画像の'xref'番号を知るのか？」** これには2つの答えがあります："

#: ../../recipes-images.rst:192 cc768dbd7fde437d9dd0f841935d068d
msgid ""
"**\"Inspect the page objects:\"** Loop through the items of "
":meth:`Page.get_images`. It is a list of list, and its items look like "
"*[xref, smask, ...]*, containing the :data:`xref` of an image. This "
":data:`xref` can then be used with one of the above methods. Use this "
"method for **valid (undamaged)** documents. Be wary however, that the "
"same image may be referenced multiple times (by different pages), so you "
"might want to provide a mechanism avoiding multiple extracts."
msgstr ""
"**「ページオブジェクトを検査する」** ： :meth:`Page.get_images` "
"の項目をループ処理します。これはリストのリストであり、項目は `[xref、smask、...]` のようになっており、画像の "
":data:`xref` を含んでいます。この :data:`xref` "
"を上記の方法の1つで使用できます。これは有効（損傷していない）なドキュメントに使用しますが、同じ画像が複数回（異なるページで）参照されることがあるため、複数回の抽出を避けるメカニズムを提供することが望ましいかもしれません。"

#: ../../recipes-images.rst:193 050ec7fba75345e2baf8dd422a2d0e7d
msgid ""
"**\"No need to know:\"** Loop through the list of **all xrefs** of the "
"document and perform a :meth:`Document.extract_image` for each one. If "
"the returned dictionary is empty, then continue -- this :data:`xref` is "
"no image. Use this method if the PDF is **damaged (unusable pages)**. "
"Note that a PDF often contains \"pseudo-images\" (\"stencil masks\") with"
" the special purpose of defining the transparency of some other image. "
"You may want to provide logic to exclude those from extraction. Also have"
" a look at the next section."
msgstr ""
"**「知る必要はありません」**：ドキュメントのすべての :data:`xref` のリストをループ処理し、各 :data:`xref` に対して"
" :meth:`Document.extract_image` を実行します。返される辞書が空であれば、続けて次の :data:`xref` "
"を処理します。この :data:`xref` "
"は画像ではありません。これはPDFが損傷している（使用できないページがある）場合に使用します。PDFにはしばしば他の画像の透明度を定義する特別な目的の「擬似画像」（ステンシルマスク）が含まれていることに注意してください。これらを抽出から除外するためのロジックを提供することがあるかもしれません。次のセクションも参照してください。"

#: ../../recipes-images.rst:195 1a6af758ac4c412287f8975f2dbd1659
msgid ""
"For both extraction approaches, there exist ready-to-use general purpose "
"scripts:"
msgstr "これらの抽出方法の両方に対して、一般的な用途のスクリプトが存在します。"

#: ../../recipes-images.rst:197 ae7a6ed566c846eb847194d6b4628f20
msgid ""
"`extract-from-pages.py <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/extract-images/extract-from-pages.py>`_ "
"extracts images page by page:"
msgstr ""
"`extract-from-pages.py <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/extract-images/extract-from-pages.py>`_  "
"はページごとに画像を抽出します。"

#: ../../recipes-images.rst:202 8de191df3a8a426a8e42902c67035d6b
msgid ""
"and `extract-from-xref.py <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/extract-images/extract-from-xref.py>`_ "
"extracts images by xref table:"
msgstr ""
"`extract-from-xref.py <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/extract-images/extract-from-xref.py>`_  "
"はxrefテーブルによって画像を抽出します。"

#: ../../recipes-images.rst:213 2241945cde7141b2926e0b21c36ba921
msgid "How to Handle Image Masks"
msgstr "画像マスクの処理方法"

#: ../../recipes-images.rst:214 1e7f01eedb854c3bb1a7454f5546e8ec
msgid ""
"Some images in PDFs are accompanied by **image masks**. In their simplest"
" form, masks represent alpha (transparency) bytes stored as separate "
"images. In order to reconstruct the original of an image, which has a "
"mask, it must be \"enriched\" with transparency bytes taken from its "
"mask."
msgstr "PDF内の一部の画像には画像マスクが付属しています。最も単純な形式では、マスクは別の画像として格納されたアルファ（透明度）バイトを表します。画像の元の形を復元するには、そのマスクから取得した透明度バイトを使用して画像を「補完」する必要があります。"

#: ../../recipes-images.rst:216 f3d159147d5f429db4c50a9fc0cfe8ee
msgid ""
"Whether an image does have such a mask can be recognized in one of two "
"ways in PyMuPDF:"
msgstr "PyMuPDFでは、画像にそのようなマスクがあるかどうかは次の2つの方法で認識できます："

#: ../../recipes-images.rst:218 5d3e2656d8fb42399a5298dbb02dece6
msgid ""
"An item of :meth:`Document.get_page_images` has the general format "
"`(xref, smask, ...)`, where *xref* is the image's :data:`xref` and "
"*smask*, if positive, then it is the :data:`xref` of a mask."
msgstr ""
":meth:`Document.get_page_images` の項目は一般的な形式 `（xref、smask、...）` "
"を持ちます。ここで、xrefは画像の :data:`xref` であり、 「smask」 が正の場合、それはマスクの :data:`xref` "
"です。"

#: ../../recipes-images.rst:219 08c89661af534caa8548f819a7df2245
msgid ""
"The (dictionary) results of :meth:`Document.extract_image` have a key "
"*\"smask\"*, which also contains any mask's :data:`xref` if positive."
msgstr ""
":meth:`Document.extract_image` の結果（辞書）には、キー「smask」があります。このキーには、マスクの "
":data:`xref` が含まれています。"

#: ../../recipes-images.rst:221 374412cc50f844fd9f728f183acc0fc3
msgid ""
"If *smask == 0* then the image encountered via :data:`xref` can be "
"processed as it is."
msgstr "`smask == 0` の場合、 :data:`xref` を介して遭遇した画像はそのまま処理できます。"

#: ../../recipes-images.rst:223 e22aafa4157546f1a113c9bee44f8ecf
msgid ""
"To recover the original image using PyMuPDF, the procedure depicted as "
"follows must be executed:"
msgstr "PyMuPDFを使用して元の画像を復元するためには、以下に示す手順を実行する必要があります："

#: ../../recipes-images.rst:232 cfeabfb0c9494288b1d48e028fad5be9
msgid ""
"Step (1) creates a pixmap of the basic image. Step (2) does the same with"
" the image mask. Step (3) adds an alpha channel and fills it with "
"transparency information."
msgstr "ステップ（1）では、基本画像のピクマップを作成します。ステップ（2）では、同じことを画像マスクで行います。ステップ（3）では、アルファチャンネルを追加し、透明情報で埋めます。"

#: ../../recipes-images.rst:234 0465e6eba6b1489882b11f765d9cc2fe
msgid ""
"The scripts `extract-from-pages.py <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/extract-images/extract-from-pages.py>`_, "
"and `extract-from-xref.py <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/extract-images/extract-from-xref.py>`_ "
"above also contain this logic."
msgstr ""
"また、上記の `extract-from-pages.py <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/extract-images/extract-from-pages.py>`_ "
"および `extract-from-xref.py <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/extract-images/extract-from-xref.py>`_  "
"というスクリプトにもこのロジックが含まれています。"

#: ../../recipes-images.rst:250 edc3938f74d943169adcfce9e59c33a4
msgid "How to Make one PDF of all your Pictures (or Files)"
msgstr "すべての写真（またはファイル）を1つのPDFにする方法"

#: ../../recipes-images.rst:251 13250b22313447a49378eaa921fa257d
msgid ""
"We show here **three scripts** that take a list of (image and other) "
"files and put them all in one PDF."
msgstr "以下に、（画像およびその他の）ファイルのリストを受け取り、それらをすべて1つのPDFに結合する3つのスクリプトを示します。"

#: ../../recipes-images.rst:253 8db51dc53f2f486bbb5af211dcde0f75
msgid "**Method 1: Inserting Images as Pages**"
msgstr "**方法1：画像をページとして挿入する方法**"

#: ../../recipes-images.rst:255 04cf7f72b9444c11a2e1fa7676a5c764
msgid ""
"The first one converts each image to a PDF page with the same dimensions."
" The result will be a PDF with one page per image. It will only work for "
":ref:`supported image<Supported_File_Types>` file formats::"
msgstr ""
"最初の方法では、各画像を同じ寸法のPDFページに変換します。結果は、1つの画像に1ページのPDFとなります。ただし、 "
":ref:`サポートされている <Supported_File_Types>` 画像ファイル形式のみで動作します。::"

#: ../../recipes-images.rst:278 6c7845d1b4374729a698450a0e24c405
msgid ""
"This will generate a PDF only marginally larger than the combined "
"pictures' size. Some numbers on performance:"
msgstr "これにより、結合された画像のサイズとほとんど変わらないPDFが生成されます。パフォーマンスに関するいくつかの数値："

#: ../../recipes-images.rst:280 09ef134fc0a84ded8f963c3d53cc1262
msgid ""
"The above script needed about 1 minute on my machine for 149 pictures "
"with a total size of 514 MB (and about the same resulting PDF size)."
msgstr "上記のスクリプトは、149枚の画像で合計サイズが514 MBの場合、私のマシン上で約1分かかりました（生成されたPDFのサイズもほぼ同じです）。"

#: ../../recipes-images.rst:285 4f3d72e2427a489f9e0a9d3d2a3ae912
msgid ""
"Look `here <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/insert-images/insert.py>`_ for a more "
"complete source code: it offers a directory selection dialog and skips "
"unsupported files and non-file entries."
msgstr ""
"より完全なソースコードは `こちら <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/insert-images/insert.py>`_ "
"をご覧ください：ディレクトリ選択ダイアログを提供し、サポートされていないファイルやファイルでないエントリをスキップします。"

#: ../../recipes-images.rst:287 be8ecfd7af974ca684eb5403a6e693b7
msgid ""
"We might have used :meth:`Page.insert_image` instead of "
":meth:`Page.show_pdf_page`, and the result would have been a similar "
"looking file. However, depending on the image type, it may store **images"
" uncompressed**. Therefore, the save option *deflate = True* must be used"
" to achieve a reasonable file size, which hugely increases the runtime "
"for large numbers of images. So this alternative **cannot be "
"recommended** here."
msgstr ""
":meth:`Page.insert_image` の代わりに :meth:`Page.show_pdf_page` "
"を使用することもできましたが、結果として似たような外観のファイルになります。ただし、画像の種類によっては、非圧縮で画像を保存する場合があります。そのため、適切なファイルサイズを得るためには、保存オプションとして"
" `deflate = True` "
"を使用する必要がありますが、これにより大量の画像の場合、実行時間が大幅に増加します。そのため、この代替方法はお勧めできません。"

#: ../../recipes-images.rst:289 919f48f71ab74619a91f1eeaaf262290
msgid "**Method 2: Embedding Files**"
msgstr "**方法2：ファイルの埋め込み**"

#: ../../recipes-images.rst:291 12a8a2dda35f4978b5aec689b1314d38
msgid ""
"The second script **embeds** arbitrary files -- not only images. The "
"resulting PDF will have just one (empty) page, required for technical "
"reasons. To later access the embedded files again, you would need a "
"suitable PDF viewer that can display and / or extract embedded files::"
msgstr "2つ目のスクリプトは、画像だけでなく、任意のファイルを埋め込みます。技術的な理由で必要なので、結果として得られるPDFには1つだけ（空の）ページがあります。埋め込まれたファイルに後でアクセスするためには、埋め込まれたファイルを表示または抽出できる適切なPDFビューアが必要です::"

#: ../../recipes-images.rst:316 16e83b9f78a84d6885f54a3a0276368f
msgid ""
"This is by far the fastest method, and it also produces the smallest "
"possible output file size. The above pictures needed 20 seconds on my "
"machine and yielded a PDF size of 510 MB. Look `here "
"<https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples/embed-"
"images/embed.py>`_ for a more complete source code: it offers a directory"
" selection dialog and skips non-file entries."
msgstr ""
"これは断然最も高速な方法であり、可能な限り最小の出力ファイルサイズを生成します。上記の画像は私のマシンで20秒かかり、PDFのサイズは510 "
"MBになりました。より完全なソースコードは `こちら <https://github.com/pymupdf/PyMuPDF-"
"Utilities/tree/master/examples/embed-images/embed.py>`_  "
"をご覧ください：ディレクトリ選択ダイアログを提供し、ファイルでないエントリをスキップします。"

#: ../../recipes-images.rst:318 a742e991f6874bac88551a9d9f615c4a
msgid "**Method 3: Attaching Files**"
msgstr "**方法3：ファイルの添付**"

#: ../../recipes-images.rst:320 5c1f491e07f44f7daef6b2fda2cb298d
msgid ""
"A third way to achieve this task is **attaching files** via page "
"annotations see `here <https://github.com/pymupdf/PyMuPDF-"
"Utilities/blob/master/examples/attach-images/attach.py>`_ for the "
"complete source code."
msgstr ""
"このタスクを達成する第3の方法は、ページの注釈を介してファイルを添付する方法です。完全なソースコードについては `こちら "
"<https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples"
"/attach-images/attach.py>`_ をご覧ください。"

#: ../../recipes-images.rst:322 9074aa4cfc944772a069149f6639a97c
msgid ""
"This has a similar performance as the previous script and it also "
"produces a similar file size. It will produce PDF pages which show a "
"'FileAttachment' icon for each attached file."
msgstr "これは前のスクリプトと同様のパフォーマンスを持ち、似たようなファイルサイズも生成します。それぞれの添付ファイルに対して「FileAttachment」アイコンが表示されるPDFページを生成します。"

#: ../../recipes-images.rst:326 8a178b1889d14b25b402f6cfe5fab358
msgid ""
"Both, the **embed** and the **attach** methods can be used for "
"**arbitrary files** -- not just images."
msgstr "埋め込みと添付の両方の方法は、画像だけでなく任意のファイルにも使用できます。"

#: ../../recipes-images.rst:328 df521dd605704bd6a5b9d57c542d1775
msgid ""
"We strongly recommend using the awesome package `PySimpleGUI "
"<https://pypi.org/project/PySimpleGUI/>`_ to display a progress meter for"
" tasks that may run for an extended time span. It's pure Python, uses "
"Tkinter (no additional GUI package) and requires just one more line of "
"code!"
msgstr ""
"長時間にわたるタスクに対して進捗メーターを表示するために、素晴らしいパッケージ `PySimpleGUI "
"<https://pypi.org/project/PySimpleGUI/>`_  "
"の使用を強くお勧めします。これは純粋なPythonであり、Tkinter（追加のGUIパッケージは不要）を使用し、たった1行のコードを追加するだけで使えます！"

#: ../../recipes-images.rst:342 e6e2f25f49bc4926b7eea9c7afd10f26
msgid "How to Create Vector Images"
msgstr "ベクター画像の作成方法"

#: ../../recipes-images.rst:343 ede407b0351e42ed9b7870619d05bc62
msgid ""
"The usual way to create an image from a document page is "
":meth:`Page.get_pixmap`. A pixmap represents a raster image, so you must "
"decide on its quality (i.e. resolution) at creation time. It cannot be "
"changed later."
msgstr ""
"ドキュメントページから画像を作成する通常の方法は、 :meth:`Page.get_pixmap` "
"を使用することです。ピクマップはラスター画像を表しますので、作成時にその品質（つまり解像度）を決定する必要があります。後から変更することはできません。"

#: ../../recipes-images.rst:345 b9376743b3b3483c8cb774eff1e5a8b0
msgid ""
"PyMuPDF also offers a way to create a **vector image** of a page in SVG "
"format (scalable vector graphics, defined in XML syntax). SVG images "
"remain precise across zooming levels (of course with the exception of any"
" raster graphic elements embedded therein)."
msgstr "PyMuPDFはまた、SVG形式（XML構文で定義されたスケーラブルベクターグラフィックス）でページのベクター画像を作成する方法を提供しています。SVG画像はズームレベルで正確性を保持します（もちろん、埋め込まれたラスターグラフィックス要素を除く）。"

#: ../../recipes-images.rst:347 8fe0084895b845dd8319ff6db773419b
msgid ""
"Instruction *svg = page.get_svg_image(matrix=fitz.Identity)* delivers a "
"UTF-8 string *svg* which can be stored with extension \".svg\"."
msgstr ""
"指示  `svg = page.get_svg_image(matrix=fitz.Identity)`  はUTF-8文字列 *svg* "
"を提供します。これは  \".svg\" の拡張子で保存できます。"

#: ../../recipes-images.rst:363 43f0f5c1bbd84273af63da59948664a1
msgid "How to Convert Images"
msgstr "画像の変換方法"

#: ../../recipes-images.rst:364 31d659ff94d649ad97ea04915be513f9
msgid ""
"Just as a feature among others, PyMuPDF's image conversion is easy. It "
"may avoid using other graphics packages like PIL/Pillow in many cases."
msgstr "PyMuPDFの画像変換も他の機能と同様に簡単です。多くの場合、PIL/Pillowなどの他のグラフィックスパッケージを使用する必要がないかもしれません。"

#: ../../recipes-images.rst:366 8619cfba817445a8ae46b9161c7637d0
msgid "Notwithstanding that interfacing with Pillow is almost trivial."
msgstr "ただし、Pillowとの連携はほとんど自明です。"

#: ../../recipes-images.rst:369 5d677214843a45db9059c19ad3b18edb
msgid "**Input Formats**"
msgstr "**入力フォーマット**"

#: ../../recipes-images.rst:369 da9a707c5de643b08ea72a936044dc5c
msgid "**Output Formats**"
msgstr "**出力フォーマット**"

#: ../../recipes-images.rst:369 3da559e3272e4e14a023dc2dadddea49
msgid "**Description**"
msgstr "**説明**"

#: ../../recipes-images.rst:371 68c596d9935a4c3f9bfd1915c4dc63b6
msgid "BMP"
msgstr ""

#: ../../recipes-images.rst:371 ../../recipes-images.rst:373
#: ../../recipes-images.rst:374 ../../recipes-images.rst:375
#: ../../recipes-images.rst:376 ../../recipes-images.rst:383
#: ../../recipes-images.rst:384 26c2bb2af1a04922b22c63b6a7110092
#: 582a341ef769440e8a572c2992933f89 7280a1809ee74a598665fc9417bff28d
#: 8e7987dac3584fd789d3379a2cdfd3c8 9d911429c33d4a13bc4ff25c6d01ddd5
#: d49dc87a72b545e6b33ea2280762c63d fe6dd749add142149deb525afdbb25bf
msgid "."
msgstr ""

#: ../../recipes-images.rst:371 636666c5ca874ef493aefcf69f143534
msgid "Windows Bitmap"
msgstr ""

#: ../../recipes-images.rst:372 bef01b55053c445cbd71a8ce149ad8d9
#: f3d521b3cd344873874a377dd48ab3ba
msgid "JPEG"
msgstr ""

#: ../../recipes-images.rst:372 bd1a18e1497a414c9f90538b374845a7
msgid "Joint Photographic Experts Group"
msgstr ""

#: ../../recipes-images.rst:373 9b47775eb5c3441884c620e671e7890b
msgid "JXR"
msgstr ""

#: ../../recipes-images.rst:373 79c34c211f1343378598e11c6ca18a59
msgid "JPEG Extended Range"
msgstr ""

#: ../../recipes-images.rst:374 6071493a5bd54801828d27559a83e1f9
msgid "JPX/JP2"
msgstr ""

#: ../../recipes-images.rst:374 ed05635948d74f5e9b4a1200a1b55a61
msgid "JPEG 2000"
msgstr ""

#: ../../recipes-images.rst:375 00b71aa6a89941a38dffe8adda951390
msgid "GIF"
msgstr ""

#: ../../recipes-images.rst:375 28045997b47b47bc879433409964ef3e
msgid "Graphics Interchange Format"
msgstr ""

#: ../../recipes-images.rst:376 5309b8cee9c745b8a54ac0cd0a139f1d
msgid "TIFF"
msgstr ""

#: ../../recipes-images.rst:376 81f01fd2481c4c6694db03dc2b3c1ced
msgid "Tagged Image File Format"
msgstr ""

#: ../../recipes-images.rst:377 0de4a86c2276459e87d8f2e3f93803f2
#: b7151a0adb4146b0a50d4a37d5097b97
msgid "PNG"
msgstr ""

#: ../../recipes-images.rst:377 a726b5a567fd4447b2988b8ec221c438
msgid "Portable Network Graphics"
msgstr ""

#: ../../recipes-images.rst:378 16867f3d0c6b4919acc7178d8e32b1f6
#: 2ae6a10c177c4a58b4d477591b0ea992
msgid "PNM"
msgstr ""

#: ../../recipes-images.rst:378 504fc0323f064891b208b1e1af8d4768
msgid "Portable Anymap"
msgstr ""

#: ../../recipes-images.rst:379 711c6d1d25804c4ab71773bcee4dd939
#: d0b8de44789e445fb31e9af83cfedabd
msgid "PGM"
msgstr ""

#: ../../recipes-images.rst:379 29d63be370a94cf6839039f33b9ed271
msgid "Portable Graymap"
msgstr ""

#: ../../recipes-images.rst:380 4ad91a5ed1a44ab899b5df7489134441
#: 8df6268a54574ba2a0849c0558d335c4
msgid "PBM"
msgstr ""

#: ../../recipes-images.rst:380 5964b30bee59478cba58e038cc0bd611
msgid "Portable Bitmap"
msgstr ""

#: ../../recipes-images.rst:381 4adf654384dd4e3daa2f489d46d36238
#: 9d71bc96e29246159e7952f645163064
msgid "PPM"
msgstr ""

#: ../../recipes-images.rst:381 040bc45e328e40b39027aee6e5b77514
msgid "Portable Pixmap"
msgstr ""

#: ../../recipes-images.rst:382 5f5104363075418da1397ca0e05a2856
#: 6e499b7ece3046eda6980b21a99a1772
msgid "PAM"
msgstr ""

#: ../../recipes-images.rst:382 55958b05cc0f478d8bcbc0503c1e2e53
msgid "Portable Arbitrary Map"
msgstr ""

#: ../../recipes-images.rst:383 5a8ba4618c714ae8bc04c58b5d91bfb4
msgid "PSD"
msgstr ""

#: ../../recipes-images.rst:383 9f987ea6d9bb41c4a6a0b582d798a778
msgid "Adobe Photoshop Document"
msgstr ""

#: ../../recipes-images.rst:384 c9d17a059b114644acdce5ccdd8732dc
msgid "PS"
msgstr ""

#: ../../recipes-images.rst:384 737d014cb1614230ac99bcdebbc2f8f9
msgid "Adobe Postscript"
msgstr ""

#: ../../recipes-images.rst:387 ac6bc5f285744395a8e15b07125cc56b
msgid "The general scheme is just the following two lines::"
msgstr "一般的なスキームは以下の2行です::"

#: ../../recipes-images.rst:392 47937bb6965140568418f48736c48598
msgid "**Remarks**"
msgstr "**コメント**"

#: ../../recipes-images.rst:394 a825411feada4417bb7ddaa1b95462e7
msgid ""
"The **input** argument of *fitz.Pixmap(arg)* can be a file or a bytes / "
"io.BytesIO object containing an image."
msgstr "`fitz.Pixmap(arg)` の入力引数は、画像を含むファイルまたはbytes/io.BytesIOオブジェクトを指定できます。"

#: ../../recipes-images.rst:395 6556487db18f4b64a894fd6395b260ce
msgid ""
"Instead of an output **file**, you can also create a bytes object via "
"*pix.tobytes(\"yyy\")* and pass this around."
msgstr "出力ファイルの代わりに、 `pix.tobytes(\"yyy\")` を使用してbytesオブジェクトを作成し、それを渡すこともできます。"

#: ../../recipes-images.rst:396 ef9569bd6eb1487f9292203438d8f573
msgid ""
"As a matter of course, input and output formats must be compatible in "
"terms of colorspace and transparency. The *Pixmap* class has batteries "
"included if adjustments are needed."
msgstr ""
"もちろん、入力と出力のフォーマットは、色空間と透過性の面で互換性が必要です。 :ref:`Pixmap` "
"クラスには、必要に応じて調整を行うための組み込みの機能が備わっています。"

#: ../../recipes-images.rst:399 fbc8088d01074d24aee2f9701622ef9e
msgid "**Convert JPEG to Photoshop**::"
msgstr "**JPEGをPhotoshopに変換する**::"

#: ../../recipes-images.rst:405 b66ec4a6e54d4d49be858a5313b34666
msgid ""
"Convert **JPEG to Tkinter PhotoImage**. Any **RGB / no-alpha** image "
"works exactly the same. Conversion to one of the **Portable Anymap** "
"formats (PPM, PGM, etc.) does the trick, because they are supported by "
"all Tkinter versions::"
msgstr "アルファ付きのPNGをTkinterのPhotoImageに変換してください。これには、PPMへの変換を行う前にアルファバイトを削除する必要があります。"

#: ../../recipes-images.rst:412 ef004587eda240b4ae171046e26a50dc
msgid ""
"Convert **PNG with alpha** to Tkinter PhotoImage. This requires "
"**removing the alpha bytes**, before we can do the PPM conversion::"
msgstr "アルファ付きのPNGをTkinterのPhotoImageに変換します。このためには、PPMへの変換を行う前にアルファバイトを取り除く必要があります。"

#: ../../recipes-images.rst:429 8a9cc19f6c014da0963228e38371b4ae
msgid "How to Use Pixmaps: Gluing Images"
msgstr "ピクスマップの使用方法：画像の結合"

#: ../../recipes-images.rst:431 6faa8ffb31a8407e86ca4844f44e9a59
msgid ""
"This shows how pixmaps can be used for purely graphical, non-document "
"purposes. The script reads an image file and creates a new image which "
"consist of 3 * 4 tiles of the original::"
msgstr ""
"これは、ピクスマップを純粋にグラフィカルで、文書ではない目的で使用する方法を示しています。スクリプトは画像ファイルを読み込み、元の画像の3 * "
"4タイルからなる新しい画像を作成します。"

#: ../../recipes-images.rst:451 af964bfc28e7413ba66efaec78d8861a
msgid "This is the input picture:"
msgstr "これが入力画像です。"

#: ../../recipes-images.rst:456 8f9aadd396da441aae747252389abad6
msgid "Here is the output:"
msgstr "こちらが出力結果です。"

#: ../../recipes-images.rst:473 521a208ba1344e4d880754209fea5107
msgid "How to Use Pixmaps: Making a Fractal"
msgstr "ピクスマップの使用方法：フラクタルの作成"

#: ../../recipes-images.rst:475 ecfbb56d0be54db480e9a3762d6596e3
msgid ""
"Here is another Pixmap example that creates **Sierpinski's Carpet** -- a "
"fractal generalizing the **Cantor Set** to two dimensions. Given a square"
" carpet, mark its 9 sub-suqares (3 times 3) and cut out the one in the "
"center. Treat each of the remaining eight sub-squares in the same way, "
"and continue *ad infinitum*. The end result is a set with area zero and "
"fractal dimension 1.8928..."
msgstr ""
"ここでは、もう一つのピクスマップの例を紹介します。シェルピンスキーのカーペット（Sierpinski's "
"Carpet）と呼ばれるフラクタルで、カントール集合を2次元に一般化したものです。正方形のカーペットにおいて、9つの部分正方形（3行3列）をマークし、中央の正方形を切り抜きます。残りの8つの部分正方形に対しても同じ操作を行い、無限に続けます。その結果、面積がゼロであり、フラクタル次元は1.8928...となります。"

#: ../../recipes-images.rst:477 a2897be7fdcf4f338d702e6d65bddd38
msgid ""
"This script creates an approximate image of it as a PNG, by going down to"
" one-pixel granularity. To increase the image precision, change the value"
" of n (precision)::"
msgstr "このスクリプトは、1ピクセルの精度にまで細かくなったPNGの近似画像を作成します。画像の精度を高めるには、n（精度）の値を変更してください::"

#: ../../recipes-images.rst:531 5fc34657ac9a415492a699ef8f90ff0e
msgid "The result should look something like this:"
msgstr "結果は以下のようになるはずです："

#: ../../recipes-images.rst:541 9ba4ac9543094a56859445cdf4586b3d
msgid "How to Interface with NumPy"
msgstr "NumPyとのインターフェース方法"

#: ../../recipes-images.rst:543 dab760ca33994a36a4fa3f81348a059a
msgid ""
"This shows how to create a PNG file from a numpy array (several times "
"faster than most other methods)::"
msgstr "これは、NumPy配列からPNGファイルを作成する方法を示しています（他の方法よりも数倍高速です）。"

#: ../../recipes-images.rst:570 814d1607ad784cb3bc42b521e05339f6
msgid "How to Add Images to a PDF Page"
msgstr "PDFページに画像を追加する方法"

#: ../../recipes-images.rst:572 511ef2c818c64e7a8247849df0eb0a4d
msgid ""
"There are two methods to add images to a PDF page: "
":meth:`Page.insert_image` and :meth:`Page.show_pdf_page`. Both methods "
"have things in common, but there are also differences."
msgstr ""
"PDFページに画像を追加するには、2つの方法があります： :meth:`Page.insert_image` と "
":meth:`Page.show_pdf_page` です。両方の方法には共通点がありますが、違いもあります。"

#: ../../recipes-images.rst:575 245fb55ae5aa475cb63cc638d029a719
msgid "**Criterion**"
msgstr "**基準**"

#: ../../recipes-images.rst:575 7ee9dc2b68564bbeac09763d1b7e3540
msgid ":meth:`Page.insert_image`"
msgstr ""

#: ../../recipes-images.rst:575 e800ef7f17b54b1491ca01f750198ca5
msgid ":meth:`Page.show_pdf_page`"
msgstr ""

#: ../../recipes-images.rst:577 43020c141c1b47a2be7f1ca4c60d3151
msgid "displayable content"
msgstr "表示可能なコンテンツ"

#: ../../recipes-images.rst:577 764b698d1a214ca580aafdf4db1ddce4
msgid "image file, image in memory, pixmap"
msgstr "画像ファイル、メモリ内の画像、ピクスマップ "

#: ../../recipes-images.rst:577 4d300dd3fbea488e96caa19c1839baaf
msgid "PDF page"
msgstr "PDFページ"

#: ../../recipes-images.rst:578 086ebe38d20d463b991877b682298846
msgid "display resolution"
msgstr "表示解像度 "

#: ../../recipes-images.rst:578 ffeaa0e0d31348b188735720296e73df
msgid "image resolution"
msgstr "画像の解像度 "

#: ../../recipes-images.rst:578 0c9c6bd5eed3478fb122ca4c5c2e18e1
msgid "vectorized (except raster page content)"
msgstr "ベクトル化（ラスターページコンテンツを除く）"

#: ../../recipes-images.rst:579 f5252f68b3d6465893a24e10301bd159
msgid "rotation"
msgstr "回転"

#: ../../recipes-images.rst:579 3ee6e2e0c02f4e018d014461a59b4edc
msgid "0, 90, 180 or 270 degrees"
msgstr "0度、90度、180度または270度"

#: ../../recipes-images.rst:579 4e9b9a7c0f4441b3b74b610cd2c4359f
msgid "any angle"
msgstr "任意の角度"

#: ../../recipes-images.rst:580 5e9496cfdbe24b5282ffe076ce56d421
msgid "clipping"
msgstr "クリッピング"

#: ../../recipes-images.rst:580 5d5cdf337cb74613a878850e686d44e0
msgid "no (full image only)"
msgstr "いいえ（全体の画像のみ）"

#: ../../recipes-images.rst:580 ../../recipes-images.rst:585
#: 1c7ba9fed1e04a7fb64977bae38f85dc ac1040a7379f4b1c943fe03c7eda479e
msgid "yes"
msgstr "はい"

#: ../../recipes-images.rst:581 dc101d48c3524707a81ac6c323d56274
msgid "keep aspect ratio"
msgstr "アスペクト比を保持"

#: ../../recipes-images.rst:581 c33248e6694b4c60b787256b981bdc90
#: f46778af1f354f5cbc3c1858637968dc
msgid "yes (default option)"
msgstr "はい（デフォルトオプション）"

#: ../../recipes-images.rst:582 4a1e3c17fb5e4b80abf342ffbe87c70e
msgid "transparency (water marking)"
msgstr "透明性（ウォーターマーキング）"

#: ../../recipes-images.rst:582 3fca02a8bc354c8f85980949f067cd57
msgid "depends on the image"
msgstr "画像による"

#: ../../recipes-images.rst:582 d2a1d6ac8aa2498b9de17484074480e1
msgid "depends on the page"
msgstr "ページによる"

#: ../../recipes-images.rst:583 8377b425f594448c9758b2e172527266
msgid "location / placement"
msgstr "位置/配置 "

#: ../../recipes-images.rst:583 986ef125a806463db0acd57fc6869a5a
#: fe82a68b2aa247c6a6176479be5ad2ce
msgid "scaled to fit target rectangle"
msgstr "ターゲットの矩形にフィットするようにスケーリング"

#: ../../recipes-images.rst:584 12e11b0f766349aa825471bb3a4c4ee4
msgid "performance"
msgstr "パフォーマンス"

#: ../../recipes-images.rst:584 3071e35027384d75bdc4333630bca211
#: ccf089e8315a47c6b6a85ee6b6efaf17
msgid "automatic prevention of duplicates;"
msgstr "重複の自動防止"

#: ../../recipes-images.rst:585 255754d8b1f0428da3b8101aaf4c2591
msgid "multi-page image support"
msgstr "マルチページ画像のサポート"

#: ../../recipes-images.rst:585 60f663fd5dd0454590164275f6ae52ce
msgid "no"
msgstr "いいえ"

#: ../../recipes-images.rst:586 4fb69e920a304e52b27b15b5943439b1
msgid "ease of use"
msgstr "使いやすさ"

#: ../../recipes-images.rst:586 df7583e806b74d04b26dd3ddc2863131
msgid "simple, intuitive;"
msgstr "シンプルで直感的"

#: ../../recipes-images.rst:586 385f99b4a0884ea8998601f9bde1b68f
msgid ""
"simple, intuitive; **usable for all document types** (including images!) "
"after conversion to PDF via :meth:`Document.convert_to_pdf`"
msgstr ""
"シンプルで直感的; :meth:`Document.convert_to_pdf` "
"を介してPDFに変換後、すべてのドキュメントタイプ（画像を含む！）に使用可能"

#: ../../recipes-images.rst:592 a0480cfebd984e65838a88b784875f40
msgid ""
"Basic code pattern for :meth:`Page.insert_image`. **Exactly one** of the "
"parameters **filename / stream / pixmap** must be given, if not re-"
"inserting an existing image::"
msgstr ""
":meth:`Page.insert_image` の基本的なコードパターン。 **filename / stream / pixmap** "
"のうち、1つだけを指定する必要があります（既存の画像を再挿入しない場合）::"

#: ../../recipes-images.rst:607 db5e5522ecb14989b8775febf2ff49ff
msgid ""
"Basic code pattern for :meth:`Page.show_pdf_page`. Source and target PDF "
"must be different :ref:`Document` objects (but may be opened from the "
"same file)::"
msgstr ""
":meth:`Page.show_pdf_page` の基本的なコードパターン。ソースとターゲットのPDFは異なる :ref:`Document`"
" オブジェクトである必要があります（ただし、同じファイルから開くこともできます）::"

#: ../../recipes-images.rst:623 8797ad18b7dd417faa6a00fb41725815
msgid "How to Use Pixmaps: Checking Text Visibility"
msgstr "ピクスマップの使用方法：テキストの表示可否の確認"

#: ../../recipes-images.rst:625 337f09174c12424797ac89bee1c42538
msgid ""
"Whether or not a given piece of text is actually visible on a page "
"depends on a number of factors:"
msgstr "特定のテキストが実際にページ上で表示されるかどうかは、いくつかの要因に依存します："

#: ../../recipes-images.rst:627 97f49b78a3de48f9a564cba64889c0c4
msgid ""
"Text is not covered by another object but may have the same color as the "
"background i.e., white-on-white etc."
msgstr "テキストは他のオブジェクトによって隠されていないが、背景と同じ色を持っている場合があります。例えば、白文字が白地になっているなどです。"

#: ../../recipes-images.rst:628 5b3b90104e1943caa3c793f527d384bf
msgid ""
"Text may be covered by an image or vector graphics. Detecting this is an "
"important capability, for example to uncover badly anonymized legal "
"documents."
msgstr "テキストは画像やベクトルグラフィックスによって隠されている場合があります。これを検出することは重要な機能であり、例えば不適切に匿名化された法的文書を解明するために使用されます。"

#: ../../recipes-images.rst:629 50d4094df1fa4d6e8a614760cec8b27d
msgid ""
"Text is created hidden. This technique is usually used by OCR tools to "
"store the recognized text in an invisible layer on the page."
msgstr "テキストが非表示に作成される場合があります。これは通常、OCRツールが認識されたテキストをページ上の非表示レイヤーに保存するために使用されます。"

#: ../../recipes-images.rst:631 289fea3bca034f46a8f788d8a9f4949d
msgid ""
"The following shows how to detect situation 1. above, or situation 2. if "
"the covering object is unicolor::"
msgstr "以下では、1.の状況を検出する方法、または2.の状況を検出する方法（カバーしているオブジェクトが単色である場合）を示します::"

#: ../../recipes-images.rst:645 b5f6461e134c473f8808b58a8bc77844
msgid ""
"Method :meth:`Pixmap.color_topusage` returns a tuple `(ratio, pixel)` "
"where 0 < ratio <= 1 and *pixel* is the pixel value of the color. Please "
"note that we create a **pixmap only once**. This can save a lot of "
"processing time if there are multiple hit rectangles."
msgstr ""
"メソッド :meth:`Pixmap.color_topusage` は、タプル `(ratio, pixel)` "
"（比率、ピクセル）を返します。ここで、0 < ratio <= "
"1であり、pixelは色のピクセル値です。複数のヒット矩形がある場合、ピクスマップを1回だけ作成することに注意してください。これにより、処理時間を大幅に節約できます。"

#: ../../recipes-images.rst:647 b3b1d9014866488099a09d72590d4d33
msgid ""
"The logic of the above code is: If the needle's rectangle is (\"almost\":"
" > 95%) unicolor, then the text cannot be visible. A typical result for "
"visible text returns the color of the background (mostly white) and a "
"ratio around 0.7 to 0.8, for example `(0.685, b'\\xff\\xff\\xff')`."
msgstr ""
"上記のコードのロジックは次の通りです：もしニードルの矩形が「ほぼ」（95％以上）単色であれば、テキストは表示されないと判断します。テキストが表示される場合の典型的な結果は、背景の色（主に白）と比率が0.7から0.8程度で返されることがあります。例えば、`(0.685,"
" b'xffxffxff')` のような結果が得られます。"

#: ../../footer.rst:-1 027ef2d7ee4b42048191f817b6b61f21
msgid "Discord logo"
msgstr ""

#~ msgid "PyMuPDF は、PDF （およびその他の）ドキュメントのデータ抽出、分析、変換、操作のための高性能な Python ライブラリです。"
#~ msgstr ""

#~ msgid "PDFテキスト抽出、PDFイメージ抽出、PDF変換、PDFテーブル、PDF分割、PDF作成, Pyodide, PyScript"
#~ msgstr ""

