================
**Tutorial**
================
This tutorial will show you the use of MuPDF in Python step by step. You should note that MuPDF supports not only PDF files, but also XPS, OpenXPS and EPUB files. The MuPDF bindings for Python also support all of these filetypes. Nevertheless we will only talk about PDF's for the sake of brevity.

Import the Bindings
==========================
The Python bindings to MuPDF are made available by this import statement:
::
 import fitz


Open a Document
======================
In order to access a supported document, it must be opened with the following statement:
::
 doc = fitz.Document(filename)

This will create ``doc`` as a :ref:`Document` object. ``filename`` must be a Python string or unicode object that specifies the name of an existing file (with or without a fully or partially qualified path).
A :ref:`Document` contains several attributes and functions.
Among them are meta information (like "author" or "subject"), number of total pages, outline and encryption information.

Some :ref:`Document` functions and attributes
=============================================

======================== ==================================================================================
:attr:`~doc.pageCount`   the number of pages of ``filename`` (integer).
:attr:`~doc.metadata`    either ``None`` or the metadata of the ``Document`` (dictionary).
:attr:`~doc.outline`     either ``None`` or the document's first outline entry.
:meth:`~doc.ToC`         Table of contents of the document (or ``[]`` if there is none).
:meth:`~doc.loadPage`    creates an object of type ``Page``, repesenting page number ``n`` (**remember**: zero-based!) of the document.
======================== ==================================================================================

Access the Meta Data
========================
:ref:`Document`.metadata is a Python dictionary with the following keys. For details of their meanings and formats consult the PDF manuals. The meta data fields are of type string if not otherwise indicated and may be missing, in which case they contain ``None``.

======================== ==================================================================================
.. data::
.. data:: producer       Producer (the basic producing software)
.. data:: format         PDF release, e.g. 'PDF 1.4' (string)
.. data:: encryption     Encryption (``None`` or the encryption method used)
.. data:: author         Author
.. data:: modDate        Date of last modification
.. data:: keywords       Keywords (dictionary)
.. data:: title          Title
.. data:: creationDate   Date of creation
.. data:: creator        Creating application
.. data:: subject        Subject
======================== ==================================================================================

Work with Outlines
=========================
Entering the documents outline tree works like this:
::
 olItem = doc.outline    # this is the document's first outline item


Some ``Document.outline`` functions and attributes
===================================================

========================== ==================================================================================
:meth:`~outline.saveText`  save the complete outline as a text file. Parameter: text filename
:meth:`~outline.saveXML`   save the complete outline as a quai-XML file. Parameter: XML filename
:attr:`~outline.next`      either ``None`` or the next item of the same level
:attr:`~outline.down`      either ``None`` or the next item one level down
:attr:`~outline.title`     a string containing the text of the item in utf-8 format
:attr:`~outline.dest`      a ``dest`` (destination) object with the meaning 'where does this entry point to?'. It contains several attributes of which just a few will be mentioned here.
========================== ==================================================================================

Some ``Document.outline.dest`` functions and attributes
========================================================

=========================== ==================================================================================
:attr:`~outlItem.dest.page` an integer specifying the page number this entry points to.
:attr:`~outlItem.dest.lt`   a ``Point`` object with the meaning 'top left corner of the rectangle this entry points to'.
:attr:`~outlItem.dest.rb`   a ``Point`` object with meaning 'bottom right corner of the rectangle this entry points to'.
=========================== ==================================================================================

MuPDF also supports outline destinations to other files and URIs into which we will not dive here.

In order to get a complete Python outline list ("table of contents") of a document, use the following function:
::
 toc = doc.ToC()       # [[level, title, page], ...], or []


Work with Pages
======================
Tasks that can be performed with a :ref:`Page` are at the core of MuPDF's functionality. Among other things, you can render a :ref:`Page`, optionally zooming, rotating or shearing it.
You can write it's image to files (in PNG format), extract text from it or perform searches for text elements.
At first, a page object must be created:
::
 page = doc.loadPage(n)               # create the Page object representing page n of the document

Some typical uses of :ref:`Page` objects:

1. Inspect the links on a :ref:`Page`:
::
 #-----------------------------------------------------------------------------------
 # Display all links of the current page
 #-----------------------------------------------------------------------------------
 ln = page.loadLinks()
 #-----------------------------------------------------------------------------------
 # Links are organized as a single linked list. We need to check each occurrence
 # to see what info we can get
 #-----------------------------------------------------------------------------------
 while ln:
     if ln.dest.kind == fitz.LINK_URI:
	     print '[LINK]URI: %s' % ln.dest.uri
     elif ln.dest.kind == fitz.LINK_GOTO:
         print '[LINK]jump to page %d' % ln.dest.page
     else:
         pass
     ln = ln.next


2. Render a :ref:`Page`:
::
 #-----------------------------------------------------------------------------------
 # Get the size of the page - giving a rectangle
 #-----------------------------------------------------------------------------------
 rect = page.bound()
 #-----------------------------------------------------------------------------------
 # round / convert the real numbers in rect to integers
 #-----------------------------------------------------------------------------------
 irect = rect.round()
 #-----------------------------------------------------------------------------------
 # create an empty RGBA pixel map of the rectangle's size
 #-----------------------------------------------------------------------------------
 pix = fitz.Pixmap(fitz.Colorspace(fitz.CS_RGB), irect)
 pix.clearWith(255)             # Initialize with color "white" and "no transparency"
 dev = fitz.Device(pix)         # Create a draw device for the pixel map
 page.run(dev, fitz.Identity)   # finally render the page with no changes
 #-----------------------------------------------------------------------------------
 # now pix contains the rendered page, ready to be used
 #-----------------------------------------------------------------------------------

2.1 Example: save the page image as a png file:
::
 pix.writePNG("test.png")

2.2 Example: convert the image to a Bitmap for the wxPython dialog manager:
::
 data = pix.samples                       # data = bytearray of raw pixel data (RGBA)
 bitmap = wx.BitmapFromBufferRGBA(irect.width,
             irect.height, str(data))     # wxPython only accepts strings, no bytearrays


