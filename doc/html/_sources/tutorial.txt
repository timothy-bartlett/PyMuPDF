.. raw:: pdf

    PageBreak

=========
Tutorial
=========
This tutorial will show you the use of MuPDF in Python step by step.

Because MuPDF supports not only PDF, but also XPS, OpenXPS and EPUB formats, so does PyMuPDF. Nevertheless we will only talk about PDF files for the sake of brevity.

As for string handling, MuPDF will pass back any string as UTF-8 encoded - no exceptions. Where this binding has added functionality, we usually decode string to unicode. An example is the :meth:`Document.ToC` method.

Import the Bindings
==========================
The Python bindings to MuPDF are made available by this import statement:
::
 import fitz


Open a Document
======================
In order to access a supported document, it must be opened with the following statement:
::
 doc = fitz.Document(filename)

This will create ``doc`` as a :ref:`Document` object. ``filename`` must be a Python string or unicode object that specifies the name of an existing file (with or without a fully or partially qualified path).

It is also possible to construct a document from memory data, i.e. without using a file. See :ref:`Document` for details.

A :ref:`Document` contains several attributes and functions. Among them are meta information (like "author" or "subject"), number of total pages, outline and encryption information.

Some :ref:`Document` methods and attributes
=============================================

=========================== ==========================================
**Method / Attribute**      **Description**
=========================== ==========================================
:attr:`Document.pageCount`  Number of pages of ``filename`` (integer).
:attr:`Document.metadata`   Metadata of the ``Document`` (dictionary).
:attr:`Document.outline`    First outline entry of ``Document``
:meth:`Document.ToC`        Table of contents of ``Document`` (list).
:meth:`Document.loadPage`   Create a ``Page`` object.
=========================== ==========================================

Access Meta Data
========================
:attr:`Document.metadata` is a Python dictionary with the following keys. For details of their meanings and formats consult the PDF manuals, e.g. `Adobe PDF Reference sixth edition 1.7 November 2006 <http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf>`_. Further information can also be found in chapter :ref:`Document`. The meta data fields are of type string if not otherwise indicated and may be missing, in which case they contain ``None``.

======================== ==============================
**Key**                  **Value**
======================== ==============================
.. data:: producer       Producer (producing software)
.. data:: format         PDF format, e.g. 'PDF-1.4'
.. data:: encryption     Encryption method used
.. data:: author         Author
.. data:: modDate        Date of last modification
.. data:: keywords       Keywords
.. data:: title          Title
.. data:: creationDate   Date of creation
.. data:: creator        Creating application
.. data:: subject        Subject
======================== ==============================

Work with Outlines
=========================
Entering the documents outline tree works like this:
::
 olItem = doc.outline    # the document's first outline item

This creates olItem as an :ref:`Outline` object.

Some :ref:`Outline` methods and attributes
===================================================

============================ =================================================
**Method / Attribute**       **Description**
============================ =================================================
:meth:`Outline.saveText`     Save table of contents as a text file
:meth:`Outline.saveXML`      Save table of contents as a quasi-XML file
:attr:`Outline.next`         Next item of the same level
:attr:`Outline.down`         Next item one level down
:attr:`Outline.title`        Title of this item
:attr:`Outline.dest`         Destination ('where does this entry point to?')
============================ =================================================

Some :attr:`Outline.dest` attributes
=====================================

=========================== ========================================
**Attribute**               **Description**
=========================== ========================================
:attr:`Outline.dest.page`   Target page number
:attr:`Outline.dest.lt`     Top-left corner of target rectangle
:attr:`Outline.dest.rb`     Bottem-right corner of target rectangle
=========================== ========================================

MuPDF also supports outline destinations to other files and to URIs. See :ref:`Outline`.

In order to get a document's table of contents as a Python list, use the following function:
::
 toc = doc.ToC()       # [[level, title, page], ...], or []


Work with Pages
======================
Tasks that can be performed with a :ref:`Page` are at the core of MuPDF's functionality.
Among other things, you can render a :ref:`Page`, optionally zooming, rotating or shearing it.
You can write it's image to files (in PNG format), extract text from it or perform searches for text elements.
At first, a page object must be created:
::
 page = doc.loadPage(n)        # represents page n of the document

Here are some typical uses of :ref:`Page` objects:

Inspect the links on a :ref:`Page`
------------------------------------
Here is an example that displays all links and their types:
::
 #-----------------------------------------------------------------------------------
 # Get all links of the current page
 #-----------------------------------------------------------------------------------
 ln = page.loadLinks()
 #-----------------------------------------------------------------------------------
 # Links are organized as a single linked list. We need to check each occurrence
 # to see what info we can get
 #-----------------------------------------------------------------------------------
 while ln:
     if ln.dest.kind == fitz.LINK_URI:
	     print '[LINK]URI: %s' % ln.dest.uri
     elif ln.dest.kind == fitz.LINK_GOTO:
         print '[LINK]jump to page %d' % ln.dest.page
     else:
         pass
     ln = ln.next

Render a :ref:`Page`
-----------------------
This example creates an image out of a page's content:
::
 #-----------------------------------------------------------------------------------
 # Get the page's rectangle
 #-----------------------------------------------------------------------------------
 rect = page.bound()
 #-----------------------------------------------------------------------------------
 # create the smallest pixel area containing the rectangle
 #-----------------------------------------------------------------------------------
 irect = rect.round()
 #-----------------------------------------------------------------------------------
 # create an empty RGBA pixel map of the pixel area's size
 #-----------------------------------------------------------------------------------
 pix = fitz.Pixmap(fitz.Colorspace(fitz.CS_RGB), irect)
 pix.clearWith(255)             # Initialize with color "white" and "no transparency"
 dev = fitz.Device(pix)         # Create a draw device for the pixel map
 page.run(dev, fitz.Identity)   # finally render the page with no changes
 #-----------------------------------------------------------------------------------
 # now pix contains an image of the page, ready to be used
 #-----------------------------------------------------------------------------------

Save the page image in a file
-----------------------------------
We can simply store the image in a PNG file:
::
 pix.writePNG("test.png")


Display the image in dialog managers
--------------------------------------
Or we convert the image into a bitmap usable by dialog managers. :attr:`Pixmap.samples` represents the area of bytes of all the pixels as a Python bytearray. This area (or its ``str()``-version), is directly usable by presumably most dialog managers. Here are two examples.

**wxPython**:
::
 data = pix.samples                   # data = bytearray of raw pixel data (RGBA)
 bitmap = wx.BitmapFromBufferRGBA(irect.width,
             irect.height, str(data)) # wxPython only accepts strings, no bytearrays

**Tkinter**:
::
 data = pix.samples
 img = Image.frombytes("RGBA", [irect.width, irect.height], str(data))
 photo = ImageTk.PhotoImage(img)


Text extraction
----------------
We can also extract all text of a page in a big chunk of string:
::
 dl = fitz.DisplayList()                  # create a DisplayList
 ts = fitz.TextSheet()                    # create a TextSheet
 tp = fitz.TextPage()                     # create a TextPage
 dev = fitz.Device(ts, tp)                # create a text Device
 irect = page.bound()                     # the page's visible rectangle
 page.run(dev, fitz.Identity)             # run the page on the device
 # now run the display list with the page's data
 dl.run(dev, fitz.Identity, irect)

 # 4 methods exist to extract the text now contained in the TextPage:

 # (1) plain text: with line breaks, no formatting, no position info
 text = tp.extractText()

 # (2) html: line breaks, alignment, grouping, no formatting, no positioning
 html = tp.extractHTML()

 # (3) json: full formatting info (except colors and fonts) down to spans
 xml = tp.extractJSON()

 # (4) xml: full formatting info (except colors) down to individual characters
 xml = tp.extractXML()


To give you an idea about the output of these alternatives, we did extracts from this document's PDF version and several other examples. See the appendix for details about implications on processing times and space requirements.

Text Searching
---------------
If you are interested in the occurence of parts of text, you can determine, exactly where on a page a certain string appears:
::
 # search for at most 4 page locations with specific contents
 res = tp.search('MuPDF', hit_max = 4)

The result ``res`` will now be ``[]`` or a list of no more than 4 :ref:`Rect` rectangles that contain the string 'MuPDF'. The ``hit_max`` parameter (in our case set to 4) is optional (default is 16).

Output
=======
Output capabilities of MuPDF (such as PDF generation) are currently very limited. However, a copy of the currently opened document can be created.

We support this with the method :meth:`Document.save`. If the document had been successfully decrypted before, ``save()`` will create a decrypted copy.

In addition, this method will also perform some clean-up:

If the document containes invalid or broken xrefs, the saved version will have them corrected, which makes it readable by other Python PDF software, like `pdfrw <https://github.com/pmaupin/pdfrw>`_ or `PyPDF2 <http://mstamy2.github.io/PyPDF2>`_. In many cases, the saved version will also be smaller than the original.

:meth:`Document.save` now supports all options of MuPDF's standalone utility ``mutool clean``.

================== ============================================
**Option**         **Effect**
================== ============================================
garbage = 1        garbage collect unused objects
garbage = 2        in addition to 1, compact xref tables
garbage = 3        in addition to 2, merge duplicate objects
clean = 1          clean content streams (avoid / use with care)
deflate = 1        deflate uncompressed streams
ascii = 1          convert data to ASCII format
linear = 1         create a linearized document version
expand = 1         create a decompressed version
incremental = 1    only save data that have changed
================== ============================================

Please note, that :meth:`Document.save`, according to MuPDF's documentation, is still being further developed, so expect changes in the future here.

Like with ``mutool clean``, not all combinations of the above options may work for all documents - so be ready to experiment a little.

We have found, that the fastest and very stable combination is ``mutool clean -ggg -z``, giving good compression results. In PyMuPDF this corresponds to ``doc.save(filename, garbage=3, deflate=1)``.

In some cases, best compression factors result, if ``expand`` and ``deflate`` are used together, though they seem to be contradictory. This works, because MuPDF is forced to expand and then re-compress all objects, which will correct poor compressions during document creation.

Close
======
In some situations it is desirable to "close" a :ref:`Document` such that it becomes fully available again to the OS while your program is still running.

This can be achieved by the :meth:`Document.close` method. Apart from closing the file, all buffer areas associated with the document will be freed. If the document has been created from memory data, no underlying file is opened by MuPDF, so only the buffer release will take place.

**Caution:**

As with normal file objects, after close, the document and all objects referencing it will be invalid  and **must no longer be used**. This binding protects against most such invalid uses by disabling properties and methods of the :ref:`Document` and any associated :meth:`Document.loadPage` objects.

However, re-opening a previously closed file by a new :ref:`Document` is no problem. Please also do have a look at the following valid example:
::
 doc = fitz.Document(f_old)           # open a document
 <... some statements ...>            # e.g. decryption
 doc.save(fnew, garbage=3, deflate=1) # save a decrypted / compressed version
 doc.close()                          # close input file
 os.remove(f_old)                     # remove it
 os.rename(f_new, f_old)              # rename the decrypted / cleaned version
 doc = fitz.Document(f_old)           # use it as input for MuPDF

Example: Dynamically cleaning up corrupt PDF documents
========================================================
This shows a potential use of PyMuPDF with another Python PDF library (``pdfrw``).

If a PDF is broken or needs to be decrypted, one could dynamically invoke PyMuPDF to recover from problems like so:
::
 import sys
 from pdfrw import PdfReader
 import fitz
 from cStringIO import StringIO

 #---------------------------------------
 # 'tolerant' PDF reader
 #---------------------------------------
 def reader(fname):
     ifile = open(fname, "rb")
     idata = ifile.read()                # put in memory
     ifile.close()
     ibuffer = StringIO(idata)           # convert to stream
     try:
         return PdfReader(ibuffer)       # let us try
     except:                             # problem! see if PyMuPDF can heal it
         doc = fitz.Document("application/pdf",
                             idata,
                             len(idata)) # scan pdf data in memory
         doc.save("test.pdf",            # may want to use a temp file
                  garbage=3,
                  deflate=1)             # save a cleaned version
         ifile = open("test.pdf", "rb")  # open it
         idata = ifile.read()            # put in memory
         ifile.close()
         ibuffer = StringIO(idata)       # convert to stream
         return PdfReader(ibuffer)       # now let pdfrw retry
 #---------------------------------------

 pdf = reader(sys.argv[1])
 print pdf.Info
 # do further processing

With the command line utility ``pdftk`` a similar result can be achieved, see `here <http://www.overthere.co.uk/2013/07/22/improving-pypdf2-with-pdftk/>`_. It even supports buffers for input **and** output. However you must invoke it as a separate process via ``subprocess.Popen``, using stdin and stdout as communication vehicles.