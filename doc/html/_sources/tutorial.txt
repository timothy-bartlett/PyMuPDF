.. raw:: pdf

    PageBreak

=========
Tutorial
=========
This tutorial will show you the use of MuPDF in Python step by step.

Because MuPDF supports not only PDF, but also XPS, OpenXPS and EPUB formats, so does PyMuPDF. Nevertheless we will only talk about PDF files for the sake of brevity.

As for string handling, MuPDF will pass back any string as UTF-8 encoded - no exceptions. Where this binding has added functionality, we usually decode string to unicode. An example is the :meth:`Document.ToC` method.

Import the Bindings
==========================
The Python bindings to MuPDF are made available by this import statement:
::
 import fitz


Open a Document
======================
In order to access a supported document, it must be opened with the following statement:
::
 doc = fitz.Document(filename)

This will create ``doc`` as a :ref:`Document` object. ``filename`` must be a Python string or unicode object that specifies the name of an existing file (with or without a fully or partially qualified path).

It is also possible to construct a document from memory data, i.e. without using a file. See :ref:`Document` for details.

A :ref:`Document` contains several attributes and functions. Among them are meta information (like "author" or "subject"), number of total pages, outline and encryption information.

Some :ref:`Document` methods and attributes
=============================================

=========================== ==========================================
**Method / Attribute**      **Description**
=========================== ==========================================
:attr:`Document.pageCount`  Number of pages of ``filename`` (integer).
:attr:`Document.metadata`   Metadata of the ``Document`` (dictionary).
:attr:`Document.outline`    First outline entry of ``Document``
:meth:`Document.getToC`     Table of contents of ``Document`` (list).
:meth:`Document.loadPage`   Create a ``Page`` object.
=========================== ==========================================

Access Meta Data
========================
:attr:`Document.metadata` is a Python dictionary with the following keys. For details of their meanings and formats consult the PDF manuals, e.g. `Adobe PDF Reference sixth edition 1.7 November 2006 <http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf>`_. Further information can also be found in chapter :ref:`Document`. The meta data fields are of type string if not otherwise indicated and may be missing, in which case they contain ``None``.

======================== ==============================
**Key**                  **Value**
======================== ==============================
.. data:: producer       Producer (producing software)
.. data:: format         PDF format, e.g. 'PDF-1.4'
.. data:: encryption     Encryption method used
.. data:: author         Author
.. data:: modDate        Date of last modification
.. data:: keywords       Keywords
.. data:: title          Title
.. data:: creationDate   Date of creation
.. data:: creator        Creating application
.. data:: subject        Subject
======================== ==============================

Work with Outlines
=========================
The easiest way to get all outlines of a document, is creating a table of contents:
::
 toc = doc.getToC(simple = True)       # the simple form, if False, link information is included

This will return a Python list ``[[level, title, page, link], ...]`` (or ``[]``).

``level`` is the hierarchy level of the entry (starting from 1), ``title`` is the entry's title (unicode), and ``page`` the page number (1-based). ``link`` is present if ``simple = False`` is specified. Its meaning can be look up under :meth:`Page.getLinks`.

If you want a more detailed control of what you get, enter the document's outline tree like this:
::
 olItem = doc.outline    # the document's first outline item

This creates olItem as an :ref:`Outline` object. Look there for further details.


Work with Pages
======================
Tasks that can be performed with a :ref:`Page` are at the core of MuPDF's functionality.
Among other things, you can render a :ref:`Page`, optionally zooming, rotating or shearing it.
You can write it's image to files (in PNG format), extract text from it or search for text strings.
At first, a page object must be created:
::
 page = doc.loadPage(n)        # represents page n of the document

Some typical uses of :ref:`Page` objects follow:

Inspect the links on a :ref:`Page`
------------------------------------
Here is how to get all links and their types:
::
 #-----------------------------------------------------------------------------------
 # Get all links of the current page
 #-----------------------------------------------------------------------------------
 links = page.getLinks()

``links`` is a Python list containing Python dictionaries as entries. For details see :meth:`Page.getLinks`.

Render a :ref:`Page`
-----------------------
This example creates an image out of a page's content:
::
 pix = page.getPixmap(matrix = fitz.Identity, colorspace = "RGB")
 #-----------------------------------------------------------------------------------
 # now pix contains an RGB image of the page, ready to be used
 #-----------------------------------------------------------------------------------

Save the page image in a file
-----------------------------------
We can simply store the image in a PNG file:
::
 pix.writePNG("test.png")


Display the image in dialog managers
--------------------------------------
We can also use the image in a dialog. :attr:`Pixmap.samples` represents the area of bytes of all the pixels as a Python bytearray. This area (or its ``str()``-version), is directly usable by presumably most dialog managers. Here are two examples. Please also have a look at the examples directory of this repository.

**wxPython**:
::
 data = pix.samples                          # data = bytearray of raw pixel data (RGBA)
 bitmap = wx.BitmapFromBufferRGBA(pix.width, # image width
             pix.height,                     # image height
             str(data))                      # wxPython only accepts strings, no bytearrays

**Tkinter**:
::
 data = pix.samples
 # the following requires: "from PIL import Image"
 img = Image.frombytes("RGBA", [pix.width, pix.height], str(data))
 photo = ImageTk.PhotoImage(img)


Text extraction
----------------
We can also extract all text of a page in one chunk of string:
::
 text = page.getText(output = "text")

For the ``output`` parameter, the following values can be specified:

* ``text``: plain text with line breaks. No format and no position info.

* ``html``: line breaks, alignment, grouping. No format and no position info

* ``json``: full formatting info (except colors and fonts) down to spans (see appendix)

* ``xml``: full formatting info (except colors) down to individual characters

To give you an idea about the output of these alternatives, we did text extracts from this document's PDF version and several other examples. See the appendix for details about implications on processing times and space requirements.

Text Searching
---------------
You can find out, exactly where on a page a certain string appears like this:
::
 areas = page.searchFor("mupdf", hit_max = 32)


The variable ``areas`` will now contain a list of up to 32 :ref:`Rect` rectangles which surround each occurrence of string "mupdf" (not case sensitive).

Please also do have a look at the demonstration program ``demo.py``. Among others it contains details on how the :ref:`TextPage`, :ref:`TextSheet`, :ref:`Device` and :ref:`DisplayList` classes can be used for a more direct control, e.g. when performance considerations require it.


Output
=======
Output capabilities of MuPDF (such as PDF generation) are currently very limited. However, a copy of a currently opened document can be created (PDF only, none of the other file types).

We support this with the method :meth:`Document.save`.

If the document had been successfully decrypted before, ``save()`` will automatically create a decrypted copy.

In addition, this method will also perform some clean-up:

If the document containes invalid or broken xrefs, the saved version will have them automatically corrected, which makes it readable by other Python PDF software, like `pdfrw <https://github.com/pmaupin/pdfrw>`_ or `PyPDF2 <http://mstamy2.github.io/PyPDF2>`_. In many cases, the saved version will also be smaller than the original.

:meth:`Document.save` now also supports all options of MuPDF's command line utility ``mutool clean``, see below (mutool clean option = "MCO").

================== ======= ==================================================
**Option**         **MCO** **Effect**
================== ======= ==================================================
garbage = 1         -g     garbage collect unused objects
garbage = 2         -gg    in addition to 1, compact xref tables
garbage = 3         -ggg   in addition to 2, merge duplicate objects
clean = 1           -s     clean content streams (avoid or use with care!)
deflate = 1         -z     deflate uncompressed streams
ascii = 1           -a     convert data to ASCII format
linear = 1          -l     create a linearized version (do not use yet)
expand = 1          -i     decompress images
expand = 2          -f     decompress fonts
expand = 255        -d     decompress all
incremental = 1     n/a    only save data that have changed (do not use yet)
================== ======= ==================================================

Please note, that :meth:`Document.save`, according to MuPDF's documentation, is still being further developed, so expect changes in the future here. Also observe our remarks in the above table.

Like with ``mutool clean``, not all combinations of the above options may work for all documents - so be ready to experiment a little.

We have found, that the fastest, yet very stable combination is ``mutool clean -ggg -z``, giving good compression results. In PyMuPDF this corresponds to ``doc.save(filename, garbage=3, deflate=1)``.

In some cases, best compression factors result, if ``expand`` and ``deflate`` are used together, though they seem to be contradictory. This works, because MuPDF is forced to expand and then re-compress all objects, which will correct poor compressions during document creation.

Close
======
In some situations it is desirable to "close" a :ref:`Document` such that it becomes fully available again to the OS while your program is still running.

This can be achieved by the :meth:`Document.close` method. Apart from closing the file, all buffer areas associated with the document will be freed. If the document has been created from memory data, no underlying file is opened by MuPDF, so only the buffer release will take place.

**Caution:**

As with normal file objects, after close, the document and all objects referencing it will be invalid  and **must no longer be used**. This binding protects against most such invalid uses by disabling properties and methods of the :ref:`Document` and any associated :meth:`Document.loadPage` objects.

However, re-opening a previously closed file by a new :ref:`Document` is no problem. Please also do have a look at the following valid example:
::
 doc = fitz.Document(f_old)           # open a document
 <... some statements ...>            # e.g. decryption
 doc.save(fnew, garbage=3, deflate=1) # save a decrypted / compressed version
 doc.close()                          # close input file
 os.remove(f_old)                     # remove it
 os.rename(f_new, f_old)              # rename the decrypted / cleaned version
 doc = fitz.Document(f_old)           # use it as input for MuPDF

Example: Dynamically cleaning up corrupt PDF documents
========================================================
This shows a potential use of PyMuPDF with another Python PDF library (``pdfrw``).

If a PDF is broken or needs to be decrypted, one could dynamically invoke PyMuPDF to recover from problems like so:
::
 import sys
 from pdfrw import PdfReader
 import fitz
 from cStringIO import StringIO

 #---------------------------------------
 # 'tolerant' PDF reader
 #---------------------------------------
 def reader(fname):
     ifile = open(fname, "rb")
     idata = ifile.read()                # put in memory
     ifile.close()
     ibuffer = StringIO(idata)           # convert to stream
     try:
         return PdfReader(ibuffer)       # let us try
     except:                             # problem! see if PyMuPDF can heal it
         doc = fitz.Document("application/pdf",
                             idata,
                             len(idata)) # scan pdf data in memory
         doc.save("test.pdf",            # may want to use a temp file
                  garbage=3,
                  deflate=1)             # save a cleaned version
         ifile = open("test.pdf", "rb")  # open it
         idata = ifile.read()            # put in memory
         ifile.close()
         ibuffer = StringIO(idata)       # convert to stream
         return PdfReader(ibuffer)       # now let pdfrw retry
 #---------------------------------------

 pdf = reader(sys.argv[1])
 print pdf.Info
 # do further processing

With the command line utility ``pdftk`` a similar result can be achieved, see `here <http://www.overthere.co.uk/2013/07/22/improving-pypdf2-with-pdftk/>`_. It even supports buffers for input **and** output. However you must invoke it as a separate process via ``subprocess.Popen``, using stdin and stdout as communication vehicles.