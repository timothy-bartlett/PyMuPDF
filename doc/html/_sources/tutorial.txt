.. raw:: pdf

    PageBreak

=========
Tutorial
=========
This tutorial will show you the use of MuPDF in Python step by step.

Because MuPDF supports not only PDF, but also XPS, OpenXPS, CBZ and EPUB formats, so does PyMuPDF. Nevertheless we will only talk about PDF files for the sake of brevity. At places where indeed only PDF files are supported, this will be mentioned explicitely.

As for string handling, MuPDF will pass back any string as UTF-8 encoded - no exceptions.

Import the Bindings
==========================
The Python bindings to MuPDF are made available by this import statement:
::
 import fitz

You can check your version by printing the docstring:
::
 >>> print (fitz.__doc__)
 PyMuPDF 1.9.1: Python bindings for the MuPDF 1.9a library,
 built on 2016-07-01 13:06:02
 >>>


Open a Document
======================
In order to access a supported document, it must be opened with the following statement:
::
 doc = fitz.Document(filename)     # or fitz.open(filename) (since V1.9.0)

This will create ``doc`` as a :ref:`Document` object. ``filename`` must be a Python string or unicode object that specifies the name of an existing file.

It is also possible to open a document from memory (bytearray) data, i.e. without using a file. See :ref:`Document` for details.

A :ref:`Document` contains many attributes and functions. Among them are meta information (like "author" or "subject"), number of total pages, outline and encryption information.

Some :ref:`Document` Methods and Attributes
=============================================

=========================== ==========================================
**Method / Attribute**      **Description**
=========================== ==========================================
:attr:`Document.pageCount`  Number of pages (int).
:attr:`Document.metadata`   Metadata (dictionary).
:attr:`Document.outline`    First outline entry
:meth:`Document.getToC`     Table of contents (list).
:meth:`Document.loadPage`   Create a ``Page`` object.
=========================== ==========================================

Access Meta Data
========================
:attr:`Document.metadata` is a Python dictionary with the following keys. For details of their meanings and formats consult the PDF manuals, e.g. `Adobe PDF Reference sixth edition 1.7 November 2006 <http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_reference_1-7.pdf>`_. Further information can also be found in chapter :ref:`Document`. The meta data fields are of type string if not otherwise indicated. Be aware that not all of them may be present or do contain meaningfull data.

============== ==============================
**Key**        **Value**
============== ==============================
producer       Producer (producing software)
format         PDF format, e.g. 'PDF-1.4'
encryption     Encryption method used
author         Author
modDate        Date of last modification
keywords       Keywords
title          Title
creationDate   Date of creation
creator        Creating application
subject        Subject
============== ==============================

Work with Outlines
=========================
The easiest way to get all outlines of a document, is creating a table of contents:
::
 # the simple form, if False, link information is included
 toc = doc.getToC(simple = True)

This will return a Python list ``[[level, title, page, link], ...]`` (or ``[]``).

``level`` is the hierarchy level of the entry (starting from 1), ``title`` is the entry's title, and ``page`` the page number (1-based). ``link`` is present if ``simple = False`` is specified. Its meaning can be looked up under :meth:`Page.getLinks`.


Work with Pages
======================
Tasks that can be performed with a :ref:`Page` are at the core of MuPDF's functionality.
Among other things, you can render a page, optionally zooming, rotating, shifting or shearing it.
You can write it's image to files, extract text from it or search for text strings.

At first, a page object must be created:
::
 page = doc.loadPage(n)        # represents page n of the document (0-based)

Some typical uses of :ref:`Page` objects follow:

Inspect the Links on a Page
------------------------------------
Here is how to get all links and their types:
::
 # get all links of the current page
 links = page.getLinks()

``links`` is a Python list containing Python dictionaries as entries. For details see :meth:`Page.getLinks`.

Render a Page
-----------------------
This example creates an image out of a page's content:
::
 pix = page.getPixmap(matrix = fitz.Identity, colorspace = "RGB")
 # now pix contains an RGB image of the page, ready to be used

Save the Page Image in a File
-----------------------------------
We can simply store the image in a PNG file:
::
 pix.writePNG("test.png")


Display the Image in Dialog Managers
--------------------------------------
We can also use the image in a dialog. :attr:`Pixmap.samples` represents the area of bytes of all the pixels as a Python bytearray. This area (or its ``str()``-version), is directly usable by presumably most dialog managers. Here are two examples. Please also have a look at the examples directory of this repository.

**wxPython**:
::
 bitmap = wx.BitmapFromBufferRGBA(pix.width, # image width
             pix.height,                     # image height
             pix.samples)                    # bytearray with pixel data

**Tkinter**:
::
 # the following requires: "from PIL import Image"
 img = Image.frombytes("RGBA", [pix.width, pix.height], pix.samples)
 photo = ImageTk.PhotoImage(img)

Now, ``photo`` can be used as an image in TK.

Text Extraction
----------------
We can also extract all text of a page in one chunk of string:
::
 text = page.getText(output = "text")

For the ``output`` parameter, the following values can be specified:

* ``text``: plain text with line breaks. No format and no position info.

* ``html``: line breaks, alignment, grouping. No format and no position info.

* ``json``: full formatting info (except colors and fonts) down to spans (see Appendix 2).

* ``xml``: full formatting info (except colors) down to single characters (!).

To give you an idea about the output of these alternatives, we did text example extracts. See the Appendix 2.

Text Searching
---------------
You can find out, exactly where on a page a certain string appears like this:
::
 areas = page.searchFor("mupdf", hit_max = 32)


The variable ``areas`` will now contain a list of up to 32 :ref:`Rect` rectangles each of which surrounds one occurrence of string "mupdf" (case insensitive).

Please also do have a look at the demo program ``demo.py``. Among others it contains details on how the :ref:`TextPage`, :ref:`TextSheet`, :ref:`Device` and :ref:`DisplayList` classes can be used for a more direct control, e.g. when performance considerations require it.


Output
=======
Output capabilities of MuPDF (such as PDF generation) have improved in version 1.9. Output is supported for PDF documents only.

Re-arrange and Delete Pages
----------------------------------
Method :meth:`Document.select()` accepts a list of integers as argument. These integers must be in the range ``0 <= i < pageCount``. When executed, all pages not occurring in this list will be deleted. Pages that do occur will remain - **in the sequence specified and as many times as specified**.

So you can easily create sub-PDFs of the first / last 10 pages, only odd or even pages (for doing double-sided printing), pages that do (not) contain a certain text, ... whatever you may think of.

To make any such changes permanent, execute :meth:`Document.save()` (see below) and then close / re-open the original document for any further processing.

The saved document will contain all links, annotations and bookmarks referenced by its pages.

Save
-------

If the document had been successfully decrypted before, ``save()`` will automatically save a decrypted copy.

If you altered the document via :meth:`Document.select()`, :meth:`Document.setToC()` or :meth:`Document.setMetadata()`, then the resulting document will be saved.

Since MuPDF 1.9, you can also write changes back to the original file by specifying ``incremental = True``. This process is **extremely fast**, since any changes are **appended to the original file** - it will not be rewritten as a whole.

As part of ``save()``, some clean-up will always take place:

If the document containes invalid or broken xrefs, the saved version will have them automatically corrected (thus making it readable by other Python PDF software, like `pdfrw <https://github.com/pmaupin/pdfrw>`_ or `PyPDF2 <http://mstamy2.github.io/PyPDF2>`_). In many cases, the saved copy will also be smaller than the original.

:meth:`Document.save` supports all options of MuPDF's command line utility ``mutool clean``, see the following table (mutool clean option = "MCO").

================== ======= ==================================================
**Option**         **MCO** **Effect**
================== ======= ==================================================
garbage = 1         -g     garbage collect unused objects
garbage = 2         -gg    in addition to 1, compact xref tables
garbage = 3         -ggg   in addition to 2, merge duplicate objects
clean = 1           -s     clean content streams
deflate = 1         -z     deflate uncompressed streams
ascii = 1           -a     convert data to ASCII format
linear = 1          -l     create a linearized version (do not use yet)
expand = 1          -i     decompress images
expand = 2          -f     decompress fonts
expand = 255        -d     decompress all
incremental = 1     n/a    only save data that have changed
================== ======= ==================================================

Be ready to experiment a little if you want to fully exploit above options: like with ``mutool clean``, not all combinations may always work: there are just too many ill-constructed PDF files out there ...

We have found, that the fastest, yet very stable combination is ``mutool clean -ggg -z``, giving good compression results. In PyMuPDF this corresponds to ``doc.save(filename, garbage=3, deflate=1)``.



Close
======
In some situations it is desirable to "close" a :ref:`Document` such that it becomes fully available again to the OS while your program is still running.

This can be achieved by the :meth:`Document.close` method. Apart from closing the underlying file, buffer areas associated with the document will be freed. If the document has been created from memory data, no underlying file is opened by MuPDF, so only the buffer release will take place.

.. CAUTION:: As with normal file objects, after close, the document and all objects referencing it will be invalid  and **must no longer be used**. This bindings protect against most such invalid uses by disabling properties and methods of the :ref:`Document` and any associated :meth:`Document.loadPage` objects.

However, re-opening a previously closed file by a new :ref:`Document` is no problem. Have a look at the following valid example:
::
 doc = fitz.Document(f_old)           # open a document
 <... some statements ...>            # e.g. decryption
 doc.save(fnew, garbage=3, deflate=1) # save a cleaned version
 doc.close()                          # close input file
 os.remove(f_old)                     # remove it
 os.rename(f_new, f_old)              # rename the cleaned version
 doc = fitz.Document(f_old)           # use it as input

Example: Dynamically Clean up Corrupt PDF Documents
========================================================
This shows a potential use of PyMuPDF with another Python PDF library (``pdfrw``).

If a PDF is broken or needs to be decrypted, one could dynamically invoke PyMuPDF to recover from problems like so:
::
 import sys
 from pdfrw import PdfReader
 import fitz
 from cStringIO import StringIO

 #---------------------------------------
 # 'tolerant' PDF reader
 #---------------------------------------
 def reader(fname):
     ifile = open(fname, "rb")
     idata = ifile.read()                    # put in memory
     ifile.close()
     ibuffer = StringIO(idata)               # convert to stream
     try:
         return PdfReader(ibuffer)           # let us try
     except:                                 # problem! heal it with PyMuPDF
         doc = fitz.open("application/pdf",
                         bytearray(idata))   # scan pdf data in memory
         doc.save("temp.pdf",
                  garbage=3,
                  deflate=1)                 # save cleaned version
         ifile = open("test.pdf", "rb")      # open it
         idata = ifile.read()                # put in memory
         ifile.close()
         ibuffer = StringIO(idata)           # convert to stream
         return PdfReader(ibuffer)           # let pdfrw retry
 #---------------------------------------

 pdf = reader(sys.argv[1])
 print pdf.Info
 # do further processing

With the command line utility ``pdftk`` a similar result can be achieved, see `here <http://www.overthere.co.uk/2013/07/22/improving-pypdf2-with-pdftk/>`_. It even supports buffers for input **and** output. However you must invoke it as a separate process via ``subprocess.Popen``, using stdin and stdout as communication vehicles.