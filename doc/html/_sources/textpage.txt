.. raw:: pdf

    PageBreak

.. _TextPage:

================
TextPage
================

``TextPage`` represents the text of a page.

============================== ==============================================
**Method**                     **Short Description**
============================== ==============================================
:meth:`TextPage.extractText`   Extract the page's plain text
:meth:`TextPage.extractHTML`   Extract the page's text in HTML format
:meth:`TextPage.extractJSON`   Extract the page's text in JSON format
:meth:`TextPage.extractXML`    Extract the page's text in XML format
:meth:`TextPage.search`        Search for a string in the page
============================== ==============================================

**Class API**

.. class:: TextPage

   .. method:: extractText(basic=0)

      Extract the text from a ``TextPage`` object. Returns a string of the page's complete text. If the default value 0 for ``basic`` is used, the text is returned as close as possible to its natural reading order (top-left to bottom-right), and **unicode** encoded. This is based on the output of ``extractXML``, see below. Usage of ``basic=1`` is provided primarily for debugging purposes. In this case no attempt is being made to adhere to a natutal reading sequence, instead the text is returned in the same sequence as the PDF creator specified it. In addition, in this case, the text string is UTF-8 encoded (as it is an original MuPDF value).

	  :param ``basic``: An integer specifying whether basic (``1 (True)``) or advanced text output (the default) should be provided.
	  :type ``basic``: int
      :rtype: string

   .. method:: extractHTML()

      Extract the text from a ``TextPage`` object in HTML format. This version contains some more formatting information about how the text is being dislayed on the page. See the tutorial chapter for an example.

      :rtype: string

   .. method:: extractJSON()

      Extract the text from a ``TextPage`` object in JSON format. This version contains significantly more formatting information about how the text is being dislayed on the page. It is almost as complete as the ``extractXML`` version, except that positioning information is detailed down to the span level, not a single character. See the tutorial chapter for an example.

      :rtype: string

   .. method:: extractXML()

      Extract the text from a ``TextPage`` object in XML format. This contains complete formatting information about every single text character on the page: font, size, line, paragraph, location, etc. This may easily reach several hundred kilobytes of uncompressed data for a text oriented page. See the tutorial chapter for an example.

      :rtype: string

   .. method:: search(string, hit_max = 16)

      Search for the string ``string``.

      :param `string`: The string to search for.
      :type `string`: string

      :param `hit_max`: Maximum number of expected hits (default 16).
      :type `hit_max`: int

      :rtype: list
      :returns: A python list. If not empty, each element of the list is a :ref:`Rect` (without transformation) surrounding a found ``string`` occurrence.

