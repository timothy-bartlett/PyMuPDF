.. raw:: pdf

    PageBreak

.. _Rect:

==========
Rect
==========

``Rect`` represents a rectangle defined by its top left and its bottom right :ref:`Point` objects, in coordinates: ((x0, y0), (x1, y1)). Respectively, a rectangle can be defined in one of the four ways: as a pair of :ref:`Point` objects, as a tuple of four coordinates, or as an arbitrary combination of these.

Rectangle borders are always in parallel with the respective X- and Y-axes.
A rectangle is called "finite" if x0 <= x1 and y0 <= y1 is true, else "infinite".


=========================== =========================================================================
**Methods / Attributes**    **Short Description**
=========================== =========================================================================
:meth:`Rect.round`          creates the smallest :ref:`Irect` containing ``Rect``
:meth:`Rect.transform`      transform rectangle with a :ref:`Matrix`
:meth:`Rect.getRectArea`    calculate the area of the rectangle
:attr:`Rect.height`         ``Rect`` height
:attr:`Rect.width`          ``Rect`` width
:attr:`Rect.x0`             Top left corner's X-coordinate
:attr:`Rect.y0`             Top left corner's Y-coordinate
:attr:`Rect.x1`             Bottom right corner's X-coordinate
:attr:`Rect.y1`             Bottom right corner's Y-coordinate
=========================== =========================================================================

**Class API**

.. class:: Rect

   .. method:: __init__(self, x0, y0, x1, y1)

      Constructor. Without parameters will create the empty rectangle ``Rect(0.0, 0.0, 0.0, 0.0)``.

   .. method:: __init__(self, p1, p2)

   .. method:: __init__(self, p1, x1, y1)

   .. method:: __init__(self, x0, y0, p2)

      Overloaded constructors: p1, p2 stand for :ref:`Point` objects, while the other parameters mean float coordinates.

   .. method:: round()

      Creates the smallest :ref:`IRect` that contains ``Rect``. This is **not** simply the same as rounding each of the rectangle's coordinates! Look at the example below.

      :rtype: :ref:`IRect`

   .. method:: transform(m)

      Transforms ``Rect`` with a :ref:`Matrix`.

      :param `m`: The matrix to be used for the transformation.
      :param `m`: :ref:`Matrix`
      :rtype: :ref:`Rect`

   .. method:: getRectArea(unit = 'pt')

      Calculates the area of the rectangle. The area of an infinite rectangle is always zero. So, at least one of ``fitz.Rect(p1, p2)`` and ``fitz.Rect(p2, p1)`` has a zero area.

      :param `unit`: Specify required unit: ``pt`` (pixel points, default) or ``mm`` (square millimeters).
      :type `unit`: string
      :rtype: float

   .. attribute:: width

      Contains the width of the rectangle. Equals ``x1 - x0``.

      :rtype: float

   .. attribute:: height

      Contains the height of the rectangle. Equals ``y1 - y0``.

      :rtype: float

   .. attribute:: x0

      X-coordinate of the top left corner.

      :type: float

   .. attribute:: y0

      Y-coordinate of the top left corner.

      :type: float

   .. attribute:: x1

      X-coordinate of the bottom right corner.

      :type: float

   .. attribute:: y1

      Y-coordinate of the bottom right corner.

      :type: float


**Example 1:**
::
 Python 2.7.9 (default, Dec 10 2014, 12:24:55) [MSC v.1500 32 bit (Intel)] on win32
 Type "copyright", "credits" or "license()" for more information.
 >>> import fitz
 >>> p1 = fitz.Point(10, 10)
 >>> p2 = fitz.Point(300, 450)
 >>> fitz.Rect(p1, p2)
 fitz.Rect(10.0, 10.0, 300.0, 450.0)
 >>> fitz.Rect(10, 10, 300, 450)
 fitz.Rect(10.0, 10.0, 300.0, 450.0)
 >>> fitz.Rect(10, 10, p2)
 fitz.Rect(10.0, 10.0, 300.0, 450.0)
 >>> fitz.Rect(p1, 300, 450)
 fitz.Rect(10.0, 10.0, 300.0, 450.0)
 >>>

**Example 2:**
::
 Python 2.7.9 (default, Dec 10 2014, 12:24:55) [MSC v.1500 32 bit (Intel)] on win32
 Type "copyright", "credits" or "license()" for more information.
 >>> import fitz
 >>> r = fitz.Rect(0.5, -0.01, 123.88, 455.123456)
 >>> r
 fitz.Rect(0.5, -0.009999999776482582, 123.87999725341797, 455.1234436035156)
 >>> r.round()
 fitz.IRect(0, -1, 124, 456)
 >>>

As can be seen, all of the following evaluate to ``True``: ``r.round().x0 == int(math.floor(r.x0))``, ``r.round().y0 == int(math.floor(r.y0))``, ``r.round().x1 == int(math.ceil(r.x1))`` and ``r.round().y1 == int(math.ceil(r.y1))``.