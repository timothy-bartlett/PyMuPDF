.. raw:: pdf

    PageBreak

.. _Page:

================
Page
================

Class representing one document page. Can only be created by :meth:`Document.loadPage`, there is no separate constructor defined.


======================== ====================================
**Method / Attribute**   **Short Description**
======================== ====================================
:meth:`Page.bound`       the page's rectangle
:meth:`Page.loadLinks`   get the first link of the page
:meth:`Page.getLinks`    get all links of the page
:meth:`Page.getText`     extract the text of the page
:meth:`Page.getPixmap`   create a ``Pixmap`` from the page
:meth:`Page.searchFor`   search for a string on the page
:meth:`Page.run`         run a page through a device
:attr:`Page.number`      page number
:attr:`Page.parent`      the owning document object
======================== ====================================

**Class API**

.. class:: Page

   .. method:: bound()

      Determine the a page's rectangle (before transformation).

      :rtype: :ref:`Rect`

   .. method:: loadLinks()

      Get the first link of a page.

      :rtype: :ref:`Link`
      :returns: A :ref:`Link` or ``None`` if the page has no links.

   .. method:: getLinks()

      Retrieves **all** links of a page.

      :rtype: list
      :returns: A list of dictionaries or ``[]``. The entries are in the order as specified during PDF generation.

   .. method:: getText(output = 'text')

      Retrieves the text of a page. Depending on the output parameter, the results of the :ref:`TextPage` extract methods are returned.

      If ``output = 'text'`` is specified, the text is returned in the order as specified during PDF creation (which is not necessarily the normal reading order). As this may not always look like expected, consider using the example program ``PDF2TextJS.py``. It is based on ``extractJSON()`` and re-arranges text according to the Western reading layout convention "from top-left to bottom-right".

      :param `output`: A string indicating the requested text format, one of ``text`` (default), ``html``, ``json``, or ``xml``.

      :type `output`: string

      :rtype: string
      :returns: The page's text as one string.

   .. method:: getPixmap(matrix = fitz.Identity, colorspace = "RGB", clip = None)

     Creates a Pixmap from the page.

     :param `matrix`: A :ref:`Matrix` object. Default is the :ref:`Identity` matrix.

     :type `matrix`: :ref:`Matrix`

     :param `colorspace`: Defines the required colorspace, one of ``GRAY``, ``CMYK`` or ``RGB`` (default).

     :type `colorspace`: string

     :param `clip`: An ``Irect`` to restrict rendering of the page to the rectangle's area. If not specified, the complete page will be rendered.

     :type `clip`: :ref:`IRect`

     :rtype: :ref:`Pixmap`

     :returns: Pixmap of the page.

   .. method:: searchFor(text, hit_max = 16)

      Searches for ``text`` on a page. Identical to :meth:`TextPage.search`.

      :param `text`: Text to searched for. Upper / lower case is ignored.

      :type `text`: string

      :param `hit_max`: Maximum number of occurrences accepted.

      :type `hit_max`: int

      :rtype: list

      :returns: A list of :ref:`Rect` rectangles each of which surrounds one occurrence of ``text``.

   .. method:: run(dev, transform)

      Run a page through a device.

      :param `dev`: Device, obtained from one of the :ref:`Device` constructors.
      :type `dev`: :ref:`Device`

      :param `transform`: Transformation to apply to the page. Set it to :ref:`Identity` if no transformation is desired.
      :type `transform`: :ref:`Matrix`

   .. attribute:: number

      The page number

      :rtype: int

   .. attribute:: parent

      The owning document object.

      :rtype: :ref:`Document`

