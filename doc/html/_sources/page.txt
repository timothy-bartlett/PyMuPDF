.. raw:: pdf

    PageBreak

.. _Page:

================
Page
================

Page interface, created by :meth:`Document.loadPage`.


======================== ====================================
**Method / Attribute**   **Short Description**
======================== ====================================
:meth:`Page.bound`       the page's rectangle
:meth:`Page.loadLinks`   get the first link of a page
:meth:`Page.getLinks`    get all links of a page
:meth:`Page.getText`     extract the text of a page
:meth:`Page.getPixmap`   create a ``Pixmap`` for the page
:meth:`Page.searchFor`   search for a string on a page
:meth:`Page.run`         run a page through a device
:attr:`Page.number`      page number
======================== ====================================

**Class API**

.. class:: Page

   .. method:: bound()

      Determine the a page's rectangle (before transformation).

      :rtype: :ref:`Rect`

   .. method:: loadLinks()

      Get the first link of a page.

      :rtype: :ref:`Link`
      :returns: A :ref:`Link` or ``None`` if the page has no links.

   .. method:: getLinks()

      Retrieves **all** links of a page.

      :rtype: list
      :returns: A list of dictionaries or ``[]``. Please note that the links are in the order as specified during PDF generation, not necessarily in any "natural" reading order.

   .. method:: getText(output = 'text')

      Retrieves the text of a page. Depending on the output parameter, the results of the :ref:`TextPage` extract methods are returned. The required objects :ref:`TextSheet`, :ref:`DisplayList`, :ref:`Device` and :ref:`TextPage` are automatically created or reused if present.

      If ``output = 'text'`` is specified, the text is returned in the order as specified during PDF creation (which is not necessarily the normal reading order). As this may not always look like expected, consider using the example program ``PDF2TextJS.py``. It is based on ``extractJSON()`` output and re-arranges text according to the Western reading layout convention "from top-left to bottom-right".

      In an earlier version, we provided a different taste of :meth:`TextPage.extractText` (parameter ``basic=False``), which did a similar job. However, the example program mentioned above is more than 50 times faster, so we deleted this option.

      :param `output`: A string indicating the requested text format, one of ``text`` (default), ``html``, ``json``, or ``xml``.

      :type `output`: string

      :rtype: string
      :returns: The page's text as one string.

   .. method:: getPixmap(matrix = fitz.Identity, colorspace = "RGB")

     Creates a Pixmap from a given page. The  method will automatically create or reuse a :ref:`DisplayList` for the page and also create the required drawing :ref:`Device`.

     :param `matrix`: A :ref:`Matrix` object. Default is the :ref:`Identity` matrix.

     :type `matrix`: :ref:`Matrix`

     :param `colorspace`: Defines the required colorspace, one of ``GRAY``, ``CMYK`` or ``RGB`` (default).

     :type `colorspace`: string

     :rtype: :ref:`Pixmap`

     :returns: Pixmap of the page.

   .. method:: searchFor(text, hit_max = 16)

      Searches for ``text`` on a page. Identical to :meth:`TextPage.search`.

      :rtype: list
      :returns: A list of :ref:`Rect` rectangles each of which surrounds one occurrence of ``text``.

   .. method:: run(dev, transform)

      Run a page through a device.

      :param `dev`: Device, obtained from one of the :ref:`Device` constructors.
      :type `dev`: :ref:`Device`

      :param `transform`: Transformation to apply to the page. May include for example scaling and rotation, see :meth:`Matrix.preScale` and :meth:`Matrix.preRotate`. Set it to :ref:`Identity` if no transformation is desired.
      :type `transform`: :ref:`Matrix`

   .. attribute:: number

      The page number

      :rtype: int

