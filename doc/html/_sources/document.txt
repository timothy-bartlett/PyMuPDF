.. raw:: pdf

    PageBreak

.. _Document:

================
Document
================

This class represents a document. It can be constructed from a file or from memory. See below for details.

Since version 1.9.0 there exists an alias ``open`` for this class.

=============================== =====================================================
**Method / Attribute**          **Short Description**
=============================== =====================================================
:meth:`Document.authenticate`   decrypts the document
:meth:`Document.loadPage`       reads a page
:meth:`Document.save`           saves a copy of the document
:meth:`Document.getToC`         create a table of contents
:meth:`Document.getPagePixmap`  create a pixmap from a page by its number
:meth:`Document.getPageText`    extracts the text of a page by its number
:meth:`Document.getPermits`     show permissions to access the document
:meth:`Document.close`          closes the document
:meth:`Document.select`         selects pages from a document, discards the rest
:attr:`Document.isClosed`       has document been closed?
:attr:`Document.outline`        first `Outline` item
:attr:`Document.name`           filename of document
:attr:`Document.needsPass`      require password to access data?
:attr:`Document.isEncrypted`    is document still encrypted?
:attr:`Document.pageCount`      the document's number of pages
:attr:`Document.metadata`       the document's meta data
=============================== =====================================================

**Class API**

.. class:: Document

    .. method:: __init__(self, filename)

      Constructs a ``Document`` object from a file.

      :param `filename`: A string (UTF-8 or unicode) containing the path / name of the document file to be used. The file will be opened and remain open until either explicitely closed (see below) or until end of program.
      :type `filename`: string

      :rtype: :ref:`Document`
      :returns: A ``Document`` object.

    .. method:: __init__(self, filetype, stream=data, streamlen=len(data))

      Constructs a ``Document`` object from memory data.

      :param `filetype`: A string specifying the type of document contained in ``stream``. This may be either something that looks like a filename (e.g. ``x.pdf``), in which case MuPDF uses the extension to determine the type, or a mime type like ``application/pdf``. Recommended is using the filename scheme, or even the name of the original file for documentation purposes.
      :type `filetype`: string

      :param `stream`: A string of data representing the content of a supported document type.
      :type `stream`: string

      :param `streamlen`: An integer specifying the length of the stream.
      :type `streamlen`: int

      :rtype: :ref:`Document`
      :returns: A ``Document`` object.

    .. method:: authenticate(password)

      Decrypts the document with the string ``password``. If successfull, all of the document's data can be accessed (e.g. for rendering).

      :param `password`: The password to be used.
      :type `password`: string

      :rtype: int
      :returns: ``True (1)`` if decryption with ``password`` was successfull, ``False (0)`` otherwise.

    .. method:: loadPage(number)

      Loads a ``Page`` for further processing like rendering, text searching, etc. See the :ref:`Page` object.

      :param `number`: page number, zero-based (0 is the first page of the document).
      :type `number`: int

      :rtype: :ref:`Page`

    .. method:: getToC(simple = True)

      Creates a table of contents out of the document's outline chain.

      :param `simple`: Indicates whether a detailed ToC is required. If ``simple = False`` is specified, each entry of the list also contains a dictionary with :ref:`Link` details for each outline entry.

      :type `simple`: boolean

      :rtype: list

    .. method:: getPagePixmap(pno, matrix = fitz.Identity, colorspace = "rgb", clip = None)

      Creates a pixmap from one of the document's pages - identified by number ``pno`` (zero-based).

      :param `pno`: Page number, zero-based

      :type `pno`: int

      :param `matrix`: A transformation matrix - default is :ref:`Identity`.

      :type `matrix`: Matrix

      :param `colorspace`: A string specifying the requested colorspace - default is ``rgb``.

      :type `colorspace`: string

      :param `clip`: An ``Irect`` to restrict rendering of the page to the rectangle's area. If not specified, the complete page will be rendered.

      :type `clip`: :ref:`IRect`

      :rtype: :ref:`Pixmap`

    .. method:: getPageText(pno, output = "text")

      Extracts the text of a page given its page number ``pno`` (zero-based).

      :param `pno`: Page number, zero-based

      :type `pno`: int

      :param `output`: A string specifying the requested output format: text, html, json or xml. Default is ``text``.

      :type `output`: string

      :rtype: String

    .. method:: getPermits()

      Shows the permissions to access the document. Returns a dictionary likes this:
      ::
       >>> doc.getPermits()
       {'print': True, 'edit': True, 'note': True, 'copy': True}
       >>>

      The keys have the obvious meaning of permissions to print, change, annotate and copy the document, respectively.

      :rtype: dict

    .. method:: select(list)

      Retains only those pages in the document that occur in the list. Empty lists or elements outside the range ``0 <= page < doc.pageCount`` will cause a ``ValueError``. For more details see remarks at the bottom or this chapter. Only PDF documents are supported by this method.

      :param `list`: A list (or tuple) of integers (zero-based) naming the pages to be included. Pages not occurring in the list will be deleted (from memory) and become unavailable until the document is reopened. Page numbers can occur multiple times and be in any order.

      :type `list`: list

      :rtype: int

    .. method:: save(outfile, garbage=0, clean=0, deflate=0, incremental=0, ascii=0, expand=0, linear=0)

      Saves a copy of the document under the name ``outfile``. Include path specifications as necessary. Only PDF documents are supported by this function. Internally the document may have changed. E.g. after a successfull ``authenticate``, a decrypted copy will be saved, and, in addition (even without any of the optional parameters), some basic cleaning of the document data could also have occurred, e.g. broken xref tables have been corrected and incremental changes have been resolved.

      :param `outfile`: The file name to save to. Must be different from the original ``filename`` / ``filetype`` value or else a ValueError will be raised.
      :type `outfile`: string

      :param `garbage`: Do garbage collection: 0 = none, 1 = remove unused objects, 2 = in addition compact xref tables, 3 = in addition merge duplicate objects.
      :type `garbage`: int

      :param `clean`: Clean content streams: 0 = False, 1 = True.
      :type `clean`: int

      :param `deflate`: Deflate uncompressed streams: 0 = False, 1 = True.
      :type `deflate`: int

      :param `incremental`: Only save changed objects: 0 = False, 1 = True.
      :type `incremental`: int

      :param `ascii`: Where possible make the output ASCII: 0 = False, 1 = True.
      :type `ascii`: int

      :param `expand`: One byte bitfield to decompress contents: 0 = none, 1 = images, 2 = fonts, 255 = all. This convenience option generates a decompressed file version that can be better read by some other programs.
      :type `expand`: int

      :param `linear`: Save a linearised version of the document: 0 = False, 1 = True. This option creates a file format for improved performance when read via internet connections.
      :type `linear`: int

      :rtype: int
      :returns: Count of errors that occurred during save. Note: PyMuPDF will recover from many errors encountered in a PDF and continue processing.

    .. method:: close()

      Releases space allocations associated with the document, and, if created from a file, closes ``filename`` thus releasing control of it to the OS.

    .. attribute:: outline

      Contains either ``None`` or the first :ref:`Outline` entry of the document. Can be used as a starting point to walk through all outline items. If an encrypted document has not yet been authenticated, an ``AttributeError`` exception will be raised, when this attribute is being accessed.

      :rtype: :ref:`Outline`

    .. attribute:: isClosed

      ``False (0)`` if document is still open, ``True (1)`` otherwise. If closed, most other attributes and all methods will have been deleted / disabled. In addition, :ref:`Page` objects referring to this document (i.e. created with :meth:`Document.loadPage`) will no longer be usable. For reference purposes, :attr:`Document.name` still exists and will contain the filename of the original document.

      :rtype: int

    .. attribute:: needsPass

      Contains an indicator showing whether the document is encrypted (``True = 1``) or not (``False = 0``). This indicator remains unchanged - even after the document has been authenticated.

      :rtype: bool

    .. attribute:: isEncrypted

      This indicator initially equals the value of ``needsPass``. After a successfull authentification, it is set to ``False = 0`` to reflect the situation.

      :rtype: bool

    .. Attribute:: metadata

      Contains the document's meta data as a Python dictionary or ``None`` if the document is encrypted. Its keys are ``format``, ``encryption``, ``title``, ``author``, ``subject``, ``keywords``, ``creator``, ``producer``, ``creationDate``, ``modDate``. All item values are strings or ``None``.

      Except ``format`` and ``encryption``, the key names correspond in an obvious way to a PDF's "official" meta data fields ``/Creator``, ``/Producer``, ``/CreationDate``, ``/ModDate``, ``/Title``, ``/Author``, ``/Subject``, ``/Keywords`` respectively.

      The value of ``format`` contains the version of the PDF format (e.g. 'PDF-1.6').

      The value of ``encryption`` either contains ``None`` (not encrypted), or a string naming the used encryption method (e.g. ``'Standard V4 R4 128-bit RC4'``).

      If the date fields contain meaningfull data (which need not be the case), they are strings in the PDF-internal timestamp format "D:<TS><TZ>", where

      <TS> is the 12 character ISO timestamp ``YYYMMDDhhmmss`` (``YYYY`` - year, ``MM`` - month, ``DD`` - day, ``hh`` - hour, ``mm`` - minute, ``ss`` - second), and

      <TZ> is a time zone value (time intervall relative to GMT) containing a sign ('+' or '-'), the hour (``hh``), and the minute (``'mm'``, attention: enclose in apostrophies!).

      E.g a Venezuelan value might look like ``D:20150415131602-04'30'``, which corresponds to the timestamp April 15, 2015, at 1:16:02 pm local time Venezuela.

      :rtype: dict

    .. Attribute:: name

      Contains the ``filename`` or ``filetype`` value with which ``Document`` was created.

      :rtype: string

    .. Attribute:: pageCount

      Contains the number of pages of the document. May return 0 for documents with no pages.

      :rtype: int

Remarks on ``select()``
------------------------

Page numbers in the list need not be unique nor be in any particular sequence. This makes the method a versatile utility to e.g. select only even or odd pages, re-arrange a document from back to front, duplicate it, and so forth. In combination with text extraction you can also omit / include pages with no text or certain text, etc.

You can execute several selections in a row. The document structure will be kept updated.

.. CAUTION:: This also means, that any document information from before this method must be assumed to be invalid. This is especially true for old page objects, table of contents and the ``pageCount`` property. If you plan to use the ``close()`` method, make sure you have deleted any page object created before (by ``page = None``).

Any of those actions will become permanent only with a ``doc.save()``. If you have deleted pages, do not forget to specify the ``garbage=3`` option to eventually reduce the resulting document's size.

It should also be noted, that this method **preserves all links, annotations and bookmarks** that are still valid. In other words: deleting pages only deletes those references that would otherwise point to nowhere.

Examples
---------

Create a document copy deleting pages with no text:
::
 import fitz
 doc = fitz.open("any.pdf")
 r = list(range(doc.pageCount))                 # list of all pages

 for p in fitz.Pages(doc):
     if not p.getText():                        # contains no text
         r.remove(p.number)                     # remove page number from list
     p = None                                   # release page memory

 doc.select(r)                                  # apply the list
 doc.save("out.pdf", garbage=3)                 # save the resulting PDF


Create a sub document with the odd pages:
::
 import fitz
 doc = fitz.open("any.pdf")
 r = [i for i in list(range(doc.pageCount)) if i%2 > 0]
 doc.select(r)                                  # apply the list
 doc.save("any-odd.pdf", garbage=3)             # save PDF with the odd pages


Concatenate a document with itself:
::
 import fitz
 doc = fitz.open("any.pdf")
 r = list(range(doc.pageCount))
 r += r                                         # turn PDF into a copy of itself
 doc.select(r)
 doc.save("out.pdf")                            # contains pages 0,...,n,0,...,n of <any.pdf>

Create document copy in reverse page order (well, don't try with a million pages):
::
 import fitz
 doc = fitz.open("any.pdf")
 r = list(range(doc.pageCount-1, -1, -1))
 doc.select(r)
 doc.save("out.pdf")
