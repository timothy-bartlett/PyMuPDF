.. raw:: pdf

    PageBreak

.. _Document:

================
Document
================

This class represents a document and is constructed by ``fitz.Document(filename)``. This will also **open** the document specified as ``filename``. Returns a ``Document`` object.

=============================== ================================
**Method / Attribute**          **Short Description**
=============================== ================================
:meth:`Document.authenticate`   Decrypts the document
:meth:`Document.loadPage`       Reads a page
:meth:`Document.save`           Saves a copy of the document
:meth:`Document.ToC`            Creates a table of contents
:meth:`Document.close`          Closes the document
:attr:`Document.isClosed`       Has document been closed?
:attr:`Document.outline`        First `Outline` item
:attr:`Document.name`           filename of document
:attr:`Document.needsPass`      Is document is encrypted?
:attr:`Document.pageCount`      The document's number of pages
:attr:`Document.metadata`       The document's meta data
=============================== ================================

**Class API**

.. class:: Document

    .. method:: authenticate(password)

      Decrypts the document with the string ``password``. If successfull, the document's data can be accessed (e.g. for rendering).

      :param `password`: The password to be used.
      :type `password`: string

      :rtype: int
      :returns: ``True (1)`` if decryption with ``password`` was successfull, ``False (0)`` otherwise.

    .. method:: loadPage(number)

      Loads a ``Page`` for further processing like rendering, text searching, etc. See the :ref:`Page` object.

      :param `number`: page number, zero-based (0 is the first page of the document).
      :type `number`: int

      :rtype: :ref:`Page`

    .. method:: save(filename, garbage = 0, clean = 0, deflate = 0)

      Saves a copy of the document under ``filename`` (include path specifications as necessary). Internally the document may have changed. E.g. after a successfull ``authenticate``, an unencrypted copy will be saved, and, in addition (even without any of the optional parameters), some basic cleaning of the document data will also occur, e.g. broken xref tables will be corrected as far as possible.

      :param `filename`: The filename to save to. Must be different from the original file name or else a ValueError will be raised.
      :type `filename`: string

      :param `garbage`: Do garbage collection: 0 = none, 1 = remove unused objects, 2 = in addition compact xref tables, 3 = in addition merge duplicate objects.
      :type `garbage`: int

      :param `clean`: Clean content streams: 0 = False, 1 = True.
      :type `clean`: int

      :param `deflate`: Deflate uncompressed streams: 0 = False, 1 = True.
      :type `deflate`: int

      :rtype: int
      :returns: Count of errors during save.

    .. method:: ToC()

      A convenience function that creates a table of contents from the ``outline`` entries. If none exist ``[]`` will be returned, otherwise a Python list ``[[level, title, page], [...], ...]``. Note that the title entries have already been decoded to unicode here.

      :rtype: list

    .. method:: close()

      Closes ``filename`` thus freeing it for other purposes.

    .. attribute:: outline

      Contains either ``None`` or the first :ref:`Outline` entry of the document. Can be used as a starting point to walk through all outline items.

      :rtype: :ref:`Outline`

    .. attribute:: isClosed

      ``False (0)`` if document is still open, ``True (1)`` otherwise. In the latter case, several attributes and all methods will have been deleted / disabled. In addition, :ref:`Page` objects created with :meth:`Document.loadPage` will no longer be usable. For reference purposes, :attr:`Document.name` still exists and will contain the filename of the original document.

      :rtype: int

    .. attribute:: needsPass

      Contains an indicator showing whether the document is encrypted (``True`` (``1``)) or not (``False`` (``0``)).

      :rtype: bool

    .. Attribute:: metadata

      Contains the document's meta data as a Python dictionary. Its keys are ``format``, ``encryption``, ``title``, ``author``, ``subject``, ``keywords``, ``creator``, ``producer``, ``creationDate``, ``modDate``. For the most part, these key names in an obvious way correspond to the PDF's "official" meta data fields ``/Creator``, ``/Producer``, ``/CreationDate``, ``/ModDate``, ``/Title``, ``/Author``, ``/Subject``, ``/Keywords`` respectively. ``format`` contains the PDF format version of the file (e.g. 'PDF 1.4'), ``encryption`` contains either ``None`` when not encrypted, or a string naming the encryption method used (e.g. ``'Standard V4 R4 128-bit RC4'``). Note that all other metadata values are encrypted if the value for 'encoding' is not ``None``. All item values are UTF-8 encoded strings (or ``None``), except ``keywords``. If ``keywords`` is not ``None``, it contains a Python dictionary specifying the document's keywords (again, as UTF-8 encoded strings). The date fields are strings with the PDF-internal timestamp format "D:<DateTime><TZ>", where <DateTime> is the 12 character ISO date ``YYYMMDDhhmmss`` (``YYYY`` - year, ``MM`` - month, ``DD`` - day, ``hh`` - hour, ``mm`` - minute, ``ss`` - second), and <TZ> is a time zone value (time intervall relative to GMT) containing a sign ('+' or '-'), the hour (``hh``), and minute (``'mm'``, attention: enclose in apostrophies!). For example, a Venezuelan value might look like ``D:20150415131602-04'30'``, which corresponds to the timestamp April 15, 2015, at 1:16:02 pm local time Venezuela.

      :rtype: dict

    .. Attribute:: name

      Contains the ``filename`` value with which ``Document`` was created.

      :rtype: string

    .. Attribute:: pageCount

      Contains the number of pages of the document. May return 0 for documents with no pages.

      :rtype: int
