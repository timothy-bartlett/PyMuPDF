.. raw:: pdf

    PageBreak

.. _Document:

================
Document
================

This class represents a document. It can be constructed from a file or from memory. See below for details.

=============================== ================================
**Method / Attribute**          **Short Description**
=============================== ================================
:meth:`Document.authenticate`   Decrypts the document
:meth:`Document.loadPage`       Reads a page
:meth:`Document.save`           Saves a copy of the document
:meth:`Document.ToC`            Creates a table of contents
:meth:`Document.close`          Closes the document
:attr:`Document.isClosed`       Has document been closed?
:attr:`Document.outline`        First `Outline` item
:attr:`Document.name`           filename of document
:attr:`Document.needsPass`      Is document is encrypted?
:attr:`Document.pageCount`      The document's number of pages
:attr:`Document.metadata`       The document's meta data
=============================== ================================

**Class API**

.. class:: Document

    .. method:: __init__(self, filename)

      Constructs a ``Document`` object from a file.

      :param `filename`: A string (UTF-8 or unicode) containing the path / name of the document file to be used. The file will be opened and remain open until either explicitely closed (see below) or until end of program.
      :type `filename`: string

      :rtype: :ref:`Document`
      :returns: A ``Document`` object.

    .. method:: __init__(self, filetype, stream=data, streamlen=len(data))

      Constructs a ``Document`` object from memory data.

      :param `filetype`: A string specifying the type of document contained in ``stream``. This may be either something that looks like a filename (e.g. ``x.pdf``), in which case MuPDF uses the extension to determine the type, or a mime type like ``application/pdf``. Recommended is using the filename scheme, or even the name of the original file for documentation purposes.
      :type `filetype`: string

      :param `stream`: A string of data representing the content of a supported document type.
      :type `stream`: string

      :param `streamlen`: An integer specifying the length of the stream.
      :type `streamlen`: int

      :rtype: :ref:`Document`
      :returns: A ``Document`` object.

    .. method:: authenticate(password)

      Decrypts the document with the string ``password``. If successfull, the document's data can be accessed (e.g. for rendering).

      :param `password`: The password to be used.
      :type `password`: string

      :rtype: int
      :returns: ``True (1)`` if decryption with ``password`` was successfull, ``False (0)`` otherwise.

    .. method:: loadPage(number)

      Loads a ``Page`` for further processing like rendering, text searching, etc. See the :ref:`Page` object.

      :param `number`: page number, zero-based (0 is the first page of the document).
      :type `number`: int

      :rtype: :ref:`Page`

    .. method:: save(outfile, garbage=0, clean=0, deflate=0, incremental=0, ascii=0, expand=0, linear=0)

      Saves a copy of the document under ``outfile`` (include path specifications as necessary). Internally the document may have changed. E.g. after a successfull ``authenticate``, a decrypted copy will be saved, and, in addition (even without any of the optional parameters), some basic cleaning of the document data will also have occurred, e.g. broken xref tables will have been corrected as far as possible.

      :param `outfile`: The file name to save to. Must be different from the original ``filename`` / ``filetype`` value or else a ValueError will be raised.
      :type `outfile`: string

      :param `garbage`: Do garbage collection: 0 = none, 1 = remove unused objects, 2 = in addition compact xref tables, 3 = in addition merge duplicate objects.
      :type `garbage`: int

      :param `clean`: Clean content streams: 0 = False, 1 = True.
      :type `clean`: int

      :param `deflate`: Deflate uncompressed streams: 0 = False, 1 = True.
      :type `deflate`: int

      :param `incremental`: Only save changed objects: 0 = False, 1 = True.
      :type `incremental`: int

      :param `ascii`: Where possible make the output ASCII: 0 = False, 1 = True.
      :type `ascii`: int

      :param `expand`: One byte bitfield to decompress contents: 0 = none, 1 = images, 2 = fonts, 255 = all. This convenience option generates a decompressed file version that can be better read by some other programs.
      :type `expand`: int

      :param `linear`: Save a linearised version of the document: 0 = False, 1 = True. This option creates a file format for improved performance when read via internet connections.
      :type `linear`: int

      :rtype: int
      :returns: Count of errors that occurred during save. Note: PyMuPDF will recover from many errors encountered in a PDF and continue processing.

    .. method:: ToC()

      A convenience function that creates a table of contents from the ``outline`` entries. If none exist ``[]`` will be returned, otherwise a Python list ``[[level, title, page], [...], ...]``. Note that the title entries have already been decoded to unicode here. Page numbers are 1-based, but zero if and only if the entry points to a place outside this document.

      :rtype: list

    .. method:: close()

      Releases space allocations associated with the document, and, if created from a file, closes ``filename`` thus releasing control of it to the OS.

    .. attribute:: outline

      Contains either ``None`` or the first :ref:`Outline` entry of the document. Can be used as a starting point to walk through all outline items.

      :rtype: :ref:`Outline`

    .. attribute:: isClosed

      ``False (0)`` if document is still open, ``True (1)`` otherwise. If closed, most other attributes and all methods will have been deleted / disabled. In addition, :ref:`Page` objects referring to this document (i.e. created with :meth:`Document.loadPage`) will no longer be usable. For reference purposes, :attr:`Document.name` still exists and will contain the filename of the original document.

      :rtype: int

    .. attribute:: needsPass

      Contains an indicator showing whether the document is encrypted (``True = 1``) or not (``False = 0``).

      :rtype: bool

    .. Attribute:: metadata

      Contains the document's meta data as a Python dictionary. Its keys are ``format``, ``encryption``, ``title``, ``author``, ``subject``, ``keywords``, ``creator``, ``producer``, ``creationDate``, ``modDate``. All item values are strings or ``None``.

      Except ``format`` and ``encryption``, the key names correspond in an obvious way to a PDF's "official" meta data fields ``/Creator``, ``/Producer``, ``/CreationDate``, ``/ModDate``, ``/Title``, ``/Author``, ``/Subject``, ``/Keywords`` respectively.

      The value of ``format`` contains the version of the PDF format (e.g. 'PDF-1.6').

      The value of ``encryption`` either contains ``None`` (not encrypted), or a string naming the used encryption method (e.g. ``'Standard V4 R4 128-bit RC4'``). Note that if the document is encrypted, the other meta data values may be encrypted, too.

      If the date fields contain meaningfull data (which need not be the case), they are strings in the PDF-internal timestamp format "D:<TS><TZ>", where

      <TS> is the 12 character ISO timestamp ``YYYMMDDhhmmss`` (``YYYY`` - year, ``MM`` - month, ``DD`` - day, ``hh`` - hour, ``mm`` - minute, ``ss`` - second), and

      <TZ> is a time zone value (time intervall relative to GMT) containing a sign ('+' or '-'), the hour (``hh``), and the minute (``'mm'``, attention: enclose in apostrophies!).

      For example, a Venezuelan value might look like ``D:20150415131602-04'30'``, which corresponds to the timestamp April 15, 2015, at 1:16:02 pm local time Venezuela.

      :rtype: dict

    .. Attribute:: name

      Contains the ``filename`` or ``filetype`` value with which ``Document`` was created.

      :rtype: string

    .. Attribute:: pageCount

      Contains the number of pages of the document. May return 0 for documents with no pages.

      :rtype: int
