.. raw:: pdf

    PageBreak

.. _Document:

================
Document
================

This class represents a document. It can be constructed from a file or from memory. See below for details.

Since version 1.9.0 there exists an alias ``open`` for this class.

=============================== =====================================================
**Method / Attribute**          **Short Description**
=============================== =====================================================
:meth:`Document.authenticate`   decrypt the document
:meth:`Document.loadPage`       read a page
:meth:`Document.save`           save the document
:meth:`Document.getToC`         create a table of contents
:meth:`Document.getPagePixmap`  create a pixmap from a page by its number
:meth:`Document.getPageText`    extract the text of a page by its number
:meth:`Document.getPermits`     show permissions to access the document
:meth:`Document.close`          close the document
:meth:`Document.select`         select a subset of pages
:meth:`Document.setMetadata`    set the metadata
:meth:`Document.setToC`         replace the table of contents (TOC)
:attr:`Document.isClosed`       has document been closed?
:attr:`Document.outline`        first `Outline` item
:attr:`Document.name`           filename of document
:attr:`Document.openErrCode`    > 0 if repair occurred during open
:attr:`Document.openErrMsg`     last error message if openErrCode > 0
:attr:`Document.needsPass`      require password to access data?
:attr:`Document.isEncrypted`    document still encrypted?
:attr:`Document.pageCount`      number of pages
:attr:`Document.metadata`       metadata
=============================== =====================================================

**Class API**

.. class:: Document

    .. method:: __init__(self, filename)

      Constructs a ``Document`` object from ``filename``.

      :param `filename`: A string (UTF-8 or unicode) containing the path / name of the document file to be used. The file will be opened and remain open until either explicitely closed (see below) or until end of program.
      :type `filename`: string

      :rtype: :ref:`Document`
      :returns: A ``Document`` object.

    .. method:: __init__(self, filetype, stream=data, streamlen=len(data))

      Constructs a ``Document`` object from memory ``data``.

      :param `filetype`: A string specifying the type of document contained in ``stream``. This may be either something that looks like a filename (e.g. ``x.pdf``), in which case MuPDF uses the extension to determine the type, or a mime type like ``application/pdf``. Recommended is using the filename scheme, or even the name of the original file for documentation purposes.
      :type `filetype`: string

      :param `stream`: A string of data representing the content of a supported document type.
      :type `stream`: string

      :param `streamlen`: An integer specifying the length of the stream.
      :type `streamlen`: int

      :rtype: :ref:`Document`
      :returns: A ``Document`` object.

    .. method:: authenticate(password)

      Decrypts the document with the string ``password``. If successfull, all of the document's data can be accessed (e.g. for rendering).

      :param `password`: The password to be used.
      :type `password`: string

      :rtype: int
      :returns: ``True (1)`` if decryption with ``password`` was successfull, ``False (0)`` otherwise.

    .. method:: loadPage(number)

      Loads a ``Page`` for further processing like rendering, text searching, etc. See the :ref:`Page` object.

      :param `number`: page number, zero-based (0 is the first page of the document).
      :type `number`: int

      :rtype: :ref:`Page`

    .. method:: getToC(simple = True)

      Creates a table of contents out of the document's outline chain.

      :param `simple`: Indicates whether a detailed ToC is required. If ``simple = False``, each entry of the list also contains a dictionary with :ref:`linkDest` details for each outline entry.

      :type `simple`: boolean

      :rtype: list

    .. method:: getPagePixmap(pno, matrix = fitz.Identity, colorspace = "rgb", clip = None)

      Creates a pixmap from one of the document's pages - identified by number ``pno`` (zero-based).

      :param `pno`: Page number, zero-based

      :type `pno`: int

      :param `matrix`: A transformation matrix - default is :ref:`Identity`.

      :type `matrix`: Matrix

      :param `colorspace`: A string specifying the requested colorspace - default is ``rgb``.

      :type `colorspace`: string

      :param `clip`: An ``Irect`` to restrict rendering of the page to the rectangle's area. If not specified, the complete page will be rendered.

      :type `clip`: :ref:`IRect`

      :rtype: :ref:`Pixmap`

    .. method:: getPageText(pno, output = "text")

      Extracts the text of a page given its page number ``pno`` (zero-based).

      :param `pno`: Page number, zero-based

      :type `pno`: int

      :param `output`: A string specifying the requested output format: text, html, json or xml. Default is ``text``.

      :type `output`: string

      :rtype: String

    .. method:: getPermits()

      Shows the permissions to access the document. Returns a dictionary likes this:
      ::
       >>> doc.getPermits()
       {'print': True, 'edit': True, 'note': True, 'copy': True}
       >>>

      The keys have the obvious meaning of permissions to print, change, annotate and copy the document, respectively.

      :rtype: dict

    .. method:: select(list)

      PDF documents only: Retains only those pages of the document whose numbers occur in the list. Empty lists or elements outside the range ``0 <= page < doc.pageCount`` will cause a ``ValueError``. For more details see remarks at the bottom or this chapter.

      :param `list`: A list (or tuple) of page numbers (zero-based) to be included. Pages not in the list will be deleted (from memory) and become unavailable until the document is reopened. **Page numbers can occur multiple times and be in any order:** the resulting sub-document will reflect the list exactly as specified.

      :type `list`: list

      :rtype: int

    .. method:: setMetadata(m)

      PDF documents only: Sets or updates the metadata of the document as specified in ``m``, a Python dictionary. As with method ``select()``, these changes become permanent only when you save the document.

      :param `m`: A dictionary with keys ``title``, ``author``, ``subject``, ``keywords``, ``creator``, ``producer``, ``creationDate``, and ``modDate``. All keys are optional. A PDF's format and encryption method cannot be set or changed, these keys therefore have no effect and will be ignored. If any value should not contain data, do not specify its key or set the value to ``None``. If you use ``m = {}`` all metadata information will be cleared to ``unspecified``. If you want to selectively change only some values, modify ``doc.metadata`` directly and use it as the argument for this method.

      :type `m`: dict

      :rtype: int
      :returns: ``0`` upon successful execution, otherwise a non-zero integer. ``doc.metadata`` will be updated upon successful execution.

    .. method:: setToC(toc)

      PDF documents only: Replaces the complete current outline tree (table of contents) with a new one. After successful execution, the new outline tree can be accessed as usual via method ``getToc()`` or via property ``outline``. Like with other output-oriented methods, changes must be made permanent via ``save()`` (incremental save supported). Internally, this method consists of the following two steps. For a demonstration see example below.

	  Step 1 deletes all existing bookmarks.

	  Step 2 creates a new table of contents from the entries contained in ``toc``.

	  Should anything go wrong in step 2, step 1 will **not be reversed**, i.e. the old bookmarks will **remain deleted**.

      :param `toc`: A Python list with all bookmark entries that should form the new table of contents. A list compatible with the results of ``getToC()`` (either ``simple=True`` or ``simple=False`` is fine) can be used. In fact, the most practical way to create a new TOC is appropiately modifying ``getToC()``-output and using this as parameter. In any case, each list entry of ``toc`` must consist of 3 or 4 elements: ``[lvl, title, pno, top]``. ``lvl`` is the hierarchy level (int) of the item, starting with ``1``. ``title`` (str) is the title to be displayed. ``pno`` (int) is the target page number where the item points to **(attention: 1-based to support getToC()-output)**.  ``top`` (int / float) is a horizontal location on the page in pixel units. ``top`` is counted from bottom, so a zero points to the bottom of the target page. If ``top`` is omitted, it will be calculated as 36 pixels (half an inch) from top of the page. ``top`` may also be a dictionary (like from ``getToC(simple=False)``) - in this case the value is extracted from its key ``to`` if present.

      :type `toc`: list

      :rtype: int
      :returns: ``0`` upon successful execution, otherwise a non-zero integer. ``doc.outline`` will be updated upon successful execution and method ``getToC(...)`` will also reflect the new situation.

    .. method:: save(outfile, garbage=0, clean=0, deflate=0, incremental=0, ascii=0, expand=0, linear=0)

      PDF documents only: Saves the **current content of the document** under the name ``outfile`` (include path specifications as necessary). A document may have changed for a number of reasons: e.g. after a successfull ``authenticate``, a decrypted copy will be saved, and, in addition (even without any of the optional parameters), some basic cleaning may also have occurred, e.g. broken xref tables have been repaired and earlier incremental changes have been resolved. If you executed methods ``select()``, ``setMetadata()`` or ``setToC()``, their results will also be reflected in the saved version.

      :param `outfile`: The file name to save to. Must be different from the original ``filename`` value if ``incremental=False`` or else a ValueError will be raised. If saving incremental, then ``garbage`` and ``linear`` **must be** ``False`` and ``outfile`` **must equal** the original filename.
      :type `outfile`: string

      :param `garbage`: Do garbage collection: 0 = none, 1 = remove unused objects, 2 = in addition to 1, compact xref table, 3 = in addition to 2, merge duplicate objects. Excludes ``incremental``.
      :type `garbage`: int

      :param `clean`: Clean content streams: 0 = False, 1 = True.
      :type `clean`: int

      :param `deflate`: Deflate uncompressed streams: 0 = False, 1 = True.
      :type `deflate`: int

      :param `incremental`: Only save changed objects: 0 = False, 1 = True. Excludes ``garbage`` and ``linear``. Cannot be used for decrypted files and for files that have been repaired during open (``openErrCode > 0``). In these cases saving to a new file is required.
      :type `incremental`: int

      :param `ascii`: Where possible make the output ASCII: 0 = False, 1 = True.
      :type `ascii`: int

      :param `expand`: Decompress contents: 0 = none, 1 = images, 2 = fonts, 255 = all. This convenience option generates a decompressed file version that can be better read by some other programs.
      :type `expand`: int

      :param `linear`: Save a linearised version of the document: 0 = False, 1 = True. This option creates a file format for improved performance when read via internet connections. Excludes ``incremental``.
      :type `linear`: int

      :rtype: int
      :returns: Count of errors that occurred during save. Note: PyMuPDF will recover from many errors encountered in a PDF and continue processing.

    .. method:: close()

      Releases space allocations associated with the document. If created from a file, also closes ``filename`` (releasing control the OS).

    .. attribute:: outline

      Contains either ``None`` or the first :ref:`Outline` entry of the document. Can be used as a starting point to walk through all outline items. If a document with ``needPass=True`` has not yet been authenticated, an ``AttributeError`` will be raised, when this attribute is being accessed.

      :rtype: :ref:`Outline`

    .. attribute:: isClosed

      ``False (0)`` if document is still open, ``True (1)`` otherwise. If closed, most other attributes and all methods will have been deleted / disabled. In addition, :ref:`Page` objects referring to this document (i.e. created with :meth:`Document.loadPage`) will no longer be usable. For reference purposes, :attr:`Document.name` still exists and will contain the filename of the original document.

      :rtype: int

    .. attribute:: needsPass

      Contains an indicator showing whether the document is encrypted (``True = 1``) or not (``False = 0``). This indicator remains unchanged - even after the document has been authenticated.

      :rtype: bool

    .. attribute:: isEncrypted

      This indicator initially equals the value of ``needsPass``. After successful authentification, it is set to ``False = 0`` to reflect the situation.

      :rtype: bool

    .. Attribute:: metadata

      Contains the document's meta data as a Python dictionary or ``None`` (if encrypted **and** ``needPass=True``). Keys are ``format``, ``encryption``, ``title``, ``author``, ``subject``, ``keywords``, ``creator``, ``producer``, ``creationDate``, ``modDate``. All item values are strings or ``None``.

      Except ``format`` and ``encryption``, the key names correspond in an obvious way to the PDF dictionary keys ``/Creator``, ``/Producer``, ``/CreationDate``, ``/ModDate``, ``/Title``, ``/Author``, ``/Subject``, ``/Keywords`` respectively.

      ``format`` contains the PDF version (e.g. 'PDF-1.6').

      ``encryption`` either contains ``None`` (no encryption), or a string naming an encryption method (e.g. ``'Standard V4 R4 128-bit RC4'``). Note that an encryption method may be specified for a readable document (i.e. ``needsPass=False``). In such cases not all permissions will probably have been granted. Check dictionary ``getPermits()`` for details.

      If the date fields contain meaningful data (which need not be the case at all!), they are strings in the PDF-internal timestamp format "D:<TS><TZ>", where

      <TS> is the 12 character ISO timestamp ``YYYMMDDhhmmss`` (``YYYY`` - year, ``MM`` - month, ``DD`` - day, ``hh`` - hour, ``mm`` - minute, ``ss`` - second), and

      <TZ> is a time zone value (time intervall relative to GMT) containing a sign ('+' or '-'), the hour (``hh``), and the minute (``'mm'``, note the apostrophies!).

      A Paraguayan value might hence look like ``D:20150415131602-04'00'``, which corresponds to the timestamp April 15, 2015, at 1:16:02 pm local time Asuncion.

      :rtype: dict

    .. Attribute:: name

      Contains the ``filename`` or ``filetype`` value with which ``Document`` was created.

      :rtype: string

    .. Attribute:: pageCount

      Contains the number of pages of the document. May return 0 for documents with no pages.

      :rtype: int

    .. Attribute:: openErrCode

      Shows whether a repair took place while opening the document. If ``openErrCode > 0``, the attribute ``openErrMsg`` contains the last repair message and also appears on ``SYSERR``. If an error occurred, any ``save()`` of the document must occur to a new file, incremental saves cannot be used.

      :rtype: int

    .. Attribute:: openErrMsg

      Contains either an empty string or the last error message if ``openErrCode > 0``. Together with other error messages, it will also appear on ``SYSERR``.

      :rtype: string

Remarks on ``select()``
------------------------

Page numbers in the list need not be unique nor be in any particular sequence. This makes the method a versatile utility to e.g. select only even or odd pages, re-arrange a document from back to front, duplicate it, and so forth. In combination with text extraction you can also omit / include pages with no text or a certain text, etc.

You can execute several selections in a row. The document structure will be kept updated.

.. CAUTION:: This also means, that any document data from before this method must be assumed to be invalid. This is especially true for old page objects, table of contents and the ``pageCount`` property. If you plan to use the ``close()`` method, make sure you have deleted any page object created before (by ``page = None``).

Any of those changes will become permanent only with a ``doc.save()``. If you have de-selected many pages, consider specifying ``garbage=3`` option to eventually reduce the resulting document's size (when saving to a new file).

Also note, that this method **preserves all links, annotations and bookmarks** that are still valid. In other words: deleting pages only deletes references that point to de-selected pages.

``select()`` Examples
----------------------------------------

Create a document copy deleting pages with no text:
::
 import fitz
 doc = fitz.open("any.pdf")
 r = list(range(doc.pageCount))             # list of all pages

 for p in fitz.Pages(doc):
     if not p.getText():                    # contains no text
         r.remove(p.number)                 # remove page number from list
     p = None                               # release page memory

 doc.select(r)                              # apply the list
 doc.save("out.pdf", garbage=3)             # save the resulting PDF, OR

 # overwrite the original document ... *** VERY FAST! ***
 doc.save("any.pdf", incremental = 1)       # excludes garbage collection


Create a sub document with the odd pages:
::
 import fitz
 doc = fitz.open("any.pdf")
 r = [i for i in list(range(doc.pageCount)) if i%2 > 0]
 doc.select(r)                              # apply the list
 doc.save("any-oddpages.pdf", garbage=3)    # save PDF with the odd pages


Concatenate a document with itself:
::
 import fitz
 doc = fitz.open("any.pdf")
 r = list(range(doc.pageCount))
 r += r                                     # turn PDF into a copy of itself
 doc.select(r)
 doc.save("any-any.pdf")                    # contains doubled <any.pdf>

Create document copy in reverse page order (well, don't try with a million pages):
::
 import fitz
 doc = fitz.open("any.pdf")
 r = list(range(doc.pageCount-1, -1, -1))
 doc.select(r)
 doc.save("out.pdf")

``setMetadata()`` Example
----------------------------------------
Clear metadata information. If you do this out of privacy / data protection concerns, make sure you save the document as a new file with ``garbage`` option specified. Only then the old ``/Info`` object will also be physically removed from the file:
::
 >>> import fitz
 >>> doc=fitz.open("pymupdf.pdf")
 >>> doc.metadata
 {'producer': 'rst2pdf, reportlab', 'format': 'PDF 1.4', 'encryption': None, 'author':
 'Jorj X. McKie', 'modDate': "D:20160611145816-04'00'", 'keywords': 'PDF, XPS, EPUB, CBZ',
 'title': 'The PyMuPDF Documentation', 'creationDate': "D:20160611145816-04'00'",
 'creator': 'sphinx', 'subject': 'PyMuPDF 1.9.1'}
 >>> doc.setMetadata({})
 0
 >>> doc.metadata
 {'producer': 'unspecified', 'format': 'PDF 1.4', 'encryption': None, 'author':
 'unspecified', 'modDate': 'unspecified', 'keywords': 'unspecified', 'title':
 'unspecified', 'creationDate': 'unspecified', 'creator': 'unspecified',
 'subject': 'unspecified'}
 >>> doc.save("anonymous.pdf", garbage=3)
 0
 >>>

``setToC()`` Example
----------------------------------
This shows how to modify or add a table of contents:
::
 $ py -3.5
 Python 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)] on win32
 Type "help", "copyright", "credits" or "license" for more information.
 >>> import fitz
 >>> doc = fitz.open("test.pdf")
 >>> toc = doc.getToC()
 >>> for t in toc: print(t)                           # show what we have
 ...
 [1, 'The PyMuPDF Documentation', 1]
 [2, 'Introduction', 1]
 [3, 'Note on the Name fitz', 1]
 [3, 'License', 1]
 >>> toc[1][1] = "Introduction modified by setToC"    # modify anything
 >>> doc.setToC(toc)                                  # replace outline tree
 0
 >>> for t in doc.getToC(): print(t)                  # demonstrate it worked
 ...
 [1, 'The PyMuPDF Documentation', 1]
 [2, 'Introduction modified by setToC', 1]            # <<< this has changed
 [3, 'Note on the Name fitz', 1]
 [3, 'License', 1]
 >>>
