.. _Pixmap:

================
**Pixmap**
================

Pixmaps represent a set of pixels for a 2 dimensional region of a plane. Each pixel has n components per pixel, the last of which is always alpha. The data is in premultiplied alpha when rendering, but non-premultiplied for colorspace conversions and rescaling.

Create a new pixmap by :meth:`Context.new_pixmap`, :meth:`Context.new_pixmap_with_bbox`, :meth:`Context.new_pixmap_with_data`, or :meth:`Context.new_pixmap_with_bbox_and_data`.

Methods
=======

=============================================== ======================================================================
:meth:`~Pixmap.clear_pixmap`                    Clears a pixmap(with given value).
:meth:`~Pixmap.gamma_pixmap`                    Apply gamma correction to a pixmap. 
:meth:`~Pixmap.get_bbox`                        Get a bounding box for a pixmap.
:meth:`~Pixmap.get_samples`                     Get the components data for all pixels.
:meth:`~Pixmap.get_width`                       Get the width of the region in pixels.
:meth:`~Pixmap.get_height`                      Get the height of the region in pixels.
:meth:`~Pixmap.get_colorspace`                  Get the colorspace the pixmap is in.
:meth:`~Pixmap.get_components`                  Get the number of color components in the image.
:meth:`~Pixmap.invert_pixmap`                   Invert all the pixels in the pixmap(or a given bounding box).
:meth:`~Pixmap.new_draw_device`                 Create a device to draw on a pixmap.
:meth:`~Pixmap.unmultiply_pixmap`               Convert a pixmap from premultiplied to non-premultiplied format.
:meth:`~Pixmap.write_pam`                       Save a pixmap as a pam.
:meth:`~Pixmap.write_pixmap`                    Save a pixmap out.
:meth:`~Pixmap.write_png`                       Save a pixmap as a png.
:meth:`~Pixmap.write_pnm`                       Save a pixmap as a pnm.
=============================================== ======================================================================

Class API
==========

.. class:: Pixmap

   .. method:: clear_pixmap(self, value=0)
   
      Clears a pixmap.  
      
      :param `value`: Values in the range 0 to 255 are valid. Each component sample for each pixel in the pixmap will be set to this value, while alpha will always be set to 255 (non-transparent). If not given, all components of all pixels in a pixmap will be set to 0.
      :type `value`: int

   .. method:: gamma_pixmap(self, gamma)

      Apply gamma correction to a pixmap. All components of all pixels are modified (except alpha, which is unchanged).

      :param `gamma`: The gamma value to apply; 1.0 for no change.
      :type `gamma`: float
  
   .. method:: get_bbox(self)

      Get a bounding box for a pixmap. 

      :rtype: :ref:`BBox`

   .. method:: get_samples(self)

      Get the components data for all pixels. Samples is a block of memory width * height * n bytes of memory in which the components are stored. The first n bytes are components 0 to n-1 for the pixel at (x,y). Each successive n bytes gives another pixel in scanline order. Subsequent scanlines follow on with no padding.

      :rtype: string

   .. method:: get_width(self)

      Get the width of the region in pixels.

      :rtype: int

   .. method:: get_height(self)

      Get the height of the region in pixels.

      :rtype: int

   .. method:: get_colorspace(self)

      Get the colorspace the pixmap is in.

      :rtype: :ref:`ColorSpace`

   .. method:: get_components(self)

      Get the number of color components n in the image. Always includes a separate alpha channel. For mask images n=1, for greyscale (plus alpha) images n=2, for rgb (plus alpha) images n=3.

      :rtype: int

   .. method:: invert_pixmap(self, bbox)

      Invert all the pixels in the pixmap(or a given bounding box). All components are inverted(except alpha, which is unchanged). 

      :param `bbox`: Invert all the pixels in the bbox. If not given, the whole pixmap will be inverted. 
      :type `bbox`: :ref:`BBox`

   .. method:: new_draw_device(self, bbox)

      Create a device to draw on a pixmap. The pixmap is not cleared by the draw device, see :meth:`~Pixmap.clear_pixmap` for how to clear it prior to calling :meth:`~Pixmap.new_draw_device`. 

      :param `bbox`: bounding box to restrict any marking operations of the draw device. If not given, the draw device will be created on the whole pixmap.
      :type `bbox`: :ref:`BBox`

      :rtype: :ref:`Device`


   .. method:: unmultiply_pixmap(self)
   
      Convert a pixmap from premultiplied to non-premultiplied format.

   .. method:: write_pam(self, filename, savealpha)

      Save a pixmap as a pam.

      :param `filename`: The filename to save as (including extension).
      :type `filename`: string

      :param `savealpha`: Save alpha or not.
      :type `savealpha`: int

   .. method:: write_pixmap(self, filename, rgb)

      Save a pixmap out.

      :param `filename`: The prefix for the name of the pixmap. The pixmap will be saved as "name.png" if the pixmap is RGB or Greyscale, "name.pam" otherwise.
      :type `filename`: string

      :param `rgb`: If non zero, the pixmap is converted to rgb (if possible) before saving.
      :type `rgb`: int

   .. method:: write_png(self, filename, savealpha)

      Save a pixmap as a png.

      :param `filename`: The filename to save as (including extension).
      :type `filename`: string

      :param `savealpha`: Save alpha or not.
      :type `savealpha`: int

   .. method:: write_pnm(self, filename)

      Save a pixmap as a pnm.

      :param `filename`: The filename to save as (including extension).
      :type `filename`: string

