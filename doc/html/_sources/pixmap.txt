.. raw:: pdf

    PageBreak

.. _Pixmap:

================
Pixmap
================

Pixmaps represent a rectangular set of pixels in a 2 dimensional region. Each pixel is described by a number of bytes ("components") plus an alpha (transparency) byte. The data is in premultiplied alpha when rendering, but non-premultiplied for colorspace conversions and rescaling.

There are three ways to construct pixmaps:

* an empty pixmap based on :ref:`Colorspace` and :ref:`IRect` information,

* a pixmap from a memory area in PNG format (e.g. obtained from a file),

* a pixmap from a memory area in plain pixels (like contained in ``pixmap.samples`` - see below).

Please have a look at the **example** to see some pixmap usage "at work".

============================= ==============================================
**Method / Attribute**        **Short Description**
============================= ==============================================
:meth:`Pixmap.clearWith`      clears (parts of) a pixmap
:meth:`Pixmap.tintWith`       tints a pixmap with a color
:meth:`Pixmap.gammaWith`      applies a gamma factor to the pixmap
:meth:`Pixmap.writePNG`       saves a pixmap as a PNG file
:meth:`Pixmap.copyPixmap`     copy parts of another pixmap
:meth:`Pixmap.getSize`        returns the pixmap's total length
:meth:`Pixmap.getColorspace`  returns the :ref:`Colorspace` used
:meth:`Pixmap.getIRect`       returns the :ref:`IRect` used
:meth:`Pixmap.invertIRect`    invert the pixels of a given area
:attr:`Pixmap.samples`        the components data for all pixels
:attr:`Pixmap.height`         height of the region in pixels
:attr:`Pixmap.width`          width of the region in pixels
:attr:`Pixmap.x`              X-coordinate of top-left corner of pixmap
:attr:`Pixmap.y`              Y-coordinate of top-left corner of pixmap
:attr:`Pixmap.n`              number of bytes per pixel
:attr:`Pixmap.xres`           resolution in X-direction
:attr:`Pixmap.yres`           resolution in Y-direction
:attr:`Pixmap.interpolate`    interpolation method indicator
============================= ==============================================

**Class API**

.. class:: Pixmap

   .. method:: __init__(self, colorspace, irect)

      This constructor creates an empty pixmap of a size and an origin specified by the irect object. So for a ``fitz.IRect(x0, y0, x1, y1)``, ``fitz.Point(x0, y0)`` will designate the top left corner of the pixmap.

      :param `colorspace`: The required colorspace of the pixmap.
      :type `colorspace`: :ref:`Colorspace`

      :param `irect`: Specifies the pixmap's area and its location.
      :type `irect`: :ref:`IRect`

   .. method:: __init__(self, data, len)

      This constructor creates a (non-empty) pixmap from ``data``, which is assumed to contain a PNG image of ``len`` bytes length. See example below.

      :param `data`: Data containing a complete, valid image in PNG format. E.g. this may have been obtained from a statement like ``data = open('somepic.png', 'rb').read()``. The origin of the resulting pixmap is (0,0).
      :type `data`: string

      :param `len`: An integer specifying the length of ``data``.
      :type `len`: int

   .. method:: __init__(self, colorspace, width, height, samples)

      This constructor creates a (non-empty) pixmap from ``samples``, which is assumed to contain an image in "plain pixel" format. This means that each pixel is represented by n bytes (as controlled by the ``colorspace`` parameter). The origin of the resulting pixmap is (0,0). This method may be usefull to create a full copy of a given pixmap, or when some program needs a way to store its generated data as a PNG file with a very high performance (more than 2 times faster than ``PIL / Pillow`` and more than 10 times faster than pure Python modules like ``pypng``.

      :param `colorspace`: Colorspace of the image. This crucial parameter controls the interpretation of the ``samples`` area: for :data:`CS_GRAY`, :data:`CS_RGB` and :data:`CS_CMYK`, 2, 4 or 5 bytes in samples will be assumed to define one pixel, respectively.
      :type `colorspace`: :ref:`Colorspace`

      :param `width`: Width of the image
      :type `width`: int

      :param `height`: Height of the image
      :type `height`: int

      :param `samples`: A string containing consecutive bytes describing all pixels of the image.
      :type `samples`: string

   .. method:: clearWith(value [, irect])

      Clears an area specified by the :ref:`IRect` ``irect`` within a pixmap. To clear the whole pixmap omit ``irect``.

      :param `value`: Values from 0 to 255 are valid. Each color byte of each pixel will be set to this value, while alpha will always be set to 255 (non-transparent). Default is 0 (black).
      :type `value`: int

      :param `irect`: An IRect object specifying the area to be cleared.
      :type `irect`: :ref:`IRect`

   .. method:: tintWith(red, green, blue)

      Colorizes (tints) a pixmap with a color provided as a value triple (red, green, blue). Use this method only for :data:`CS_GRAY` or :data:`CS_RGB` colorspaces. A ``TypeError`` exception will otherwise be raised.

	  If the colorspace is :data:`CS_GRAY`, ``(red + green + blue)/3`` will be taken as the tinting value.

      :param `red`: The ``red`` component. Values from 0 to 255 are valid.
      :type `red`: int

      :param `green`: The ``green`` component. Values from 0 to 255 are valid.
      :type `green`: int

      :param `blue`: The ``blue`` component. Values from 0 to 255 are valid.
      :type `blue`: int

   .. method:: gammaWith(gamma)

      Applies a gamma factor to a pixmap, i.e. lightens or darkens it.

      :param `gamma`: ``gamma = 1.0`` does nothing, ``gamma < 1.0`` lightens, ``gamma > 1.0`` darkens the image.
      :type `gamma`: float

   .. method:: invertIRect([irect])

      Invert the color of all pixels in an area specified by :ref:`IRect` ``irect``. To invert everything, omit this parameter.

      :param `irect`: The :ref:`IRect` to be inverted.
      :type `irect`: :ref:`IRect`

   .. method:: copyPixmap(source, irect)

      Copies the :ref:`IRect` part of the ``source`` pixmap into the corresponding area of this one. The two pixmaps may have different dimensions and different colorspaces. The copy mechanism automatically adjusts to any discrepancies between source and target pixmap.

	  If you want your ``source`` pixmap image to land at a specific position of the destination, modify its ``x`` and ``y`` attributes accordingly before copying. See the example below for how this works.

      :param `source`: The pixmap from where to copy.
      :type `source`: :ref:`Pixmap`

      :param `irect`: An IRect object specifying the area to be copied.
      :type `irect`: :ref:`IRect`

   .. method:: getSize()

      Returns the total length of the pixmap. This will generally equal ``len(pix.samples) + 52``. The following will evaluate to ``True``: ``len(pixmap) == pixmap.getSize()``.

      :rtype: int

   .. method:: getColorspace()

      Returns the colorspace used for constructing the pixmap. Usefull when the pixmap has been created from an image area.

      :rtype: :ref:`Colorspace`

   .. method:: getIRect()

      Returns the :ref:`IRect` used for constructing the pixmap. Usefull when the pixmap has been created from an image area.

      :rtype: :ref:`IRect`

   .. method:: writePNG(filename, savealpha=False)

      Save a pixmap as a png file.

      :param `filename`: The filename to save as (the extension ``png`` must be specified).
      :type `filename`: string

      :param `savealpha`: Save alpha or not.
      :type `savealpha`: bool

   .. attribute:: samples

      The color and transparency values for all pixels. ``samples`` is a memory area of size ``width * height * n`` bytes. Each n bytes define one pixel. Each successive n bytes yield another pixel in scanline order. Subsequent scanlines follow each other with no padding. E.g. for an RGBA colorspace (i.e. ``n = 4``) this means, ``samples`` is a bytearray like ``..., R, G, B, A, ...``, and the four byte values R, G, B, A define one pixel.

      This area can also be used by other image processing libraries like PIL (Python Imaging Library) to do additional processing. See example 3.

      :rtype: bytearray

   .. attribute:: width

      The width of the region in pixels. For compatibility reasons, ``w`` is also supported.

      :rtype: int

   .. attribute:: height

      The height of the region in pixels. For compatibility reasons, ``h`` is also supported.

      :rtype: int

   .. attribute:: x

      X-coordinate of top-left corner

      :rtype: int

   .. attribute:: y

      Y-coordinate of top-left corner

      :rtype: int

   .. attribute:: n

      Number of components per pixel. This number depends on (and identifies) the chosen colorspace: :data:`CS_GRAY` = 2, :data:`CS_RGB` = 4, :data:`CS_CMYK` = 5.

      :rtype: int

   .. attribute:: xres

      Horizontal resolution in dpi (dots per inch).

      :rtype: int

   .. attribute:: yres

      Vertical resolution in dpi.

      :rtype: int

   .. attribute:: interpolate

      An information-only boolean flag set to ``True`` if the image will be drawn using "linear interpolation". If ``False`` "nearest neighbour sampling" will be used.

      :rtype: bool

**Example 1**

This shows how pixmaps can be used for purely graphical, non-PDF purposes. The script reads a PNG file and creates a new PNG file which consist of 3 * 4 tiles of the original one:
::
 import fitz
 # read in picture image and create a pixmap of it
 pic = open("editra.png", "rb").read()
 pix0 = fitz.Pixmap(pic, len(pic))

 # calculate target pixmap dimensions and create it
 tar_width  = pix0.width * 3              # 3 tiles per row
 tar_height = pix0.height * 4             # 4 tiles per column
 tar_irect  = fitz.IRect(0, 0, tar_width, tar_height)
 tar_pix    = fitz.Pixmap(fitz.Colorspace(fitz.CS_RGB), tar_irect)
 tar_pix.clearWith(90)        # clear target with a lively gray :-)

 # now fill target with 3 * 4 tiles of input picture
 for i in list(range(4)):
     pix0.y = i * pix0.height                          # modify input's y coord
     for j in list(range(3)):
         pix0.x = j * pix0.width                       # modify input's x coord
         tar_pix.copyPixmap(pix0, pix0.getIRect())     # copy input to new loc
         # save intermediate image to show what is happening
         fn = "target-" + str(i) + str(j) + ".png"
         tar_pix.writePNG(fn)


This is the input picture ``editra.png`` (taken from the wxPython directory ``/tools/Editra/pixmaps``):

.. image:: editra.png

Here is the output, showing some intermediate picture and the final result:

.. image:: target-11.png

.. image:: target-32.png

**Example 2**

This shows how to create a PNG file from a numpy array - about two times faster than doing the same thing with ``PIL / Pillow``:
::
 import numpy as np
 import fitz
 #==============================================================================
 # create a uni-color width * height PNG with fitz and numpy
 #==============================================================================
 height = 150
 width  = 100
 bild=np.ndarray((height, width, 4), dtype=np.uint8)

 for i in range(height):
     for j in range(width):
	     # one pixel (some fun coloring)
         bild[i][j] = [(i+j)%256, i%256, j%256, 255]

 samples = str(bytearray(bild))       # get plain pixel data from numpy array
 pix=fitz.Pixmap(fitz.Colorspace(fitz.CS_RGB), width, height, samples)
 pix.writePNG("test.png")


**Example 3**

This shows how to interface with ``PIL / Pillow`` (the Python Imaging Library):
::
 import fitz
 from PIL import Image
 ... # some code here
 img = Image.frombytes("RGBA", [pix.width, pix.height], str(pix.samples))
 ... # some PIL code here, including writing any
 ... # results back to Pixmap.samples
