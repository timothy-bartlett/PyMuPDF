.. raw:: pdf

    PageBreak

.. _Annot:

================
Annot
================
Quote from the Adobe manual: "An annotation associates an object such as a note, sound, or movie with a location on a page of a PDF document, or provides a way to interact with the user by means of the mouse and keyboard."

This class supports accessing such annotations - not only for PDF files, but for all MuPDF supported document types. However, only a few methods and properties apply to non-PDF documents.


=========================== ==============================================================
**Attribute**               **Short Description**
=========================== ==============================================================
:meth:`Annot.getPixmap`     image of the annotation as a pixmap
:meth:`Annot.setInfo`       PDF only: change metadata of an annotation
:meth:`Annot.setBorder`     PDF only: changes the border of an annotation
:meth:`Annot.setLineEnds`   PDF only: changes the line ends of an annotation
:meth:`Annot.setFlags`      PDF only: changes the flags of an annotation
:meth:`Annot.setRect`       PDF only: changes the rectangle of an annotation
:meth:`Annot.setColors`     PDF only: changes the colors of an annotation
:meth:`Annot.updateImage`   PDF only: applies border and color values to shown image
:attr:`Annot.border`        PDF only: border details
:attr:`Annot.colors`        PDF only: border / background and fill colors
:attr:`Annot.flags`         PDF only: annotation flags
:attr:`Annot.info`          PDF only: various information
:attr:`Annot.lineEnds`      PDF only: start / end appearance of line-type annotations
:attr:`Annot.next`          link to the next annotation
:attr:`Annot.rect`          rectangle containing the annotation
:attr:`Annot.type`          PDF only: type of the annotation
:attr:`Annot.vertices`      PDF only: point coordinates of Polygons, PolyLines, etc.
=========================== ==============================================================

**Class API**

.. class:: Annot

   .. method:: getPixmap(matrix = fitz.Ientity, colorspace = fitz.csRGB, alpha = False)

      Creates a pixmap from the annotation as it appears on the page in untransformed coordinates. The pixmap's :ref:`IRect` equals ``Annot.rect.round()`` (see below).

      :param `matrix`: a matrix to be used for image creation. Default is the ``fitz.Identity`` matrix.
      :type `matrix`: :ref:`Matrix`

      :param `colorspace`: a colorspace to be used for image creation. Default is ``fitz.csRGB``.
      :type `colorspace`: :ref:`Colorspace`

      :param `alpha`: whether to include transparency information. Default is ``False``.
      :type `alpha`: bool

      :rtype: :ref:`Pixmap`

   .. method:: setInfo(d)

      Changes the info dictionary. This is includes dates, contents, subject and author (title). Changes for ``name`` will be ignored.

      :param `d`: a dictionary compatible with the ``info`` property (see below). Plausibility checks are kept to a minimum - except all entries must be ``unicode``, ``bytes``, or strings. If ``bytes`` values are provided in Python 3, they will be treated as being UTF8 encoded.

      :type `d`: dict

   .. method:: setLineEnds(start, end)

      Changes the line ending styles (of annotation types where this makes sense).

      :param `start`: an integer specifying the line start style. See :ref:`Annotation Line Ends` for acceptable values.

      :type `start`: int

      :param `end`: an integer specifying the line end style. See :ref:`Annotation Line Ends` for acceptable values.

      :type `end`: int

   .. method:: setRect(rect)

      Changes the rectangle of an annotation. The annotation can be moved around and both sides of the rectangle can be independently scaled. However, the annotation appearance will never get rotated, flipped or sheared.

      :param `rect`: the new rectangle of the annotation. This could e.g. be a rectangle ``rect = Annot.rect * M`` with a suitable :ref:`Matrix` M (scaling and translating).

      :type `rect`: :ref:`Rect`

   .. method:: setBorder(width)

      Changes the border width. Any other border properties (border effects, dashed lines) will be deleted by this method.

      :param `width`: a float specifying the border width in points.

      :type `width`: float

   .. method:: setFlags(flags)

      Changes the flags of the annotation. See :ref:`Annotation Flags` for possible values and use the ``|`` operator to combine several.

      :param `flags`: an integer specifying the required flags.

      :type `flags`: int

   .. method:: setColors(d)

      Changes the colors associated with the annotation.

      :param `d`: a dictionary containing color specifications. For accepted dictionary keys and values see below. The most practical way should be to first make a copy of the ``colors`` property and then modify this dictionary as required. 

      :type `d`: dict

   .. method:: updateImage()

      Attempts to modify the displayed graphical image such that it coincides with the values currently contained in the ``border`` and ``colors`` properties. This is achieved by modifying the contents stream of the associated appearance object. If the stream contains unsupported commands, a ``ValueError`` exception is raised.

   .. attribute:: rect

      The rectangle containing the annotation in untransformed coordinates.

      :rtype: :ref:`Rect`

   .. attribute:: next

      The next annotation on this page or ``None``.

      :rtype: ``Annot``

   .. attribute:: type

      Meaningful for PDF only: A number and two strings describing the annotation type, like ``[2, 'FreeText', 'FreeTextCallout']``. The second string entry is optional and may be empty. ``[]`` if not PDF. See the appendix :ref:`Annotation Types` for a list of possible values and their meanings.

      :rtype: list

   .. attribute:: info

      Meaningful for PDF only: A dictionary containing various information. All fields are unicode or strings (Python 2 or Python 3 respectively).

      * ``name`` - e.g. for ``[12, 'Stamp']`` type annotations it will contain the stamp text like ``Sold`` or ``Experimental``.

      * ``content`` - a string containing the text for type ``Text`` and ``FreeText`` annotations. For ``FileAttachment`` it contains the filename. For other types the entry is optional. Empty if not specified or not a PDF.

      * ``title`` - a string containing the title of the annotation pop-up window. By convention, this is used for the annotation author.

      * ``creationDate`` - the PDF timestamp of creation.

      * ``modDate`` - the PDF timestamp of last change.

      * ``subject`` - the subject, an optional string.

      :rtype: dict


   .. attribute:: flags

      Meaningful for PDF only: An integer whose low order bits contain flags for how the annotation should be presented. See section :ref:`Annotation Flags` for details.

      :rtype: int

   .. attribute:: lineEnds

      Meaningful for PDF only: A dictionary specifying the starting and the ending appearance of annotations of types ``Line``, ``PolyLine``, among others. An example would be ``{'start': 'None', 'end': 'OpenArrow'}``. ``{}`` if not specified or not applicable. For possible values and descriptions in this list, see the Adobe manual, table 8.27 on page 630.

      :rtype: dict

   .. attribute:: vertices

      Meaningful for PDF only: A list containing point ("vertices") coordinates for various types of annotations: For "Line" it contains the starting and ending coordinates. For ``[2, 'FreeText', 'FreeTextCallout']`` it contains 4 or 6 floats designating the starting, the (optional) knee point, and the ending coordinates. For "PolyLine" and "Polygon" it contains the coordinates of the edges connected by line pieces. For "Ink" (freehand drawing) it contains one to many lists of vertex coordinates. Each such sublist represents a separate line in the drawing. ``[]`` when not applicable.

      :rtype: list

   .. attribute:: colors

      Meaningful for PDF only: A dictionary of two lists of floats in range ``0 <= float <= 1`` specifying the common (``common``) and the interior (``fill``) colors. The common color is used for borders, and in some cases also for backgrounds. The fill color is used for the interior of objects like line ends, circles and squares. The lengths of the lists determine the colorspaces used: 1 = GRAY, 3 = RGB, 4 = CMYK. So ``[1.0, 0.0, 0.0]`` stands for RGB and color ``red``. Both lists can be ``[]`` if not specified. The dictionary will be empty ``{}`` if no PDF. The value of each float stands for the "intensity" of the represented color byte, meaning 1 corresonds to 255, 0.5 to 128, 0.25 to 64 and so forth.

      :rtype: dict

   .. attribute:: border

      Meaningful for PDF only: A dictionary containing border characteristics. It will be empty ``{}`` if not PDF or when no border information is provided. Technically, the PDF entries ``/Border``, ``/BS`` and ``/BE`` will be checked to build this information. The following optional keys may be contained:

      * ``width`` - a float indicating the border thickness in points.

      * ``effect`` - a list specifying a border line effect like ``[1, 'C']``. The first entry "intensity" is an integer (from 0 to 2 for maximum intensity). The second is either 'S' for "no effect" or 'C' for a "cloudy" line.

      * ``dashes`` - a list specifying a line dash pattern like in ``[3, 2]``. This example specifies 3-point dashes alternating with 2-point gaps.

      * ``style`` - 1-byte border style: ``S`` (Solid) = solid rectangle surrounding the annotation, ``D`` (Dashed) = dashed rectangle surrounding the annotation, the dash pattern is specified by the ``dashes`` entry, ``B`` (Beveled) = a simulated embossed rectangle that appears to be raised above the surface of the page, ``I`` (Inset) = a simulated engraved rectangle that appears to be recessed below the surface of the page, ``U`` (Underline) = a single line along the bottom of the annotation rectangle.

      * ``hradius`` - horizontal corner radius. Zero means square (un-rounded) corners.

      * ``vradius`` - vertical coner radius.  Zero means square (un-rounded) corners.

      :rtype: dict
