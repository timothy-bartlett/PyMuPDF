.. _DisplayList:

================
**DisplayList**
================

DisplayList is a list containing drawing commands (text, images, etc.). The intent is two-fold: as a caching-mechanism to reduce parsing of a page, and to be used as a data structure in multi-threading where one thread parses the page and another renders pages.

A displaylist is created by :meth:`Context.new_display_list`, and populated with objects from a page by running :meth:`Page.run_page` on a device obtained from :meth:`~DisplayList.new_list_device`. Replay the list (once or many times) by calling :meth:`~DisplayList.run_display_list`. 

Methods
=======

===================================== ==================================================
:meth:`~DisplayList.run_display_list` (Re)-run a display list through a device.
:meth:`~DisplayList.new_list_device`  Create a rendering device for a display list.
===================================== ==================================================


Class API
==========

.. class:: DisplayList

   .. method:: new_list_device(self)

      Create a rendering device for a display list.

      When the device is rendering a page it will populate the display list with drawing commsnds (text, images, etc.). The display list can later be reused to render a page many times without having to re-interpret the page from the document file for each rendering. 

      :rtype: :ref:`Device`

   .. method:: run_display_list(self, dev, ctm, cookie)

      :param `dev`: Device obtained from :func:`new_*_device`.
      :type `dev`: :ref:`Device`

      :param `ctm`: Transform matrix to apply to display list contents. May include for example scaling and rotation, see :func:`scale_matrix` and :func:`rotate_matrix`. Set to :data:`fz_identity` if no transformation is desired.
      :type `ctm`: :ref:`Matrix`

      :param `area`: Only the part of the contents of the display list visible within this area will be considered when the list is run through the device. This does not imply for tile objects contained in the display list.
      :type `area`: :ref:`BBox`

      :param `cookie`: Communication mechanism between caller and library running the page. Intended for multi-threaded applications, while single-threaded applications set cookie to ``None``. The caller may abort an ongoing page run. Cookie also communicates progress information back to the caller. The fields inside cookie are continually updated while the page is being run.
      :type `cookie`: :ref:`Cookie`

