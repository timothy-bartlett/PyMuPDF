.. raw:: pdf

    PageBreak

.. _Matrix:

==========
Matrix
==========

Matrix is a row-major 3x3 matrix used by image transformations in MuPDF. With matrices you can manipulate the rendered image of a page in a variety of ways: (parts of) the page can be rotated, zoomed, flipped, sheared and shifted by setting some or all of just six numerical values.

Since all points or pixels live in a two-dimensional space, one column vector of that matrix is a constant unit vector, and only the remaining six elements are used for manipulations. These six elements are usually represented by ``[a,b,c,d,e,f]``. Here is how they are positioned in the matrix:

.. image:: matrix.png

It should be noted, that

    * the below methods are just convenience functions - everything they do, can also be achieved by directly manipulating ``[a,b,c,d,e,f]``
    * all manipulations can be combined - you can construct a matrix that does a rotate **and** a shear **and** a scale **and** a shift etc. in one go


========================= ============================
**Method / Attribute**    **Description**
========================= ============================
:meth:`Matrix.__init__`   Constructor.
:meth:`Matrix.preRotate`  Perform a rotation
:meth:`Matrix.preScale`   Perform a scaling
:meth:`Matrix.preShear`   Perform a shearing
:attr:`Matrix.a`          Zoom factor X direction
:attr:`Matrix.b`          Shearing effect Y direction
:attr:`Matrix.c`          Shearing effect X direction
:attr:`Matrix.d`          Zoom factor Y direction
:attr:`Matrix.e`          Horizontal shift
:attr:`Matrix.f`          Vertical shift
========================= ============================

**Class API**

.. class:: Matrix

   .. method:: __init__(self, a=1, b=0, c=0, d=1, e=0, f=0)

      Constructor. ``Matrix(1, 1)`` will construct a modifyable version of the :ref:`Identity` matrix.

   .. method:: preRotate(deg)

      Performs a clockwise rotation for positive ``deg`` degrees, else counterclockwise. This will change the matrix elements in the following way: ``a = cos(deg)``, ``b = sin(deg)``, ``c = -sin(deg)``, ``d = cos(deg)``.  ``e`` and ``f`` will remain unchanged.

      :param `deg`: The rotation angle in degrees (use conventional notation based on Pi = 180 degrees).
      :type `deg`: float

      :rtype: :ref:`Matrix`

   .. method:: preScale(sx, sy)

      Scales by the zoom factors sx and sy. Has effects on attributes ``a`` and ``d`` only.

      :param `sx`: Zoom factor in X direction. For the effect see description of attribute ``a``.
      :type `sx`: float

      :param `sy`: Zoom factor in Y direction. For the effect see description of attribute ``d``.
      :type `sy`: float

      :rtype: :ref:`Matrix`

   .. method:: preShear(sx, sy)

      Performs shearing, i.e. transformation of rectangles into parallelograms (rhomboids). Has effects on attributes ``b`` and ``c`` only.

      :param `sx`: Shearing effect in X direction. See attribute ``c``.
      :type `sx`: float

      :param `sy`: Shearing effect in Y direction. See attribute ``b``.
      :type `sy`: float

      :rtype: :ref:`Matrix`


   .. attribute:: a

      Scaling in X-direction **(width)**. For example, a value of 0.5 performs a shrink of the **width** by a factor of 2. If a < 0, a (additional) vertical flip will occur, i.e. the rectangle's picture will be mirrored along the Y axis.

      :type: float

   .. attribute:: b

      Causes a shearing effect: each ``Point(x, y)`` will become ``Point(x, y - b*x)``. Therefore, looking from left to right, e.g. horizontal lines will be "tilt" - downwards if b > 0, upwards otherwise (b is the tangens of the tilting angle).

      :type: float

   .. attribute:: c

      Causes a shearing effect: each ``Point(x, y)`` will become ``Point(x - c*y, y)``. Therefore, looking upwards, vertical lines will be "tilt" - to the left if c > 0, to the right otherwise (c ist the tangens of the tilting angle).

      :type: float

   .. attribute:: d

      Scaling in Y-direction **(height)**. For example, a value of 1.5 performs a stretch of the **height** by 50%. If d < 0, a (additional) horizontal flip will occur, i.e. the rectangle's picture will be mirrored along the X axis.

      :type: float

   .. attribute:: e

      Causes a horizontal shift effect: Each ``Point(x, y)`` will be shifted right to become ``Point(x + e, y)``. Note that negative values of ``e`` will shift left.

      :type: float

   .. attribute:: f

      Causes a vertical shift effect: Each ``Point(x, y)`` will be shifted down to become ``Point(x, y - f)``. Note that negative values of ``f`` will shift up.

      :type: float


**Examples**

Here are examples to illustrate some of the effects achievable with matrices. The following pictures start with a page of the PDF version of this help file. We show what will happen when a matrix is being applied (though always full pages are created, only parts are displayed here to save space).

This is the original page image

.. image:: original.png


Shifting
------------
We transform it with a matrix where ``e = 100`` (right shift by 100 pixels)

.. image:: e_is_100.png


Next we do a down shift by 100 pixels: ``f = 100``

.. image:: f_is_100.png


Flipping
--------------
Flip the page vertically (``a = -1``)

.. image:: a_is_-1.png


Flip horizontally (``d = -1``)

.. image:: d_is_-1.png


Shearing
----------------
First a shear in Y direction (``b = 0.5``)

.. image:: b_is_0.5.png

Second a shear in X direction (``c = 0.5``)

.. image:: c_is_0.5.png

Rotating
---------
Finally a rotation by 60 degrees

.. image:: rot_60.png
