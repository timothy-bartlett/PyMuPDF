.. _Matrix:

==========
**Matrix**
==========

Matrix is a a row-major 3x3 matrix used for representing transformations of coordinates throughout MuPDF.

Since all points reside in a two-dimensional space, one vector is always a constant unit vector; hence only some elements may vary in a matrix. Below is how the elements map between different representations.::

	/ a b 0 \
	| c d 0 | 
	\ e f 1 /

normally represented as [ a b c d e f ].

Methods
=======

==================================== ======================================================
:meth:`~Matrix.__init__`             Constructor. 
:meth:`~Matrix.concat`               Multiply the matrix to the left of another matrix.
:meth:`~Matrix.invert`               Create an inverse matrix.
:meth:`~Matrix.is_rectilinear`       Check if a transformation is rectilinear.
:meth:`~Matrix.expansion`            Calculate average scaling factor of matrix.
:meth:`~Matrix.transform_bbox`       Apply a transformation to a bounding box.
:meth:`~Matrix.transform_point`      Apply a transformation to a point.
:meth:`~Matrix.transform_rect`       Apply a transformation to a rectangle.
==================================== ======================================================

Attributes
==========

================== ======================
:attr:`~Matrix.a`  Matrix entry at (1, 1)
:attr:`~Matrix.b`  Matrix entry at (1, 2)
:attr:`~Matrix.c`  Matrix entry at (2, 1)
:attr:`~Matrix.d`  Matrix entry at (2, 2)
:attr:`~Matrix.e`  Matrix entry at (3, 1)
:attr:`~Matrix.f`  Matrix entry at (3, 2)
================== ======================

Class API
==========

.. class:: Matrix

   .. method:: __init__(self, a=1, b=0, c=0, d=1, e=0, f=0)

      Constructor. An identity matrix will be built if no arguments given.

   .. method:: concat(self, right)

      Multiply the matrix to the left of another matrix.

      :param `right`: The right matrix in the multiplication.
      :type `right`: :ref:`Matrix`

      :rtype: :ref:`Matrix`

   .. method:: invert(self)
   
      Create an inverse matrix. If the matrix is not invertible, the original matrix is returned instead.

      :rtype: :ref:`Matrix`

   .. method:: is_rectilinear(self)

      Check if a transformation is rectilinear.

      Rectilinear means that no shearing is present and that any rotations present are a multiple of 90 degrees. Usually this is used to make sure that axis-aligned rectangles before the transformation are still axis-aligned rectangles afterwards.

      :rtype: int

   .. method:: expansion(self)

      Calculate average scaling factor of matrix.

      :rtype: float

   .. method:: transform_bbox(self, bbox)

      Transform a given bounding box.

      Similar to :meth:`~Matrix.transform_rect`, but operates on a bounding box instead of a rectangle. 

      :param `bbox`:
      :type `bbox`: :ref:`BBox`
      
      :rtype: :ref:`BBox`

   .. method:: transform_point(self, point)

      Apply a transformation to a point.

      :param `point`:
      :type `point`: :ref:`Point`
      
      :rtype: :ref:`Point`

   .. method:: transform_rect(self, rect)

      Apply a transform to a rectangle.

      After the four corner points of the axis-aligned rectangle have been transformed it may not longer be axis-aligned. So a new axis-aligned rectangle is created covering at least the area of the transformed rectangle.

      :param `rect`:
      :type `rect`: :ref:`Rect`
      
      :rtype: :ref:`Rect`

   .. attribute:: a

      Matrix entry at (1, 1)

      :type: float

   .. attribute:: b

      Matrix entry at (1, 2)

      :type: float

   .. attribute:: c

      Matrix entry at (2, 1)

      :type: float

   .. attribute:: d

      Matrix entry at (2, 2)

      :type: float

   .. attribute:: e

      Matrix entry at (3, 1)

      :type: float

   .. attribute:: f

      Matrix entry at (3, 2)

      :type: float

