.. raw:: pdf

    PageBreak

===============================
Appendix
===============================
This chapter contains additional comments and examples.

A Glimpse on PyMuPDF's Performance Part 1
==========================================
We have tried to get an impression on PyMuPDF's performance. While we know this is very hard and a fair comparison is almost impossible, we feel that at least some quantitative information should be provided to justify our bold comments on MuPDF's "top performance".

We therefore address the question: How fast are the most basic functions (opening and parsing a document, then saving it back to disk as a new PDF file)?

We chose a variety of tools and a set of different files to test against.

These were the tools
---------------------
All tools are either platform independant, or at least can run on Windows and Unix / Linux (pdftk).

**Poppler** is missing here, because it specifically is a Linux tool set, although we know there exist Windows ports (created with considerable effort apparently). Technically, it is a C/C++ library, for which a Python binding exists - in so far it is somewhat comparable to PyMuPDF. But Poppler in contrast is tightly coupled to **Qt** and **Cairo**. We may still include it in future, when a more handy Windows installation is available. We have seen however some `analysis  <http://hzqtc.github.io/2012/04/poppler-vs-mupdf.html>`_, that hints at a much lower performance than MuPDF. Our comparison of text extraction speeds also show a much lower performance of Poppler's PDF code base **Xpdf**. Image rendering of MuPDF also is about three times faster than the one of Xpdf when comparing the command line tools ``mudraw`` of MuPDF and ``pdftopng`` of Xpdf - see section three of this chapter.

========= =====================================================================
Tool      Description
========= =====================================================================
PyMuPDF   tool of this manual, appearing as "fitz" in reports
pdfrw     a pure Python tool, can be used as frontend to ReportLab and rst2pdf
PyPDF2    a pure Python tool with a very complete function set
pdftk     a command line utility with numerous functions
========= =====================================================================

This is how each of the tools is being used with the test:

**PyMuPDF**:
::
 doc = fitz.Document("input.pdf")
 doc.save("output.pdf")

**pdfrw**:
::
 doc = PdfReader("input.pdf")
 writer = PdfWriter()
 writer.trailer = doc
 writer.write("output.pdf")

**PyPDF2**:
::
 pdfmerge = PyPDF2.PdfFileMerger()
 pdfmerge.append("input.pdf")
 pdfmerge.write("output.pdf")
 pdfmerge.close()

**pdftk**:
::
 pdftk input.pdf output output.pdf


These were the PDF files
-------------------------
We have chosen a set of mostly "challenging" PDF files. Among them are a complete year of `Spektrum <http://www.spektrum.de>`_, the German version of Scientific American, Adobe's PDF manual, and also the PDF version of this manual.

The scientific magazines are of sizes between 10 and 25 MB, each with mixture of text and lots of images.

Adobe manual is the largest with more than 30 MB, mostly text and it is a linearized (!) PDF. This special property will yield interesting implications in the data following.

Our own manual with just about half a MB is here to stand for "the most simple case".

These are our run time findings (in **seconds**, please note the European number convention: decimal point and comma are reversed):

.. image:: runtimes.png

Here is an overview of the output sizes under this simple copy operation:

.. image:: filesizes.png


Observations
------------
PyMuPDF is by far the fastest: on average 3 times faster than the second best (the pure Python tool pdfrw, **chapeau pdfrw!**), and 12 times faster than the command line tool pdftk.

Where PyMuPDF only requires less than 19 seconds to process all files, pdftk affords itself almost 4 minutes.

By far the slowest tool is PyPDF2 - it is about 20 times slower than PyMuPDF and 5 times slower than pdfrw! The main reason for PyPDF2's bad look comes from the Adobe manual. Here, PyMuPDF and pdfrw are 85 and 34 times faster, respectively. PyPDF2 obviously is slowed down by the linear file structure and the immense amount of bookmarks of this file.

If we look at the output PDFs, there is only one surprise:

Each tool created a PDF of similar size as the original. Apart from the Adobe case, PyMuPDF always created the smallest output. Adobe's manual is an exception:

The pure Python tools **reduced** its size by more than 20% (and no longer linearized)!

PyMuPDF and pdftk in contrast **drastically increased** the size by 40% to about 50 MB (and no longer linearized).

So far, we have no explanation of what is happening here.


.. raw:: pdf

    PageBreak

A Glimpse on PyMuPDF's Performance Part 2
==========================================
We also have compared text extraction speed with other tools.

The following table shows a run time comparison of several tools. PyMuPDF's methods appear as "fitz (TEXT)" and "fitz (JSON)" respectively. The tool ``pdftotext.exe`` of the `Xpdf <http://www.foolabs.com/xpdf/>`_ toolset appears as "xpdf".

* **extractText(basic = True):** basic text extraction without layout re-arrangement
* **pdftotext:** a command line tool of the **Xpdf** toolset (which also is the basis of `Poppler's library <http://poppler.freedesktop.org/>`_)
* **extractJSON():** text extraction with layout information
* **pdfminer:** a pure Python PDF tool specialized on text extraction tasks

All tools have been used with their most basic, fanciless functionality - no layout re-arrangements, etc.

Here are the results using the same test files as above (again: decimal point and comma reversed):

.. image:: textperformance.png

Again, (Py-) MuPDF is the fastest around - at least with basic functionality. It is more than two times faster than xpdf and about 2.7 times faster than the JSON method.

``pdfminer``, as a pure Python solution of course is comparatively slow: MuPDF is 70 (25) times faster and xpdf is 30 times faster. These observations in order of magnitude coincide with the statements on this `web site <http://www.unixuser.org/~euske/python/pdfminer/>`_.


.. raw:: pdf

    PageBreak

A Glimpse on PyMuPDF's Performance Part 3
==========================================
We have tested rendering speed of MuPDF against the ``pdftopng.exe``, a command lind tool of the **Xpdf** toolset, which is the PDF code basis of **Poppler**.

MuPDF invocation:
::
 mutool draw -o t%d.png -r 150 file.pdf


Xpdf invocation:
::
 pdftopng.exe file.pdf ./

The resulting runtimes can be found here (again: decimal point and comma reversed):

.. image:: render_speed.png

MuPDF is between 2.7 and 4.7 (on average 3.0) times faster than Xpdf.


.. raw:: pdf

    PageBreak

Example Outputs of Text Extraction Methods
===========================================
This chapter provides background on the text extraction methods of PyMuPDF.

Information of interest are

* what do they provide?
* what do they imply (processing time / data sizes)?

General structure of :ref:`TextPage`
--------------------------------------
Text information contained in a :ref:`TextPage` adheres to the following hierarchy:
::
 <page> (width and height)
     <block> (its rectangle)
	     <line> (its rectangle)
		     <span> (its rectangle and font information)
			     <char> (its rectangle, (x, y) coordinates and value)

A text page consists of blocks (= roughly paragraphs).

A block consists of lines.

A line consists of spans.

A span consists of characters with the same properties. E.g. a different font will cause a new span.

TextPage.extractText()
-----------------------

This is the output of a page of this tutorial's PDF version:
::
 Tutorial

 This tutorial will show you the use of MuPDF in Python step by step.

 Because MuPDF supports not only PDF, but also XPS, OpenXPS and EPUB formats, so does PyMuPDF.

 Nevertheless we will only talk about PDF files for the sake of brevity.
 ...

TextPage.extractHTML()
-----------------------

The HTML version looks like this:
::
 <div class="page">
 <div class="block"><p>
 <div class="metaline"><div class="line"><div class="cell" style="width:0%;align:left"><span class="s0">Tutorial</span></div></div>
 </div></p></div>
 <div class="block"><p>
 <div class="line"><div class="cell" style="width:0%;align:left"><span class="s1">This tutorial will show you the use of MuPDF in Python step by step.</span></div></div>
 </div></p></div>
 <div class="block"><p>
 <div class="line"><div class="cell" style="width:0%;align:left"><span class="s1">Because MuPDF supports not only PDF, but also XPS, OpenXPS and EPUB formats, so does PyMuPDF.</span></div></div>
 <div class="line"><div class="cell" style="width:0%;align:left"><span class="s1">Nevertheless we will only talk about PDF files for the sake of brevity.</span></div></div>
 </div></p></div>
 ...

TextPage.extractJSON()
-----------------------

JSON output looks like so:
::
 {
  "len":35,"width":595.2756,"height":841.8898,
  "blocks":[
   {"type":"text","bbox":[40.01575, 53.730354, 98.68775, 76.08236],
    "lines":[
       {"bbox":[40.01575, 53.730354, 98.68775, 76.08236],
        "spans":[
          {"bbox":[40.01575, 53.730354, 98.68775, 76.08236],
           "text":"Tutorial"
          }
        ]
       }
    ]
   },
   {"type":"text","bbox":[40.01575, 79.300354, 340.6957, 93.04035],
    "lines":[
       {"bbox":[40.01575, 79.300354, 340.6957, 93.04035],
        "spans":[
          {"bbox":[40.01575, 79.300354, 340.6957, 93.04035],
           "text":"This tutorial will show you the use of MuPDF in Python step by step."
          }
        ]
       }
    ]
   },
 ...


TextPage.extractXML()
-----------------------

Now the XML version:
::
 <page width="595.2756" height="841.8898">
 <block bbox="40.01575 53.730354 98.68775 76.08236">
 <line bbox="40.01575 53.730354 98.68775 76.08236">
 <span bbox="40.01575 53.730354 98.68775 76.08236" font="Helvetica-Bold" size="16">
 <char bbox="40.01575 53.730354 49.79175 76.08236" x="40.01575" y="70.85036" c="T"/>
 <char bbox="49.79175 53.730354 59.56775 76.08236" x="49.79175" y="70.85036" c="u"/>
 <char bbox="59.56775 53.730354 64.89575 76.08236" x="59.56775" y="70.85036" c="t"/>
 <char bbox="64.89575 53.730354 74.67175 76.08236" x="64.89575" y="70.85036" c="o"/>
 <char bbox="74.67175 53.730354 80.89575 76.08236" x="74.67175" y="70.85036" c="r"/>
 <char bbox="80.89575 53.730354 85.34375 76.08236" x="80.89575" y="70.85036" c="i"/>
 <char bbox="85.34375 53.730354 94.23975 76.08236" x="85.34375" y="70.85036" c="a"/>
 <char bbox="94.23975 53.730354 98.68775 76.08236" x="94.23975" y="70.85036" c="l"/>
 </span>
 </line>
 </block>
 <block bbox="40.01575 79.300354 340.6957 93.04035">
 <line bbox="40.01575 79.300354 340.6957 93.04035">
 <span bbox="40.01575 79.300354 340.6957 93.04035" font="Helvetica" size="10">
 <char bbox="40.01575 79.300354 46.12575 93.04035" x="40.01575" y="90.050354" c="T"/>
 <char bbox="46.12575 79.300354 51.685753 93.04035" x="46.12575" y="90.050354" c="h"/>
 <char bbox="51.685753 79.300354 53.90575 93.04035" x="51.685753" y="90.050354" c="i"/>
 <char bbox="53.90575 79.300354 58.90575 93.04035" x="53.90575" y="90.050354" c="s"/>
 <char bbox="58.90575 79.300354 61.685753 93.04035" x="58.90575" y="90.050354" c=" "/>
 <char bbox="61.685753 79.300354 64.46575 93.04035" x="61.685753" y="90.050354" c="t"/>
 <char bbox="64.46575 79.300354 70.02576 93.04035" x="64.46575" y="90.050354" c="u"/>
 <char bbox="70.02576 79.300354 72.805756 93.04035" x="70.02576" y="90.050354" c="t"/>
 <char bbox="72.805756 79.300354 78.36575 93.04035" x="72.805756" y="90.050354" c="o"/>
 <char bbox="78.36575 79.300354 81.695755 93.04035" x="78.36575" y="90.050354" c="r"/>
 <char bbox="81.695755 79.300354 83.91576 93.04035" x="81.695755" y="90.050354" c="i"/>
 ...

Resource Requirements of Text Extraction Methods
==================================================
The four text extraction methods of a :ref:`TextPage` differ significantly: in terms of information they supply (see above), and in terms of resource requirements. More information of course means that more processing is required and a higher data volume is generated.

For testing performance, we have run several example PDFs through these methods and found the following information. This  data is not statistically secured in any way - just take it as an idea for what you should expect to see.

As a low end example we took this manual's PDF version (45+ pages, text oriented, 500 KB). The high end case was Adobe's PDF manual (1310 pages, text oriented, 32 MB). The other test cases were `Spektrum <http://www.spektrum.de/>`_ magazines of the year 2015 (the German version of Scientific American, 100+ pages, text with lots of complex interspersed images, 10 to 25 MB each).

Performance
-------------
Performance of text extraction has improved significantly in MuPDF 1.8! As of updating this documentation (mid November 2015), data hint at an improvement factor greater than 2. Especially the complex extraction methods now have a much lower effort penalty.

On a higher level Win10 machine (8 processors at 4 GHz, 8 GB RAM), ``extractXML()`` needs anything between 0.2 and 0.5 seconds per page. This means that you can extract extremely detailed text information of a complex 100-page magazine in less than a minute. This is faster than some other free text extraction tools like e.g. `Nitro 3 <https://www.gonitro.com/pdf-reader>`_.

With ``PDF2TextJS.py`` of the example directory, you have a high performance text extraction utility with a high layout faithfulness!

Data Sizes
-----------
The sizes of the returned text strings follow this pattern, again ``extractText(basic=True)`` is set to 1:

``(Text : HTML : JSON : XML) ~ (1 : 4 : 6 : 87)``

The number 87 for ``extractXML()`` corresponds to values between 200 and 400 KB per page.
